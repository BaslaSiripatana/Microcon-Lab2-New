
microcon_Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080f0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008308  08008308  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008308  08008308  00018308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008310  08008310  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008310  08008310  00018310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008314  08008314  00018314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000010  08008328  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08008328  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001824d  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cd5  00000000  00000000  000382d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  0003afa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000107a  00000000  00000000  0003c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028da3  00000000  00000000  0003d53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018135  00000000  00000000  000662dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114145  00000000  00000000  0007e412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c8c  00000000  00000000  00192558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001981e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080082b0 	.word	0x080082b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080082b0 	.word	0x080082b0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a68:	f000 b970 	b.w	8000d4c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	460d      	mov	r5, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	460f      	mov	r7, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4694      	mov	ip, r2
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0xe2>
 8000a9a:	fab2 f382 	clz	r3, r2
 8000a9e:	b143      	cbz	r3, 8000ab2 <__udivmoddi4+0x2e>
 8000aa0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aa4:	f1c3 0220 	rsb	r2, r3, #32
 8000aa8:	409f      	lsls	r7, r3
 8000aaa:	fa20 f202 	lsr.w	r2, r0, r2
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	409c      	lsls	r4, r3
 8000ab2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ab6:	fa1f f58c 	uxth.w	r5, ip
 8000aba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000abe:	0c22      	lsrs	r2, r4, #16
 8000ac0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ac4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac8:	fb01 f005 	mul.w	r0, r1, r5
 8000acc:	4290      	cmp	r0, r2
 8000ace:	d90a      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ad8:	f080 811c 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000adc:	4290      	cmp	r0, r2
 8000ade:	f240 8119 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a12      	subs	r2, r2, r0
 8000ae8:	b2a4      	uxth	r4, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000af6:	fb00 f505 	mul.w	r5, r0, r5
 8000afa:	42a5      	cmp	r5, r4
 8000afc:	d90a      	bls.n	8000b14 <__udivmoddi4+0x90>
 8000afe:	eb1c 0404 	adds.w	r4, ip, r4
 8000b02:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b06:	f080 8107 	bcs.w	8000d18 <__udivmoddi4+0x294>
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	f240 8104 	bls.w	8000d18 <__udivmoddi4+0x294>
 8000b10:	4464      	add	r4, ip
 8000b12:	3802      	subs	r0, #2
 8000b14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b18:	1b64      	subs	r4, r4, r5
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11e      	cbz	r6, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40dc      	lsrs	r4, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	e9c6 4300 	strd	r4, r3, [r6]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0xbc>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80ed 	beq.w	8000d0e <__udivmoddi4+0x28a>
 8000b34:	2100      	movs	r1, #0
 8000b36:	e9c6 0500 	strd	r0, r5, [r6]
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b40:	fab3 f183 	clz	r1, r3
 8000b44:	2900      	cmp	r1, #0
 8000b46:	d149      	bne.n	8000bdc <__udivmoddi4+0x158>
 8000b48:	42ab      	cmp	r3, r5
 8000b4a:	d302      	bcc.n	8000b52 <__udivmoddi4+0xce>
 8000b4c:	4282      	cmp	r2, r0
 8000b4e:	f200 80f8 	bhi.w	8000d42 <__udivmoddi4+0x2be>
 8000b52:	1a84      	subs	r4, r0, r2
 8000b54:	eb65 0203 	sbc.w	r2, r5, r3
 8000b58:	2001      	movs	r0, #1
 8000b5a:	4617      	mov	r7, r2
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d0e2      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	e9c6 4700 	strd	r4, r7, [r6]
 8000b64:	e7df      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b66:	b902      	cbnz	r2, 8000b6a <__udivmoddi4+0xe6>
 8000b68:	deff      	udf	#255	; 0xff
 8000b6a:	fab2 f382 	clz	r3, r2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8090 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b74:	1a8a      	subs	r2, r1, r2
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2101      	movs	r1, #1
 8000b80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b84:	fb07 2015 	mls	r0, r7, r5, r2
 8000b88:	0c22      	lsrs	r2, r4, #16
 8000b8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b8e:	fb0e f005 	mul.w	r0, lr, r5
 8000b92:	4290      	cmp	r0, r2
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b96:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2b8>
 8000ba6:	4645      	mov	r5, r8
 8000ba8:	1a12      	subs	r2, r2, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x14e>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x14c>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2c2>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bda:	e79f      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bdc:	f1c1 0720 	rsb	r7, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa05 f401 	lsl.w	r4, r5, r1
 8000bee:	fa20 f307 	lsr.w	r3, r0, r7
 8000bf2:	40fd      	lsrs	r5, r7
 8000bf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf8:	4323      	orrs	r3, r4
 8000bfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bfe:	fa1f fe8c 	uxth.w	lr, ip
 8000c02:	fb09 5518 	mls	r5, r9, r8, r5
 8000c06:	0c1c      	lsrs	r4, r3, #16
 8000c08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c10:	42a5      	cmp	r5, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	fa00 f001 	lsl.w	r0, r0, r1
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2b4>
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2b4>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4464      	add	r4, ip
 8000c34:	1b64      	subs	r4, r4, r5
 8000c36:	b29d      	uxth	r5, r3
 8000c38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2ac>
 8000c56:	45a6      	cmp	lr, r4
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2ac>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	4464      	add	r4, ip
 8000c5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c62:	fba3 9502 	umull	r9, r5, r3, r2
 8000c66:	eba4 040e 	sub.w	r4, r4, lr
 8000c6a:	42ac      	cmp	r4, r5
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46ae      	mov	lr, r5
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x29c>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x298>
 8000c74:	b156      	cbz	r6, 8000c8c <__udivmoddi4+0x208>
 8000c76:	ebb0 0208 	subs.w	r2, r0, r8
 8000c7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c82:	40ca      	lsrs	r2, r1
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	4317      	orrs	r7, r2
 8000c88:	e9c6 7400 	strd	r7, r4, [r6]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	f1c3 0120 	rsb	r1, r3, #32
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ca4:	409d      	lsls	r5, r3
 8000ca6:	432a      	orrs	r2, r5
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb8:	0c11      	lsrs	r1, r2, #16
 8000cba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000cc2:	428d      	cmp	r5, r1
 8000cc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x258>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd4:	428d      	cmp	r5, r1
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4461      	add	r1, ip
 8000cdc:	1b49      	subs	r1, r1, r5
 8000cde:	b292      	uxth	r2, r2
 8000ce0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ce4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cec:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf0:	4291      	cmp	r1, r2
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x282>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2a8>
 8000cfe:	4291      	cmp	r1, r2
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2a8>
 8000d02:	3d02      	subs	r5, #2
 8000d04:	4462      	add	r2, ip
 8000d06:	1a52      	subs	r2, r2, r1
 8000d08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0xfc>
 8000d0e:	4631      	mov	r1, r6
 8000d10:	4630      	mov	r0, r6
 8000d12:	e708      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000d14:	4639      	mov	r1, r7
 8000d16:	e6e6      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	e6fb      	b.n	8000b14 <__udivmoddi4+0x90>
 8000d1c:	4548      	cmp	r0, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2c:	4645      	mov	r5, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d30:	462b      	mov	r3, r5
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x258>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3c:	3d02      	subs	r5, #2
 8000d3e:	4462      	add	r2, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d42:	4608      	mov	r0, r1
 8000d44:	e70a      	b.n	8000b5c <__udivmoddi4+0xd8>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x14e>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d56:	f000 ff92 	bl	8001c7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5a:	f000 f95f 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5e:	f000 fbcb 	bl	80014f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d62:	f000 fb8f 	bl	8001484 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d66:	f000 fa2f 	bl	80011c8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000d6a:	f000 f9a3 	bl	80010b4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000d6e:	f000 fa75 	bl	800125c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d72:	f000 fac1 	bl	80012f8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d76:	f000 fb37 	bl	80013e8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //Read real_positionM1, set_point with DMA
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 2);
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	4993      	ldr	r1, [pc, #588]	; (8000fcc <main+0x27c>)
 8000d7e:	4894      	ldr	r0, [pc, #592]	; (8000fd0 <main+0x280>)
 8000d80:	f001 fbc8 	bl	8002514 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000d84:	4893      	ldr	r0, [pc, #588]	; (8000fd4 <main+0x284>)
 8000d86:	f004 f9e5 	bl	8005154 <HAL_TIM_Base_Start>

  //PID Control
  PID1.Kp = 1.9;
 8000d8a:	4b93      	ldr	r3, [pc, #588]	; (8000fd8 <main+0x288>)
 8000d8c:	4a93      	ldr	r2, [pc, #588]	; (8000fdc <main+0x28c>)
 8000d8e:	619a      	str	r2, [r3, #24]
  PID1.Ki = 0;
 8000d90:	4b91      	ldr	r3, [pc, #580]	; (8000fd8 <main+0x288>)
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
  PID1.Kd = 0;
 8000d98:	4b8f      	ldr	r3, [pc, #572]	; (8000fd8 <main+0x288>)
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID1, 0);
 8000da0:	2100      	movs	r1, #0
 8000da2:	488d      	ldr	r0, [pc, #564]	; (8000fd8 <main+0x288>)
 8000da4:	f007 fa22 	bl	80081ec <arm_pid_init_f32>

  //PID Control
  PID2.Kp = 0.5;
 8000da8:	4b8d      	ldr	r3, [pc, #564]	; (8000fe0 <main+0x290>)
 8000daa:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000dae:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0;
 8000db0:	4b8b      	ldr	r3, [pc, #556]	; (8000fe0 <main+0x290>)
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0;
 8000db8:	4b89      	ldr	r3, [pc, #548]	; (8000fe0 <main+0x290>)
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4887      	ldr	r0, [pc, #540]	; (8000fe0 <main+0x290>)
 8000dc4:	f007 fa12 	bl	80081ec <arm_pid_init_f32>

  //Output Compare for PWM Mode1
  HAL_TIM_Base_Start(&htim4);
 8000dc8:	4886      	ldr	r0, [pc, #536]	; (8000fe4 <main+0x294>)
 8000dca:	f004 f9c3 	bl	8005154 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4884      	ldr	r0, [pc, #528]	; (8000fe4 <main+0x294>)
 8000dd2:	f004 fb09 	bl	80053e8 <HAL_TIM_PWM_Start>
  //Output Compare for PWM Mode2
//  HAL_TIM_Base_Start(&htim8);
//  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);

  //Mode3 send UART to Matlab
  HAL_TIM_Base_Start_IT(&htim5);
 8000dd6:	4884      	ldr	r0, [pc, #528]	; (8000fe8 <main+0x298>)
 8000dd8:	f004 fa2c 	bl	8005234 <HAL_TIM_Base_Start_IT>

  // Start UART in DMA mode
  HAL_UART_Receive_DMA(&hlpuart1, get_Uart, 2);
 8000ddc:	2202      	movs	r2, #2
 8000dde:	4983      	ldr	r1, [pc, #524]	; (8000fec <main+0x29c>)
 8000de0:	4883      	ldr	r0, [pc, #524]	; (8000ff0 <main+0x2a0>)
 8000de2:	f005 fe0f 	bl	8006a04 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(mode == 1){ //motor control 12V
 8000de6:	4b83      	ldr	r3, [pc, #524]	; (8000ff4 <main+0x2a4>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d16f      	bne.n	8000ece <main+0x17e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2120      	movs	r1, #32
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df6:	f003 f8db 	bl	8003fb0 <HAL_GPIO_WritePin>
		  VfeedbackM1 = arm_pid_f32(&PID1, setpositionM1 - positionM1); //no more than 12V
 8000dfa:	4b7f      	ldr	r3, [pc, #508]	; (8000ff8 <main+0x2a8>)
 8000dfc:	ed93 7a00 	vldr	s14, [r3]
 8000e00:	4b7e      	ldr	r3, [pc, #504]	; (8000ffc <main+0x2ac>)
 8000e02:	edd3 7a00 	vldr	s15, [r3]
 8000e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e0a:	4b73      	ldr	r3, [pc, #460]	; (8000fd8 <main+0x288>)
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	ed93 7a00 	vldr	s14, [r3]
 8000e18:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000e30:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	edd3 6a02 	vldr	s13, [r3, #8]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e52:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4a64      	ldr	r2, [pc, #400]	; (8001000 <main+0x2b0>)
 8000e6e:	6013      	str	r3, [r2, #0]
		  duty_cycle = fabs(VfeedbackM1) * 100/12; //0->12V to 0->100%
 8000e70:	4b63      	ldr	r3, [pc, #396]	; (8001000 <main+0x2b0>)
 8000e72:	edd3 7a00 	vldr	s15, [r3]
 8000e76:	eef0 7ae7 	vabs.f32	s15, s15
 8000e7a:	ee17 0a90 	vmov	r0, s15
 8000e7e:	f7ff fb2f 	bl	80004e0 <__aeabi_f2d>
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	4b5f      	ldr	r3, [pc, #380]	; (8001004 <main+0x2b4>)
 8000e88:	f7ff fb82 	bl	8000590 <__aeabi_dmul>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	4b5b      	ldr	r3, [pc, #364]	; (8001008 <main+0x2b8>)
 8000e9a:	f7ff fca3 	bl	80007e4 <__aeabi_ddiv>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f7ff fd85 	bl	80009b4 <__aeabi_d2f>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4a57      	ldr	r2, [pc, #348]	; (800100c <main+0x2bc>)
 8000eae:	6013      	str	r3, [r2, #0]
		  PWM_Mode1(duty_cycle);
 8000eb0:	4b56      	ldr	r3, [pc, #344]	; (800100c <main+0x2bc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fb13 	bl	80004e0 <__aeabi_f2d>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	ec43 2b10 	vmov	d0, r2, r3
 8000ec2:	f000 fbbf 	bl	8001644 <PWM_Mode1>
		  PWM_Mode2(0);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 fbf6 	bl	80016b8 <PWM_Mode2>
 8000ecc:	e78b      	b.n	8000de6 <main+0x96>
	  }
	  else if(mode == 2){ //Fualhaber
 8000ece:	4b49      	ldr	r3, [pc, #292]	; (8000ff4 <main+0x2a4>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d16f      	bne.n	8000fb6 <main+0x266>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2120      	movs	r1, #32
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f003 f867 	bl	8003fb0 <HAL_GPIO_WritePin>
		  VfeedbackM2 = arm_pid_f32(&PID2, setpositionM1 - positionM2); //no more than 12V
 8000ee2:	4b45      	ldr	r3, [pc, #276]	; (8000ff8 <main+0x2a8>)
 8000ee4:	ed93 7a00 	vldr	s14, [r3]
 8000ee8:	4b49      	ldr	r3, [pc, #292]	; (8001010 <main+0x2c0>)
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef2:	4b3b      	ldr	r3, [pc, #236]	; (8000fe0 <main+0x290>)
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	edc7 7a01 	vstr	s15, [r7, #4]
    out = (S->A0 * in) +
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	ed93 7a00 	vldr	s14, [r3]
 8000f00:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f04:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f14:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000f18:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f3a:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	615a      	str	r2, [r3, #20]
    return (out);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	4a2f      	ldr	r2, [pc, #188]	; (8001014 <main+0x2c4>)
 8000f56:	6013      	str	r3, [r2, #0]
		  duty_cycle = fabs(VfeedbackM2) * 100/5; //0->5V to 0->100%
 8000f58:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <main+0x2c4>)
 8000f5a:	edd3 7a00 	vldr	s15, [r3]
 8000f5e:	eef0 7ae7 	vabs.f32	s15, s15
 8000f62:	ee17 0a90 	vmov	r0, s15
 8000f66:	f7ff fabb 	bl	80004e0 <__aeabi_f2d>
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <main+0x2b4>)
 8000f70:	f7ff fb0e 	bl	8000590 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <main+0x2c8>)
 8000f82:	f7ff fc2f 	bl	80007e4 <__aeabi_ddiv>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fd11 	bl	80009b4 <__aeabi_d2f>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a1d      	ldr	r2, [pc, #116]	; (800100c <main+0x2bc>)
 8000f96:	6013      	str	r3, [r2, #0]
		  PWM_Mode1(0);
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f000 fb53 	bl	8001644 <PWM_Mode1>
		  PWM_Mode2(duty_cycle);
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <main+0x2bc>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fa9c 	bl	80004e0 <__aeabi_f2d>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	ec43 2b10 	vmov	d0, r2, r3
 8000fb0:	f000 fb82 	bl	80016b8 <PWM_Mode2>
 8000fb4:	e717      	b.n	8000de6 <main+0x96>
	  }
	  else if(mode == 3){
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <main+0x2a4>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	f47f af13 	bne.w	8000de6 <main+0x96>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc6:	f003 f80b 	bl	8003fe0 <HAL_GPIO_TogglePin>
	  if(mode == 1){ //motor control 12V
 8000fca:	e70c      	b.n	8000de6 <main+0x96>
 8000fcc:	20000330 	.word	0x20000330
 8000fd0:	2000002c 	.word	0x2000002c
 8000fd4:	2000024c 	.word	0x2000024c
 8000fd8:	20000334 	.word	0x20000334
 8000fdc:	3ff33333 	.word	0x3ff33333
 8000fe0:	20000358 	.word	0x20000358
 8000fe4:	20000298 	.word	0x20000298
 8000fe8:	200002e4 	.word	0x200002e4
 8000fec:	20000394 	.word	0x20000394
 8000ff0:	200000f8 	.word	0x200000f8
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000380 	.word	0x20000380
 8000ffc:	2000037c 	.word	0x2000037c
 8001000:	20000384 	.word	0x20000384
 8001004:	40590000 	.word	0x40590000
 8001008:	40280000 	.word	0x40280000
 800100c:	20000390 	.word	0x20000390
 8001010:	2000038c 	.word	0x2000038c
 8001014:	20000388 	.word	0x20000388
 8001018:	40140000 	.word	0x40140000

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	; 0x50
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0318 	add.w	r3, r7, #24
 8001026:	2238      	movs	r2, #56	; 0x38
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f007 f914 	bl	8008258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800103e:	2000      	movs	r0, #0
 8001040:	f003 f800 	bl	8004044 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001044:	2302      	movs	r3, #2
 8001046:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104e:	2340      	movs	r3, #64	; 0x40
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001052:	2302      	movs	r3, #2
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001056:	2302      	movs	r3, #2
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800105a:	2304      	movs	r3, #4
 800105c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800105e:	2355      	movs	r3, #85	; 0x55
 8001060:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001062:	2302      	movs	r3, #2
 8001064:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001066:	2302      	movs	r3, #2
 8001068:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800106a:	2302      	movs	r3, #2
 800106c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106e:	f107 0318 	add.w	r3, r7, #24
 8001072:	4618      	mov	r0, r3
 8001074:	f003 f89a 	bl	80041ac <HAL_RCC_OscConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800107e:	f000 fb71 	bl	8001764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001086:	2303      	movs	r3, #3
 8001088:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2104      	movs	r1, #4
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fb98 	bl	80047d0 <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010a6:	f000 fb5d 	bl	8001764 <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	; 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2220      	movs	r2, #32
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f007 f8c3 	bl	8008258 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010d2:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <MX_ADC1_Init+0x108>)
 80010d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010da:	4b38      	ldr	r3, [pc, #224]	; (80011bc <MX_ADC1_Init+0x108>)
 80010dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e2:	4b36      	ldr	r3, [pc, #216]	; (80011bc <MX_ADC1_Init+0x108>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e8:	4b34      	ldr	r3, [pc, #208]	; (80011bc <MX_ADC1_Init+0x108>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010ee:	4b33      	ldr	r3, [pc, #204]	; (80011bc <MX_ADC1_Init+0x108>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010f4:	4b31      	ldr	r3, [pc, #196]	; (80011bc <MX_ADC1_Init+0x108>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fa:	4b30      	ldr	r3, [pc, #192]	; (80011bc <MX_ADC1_Init+0x108>)
 80010fc:	2204      	movs	r2, #4
 80010fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <MX_ADC1_Init+0x108>)
 8001102:	2200      	movs	r2, #0
 8001104:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001106:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <MX_ADC1_Init+0x108>)
 8001108:	2200      	movs	r2, #0
 800110a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <MX_ADC1_Init+0x108>)
 800110e:	2202      	movs	r2, #2
 8001110:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <MX_ADC1_Init+0x108>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <MX_ADC1_Init+0x108>)
 800111c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <MX_ADC1_Init+0x108>)
 8001124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001128:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <MX_ADC1_Init+0x108>)
 800112c:	2201      	movs	r2, #1
 800112e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001132:	4b22      	ldr	r3, [pc, #136]	; (80011bc <MX_ADC1_Init+0x108>)
 8001134:	2200      	movs	r2, #0
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001138:	4b20      	ldr	r3, [pc, #128]	; (80011bc <MX_ADC1_Init+0x108>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001140:	481e      	ldr	r0, [pc, #120]	; (80011bc <MX_ADC1_Init+0x108>)
 8001142:	f001 f82b 	bl	800219c <HAL_ADC_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800114c:	f000 fb0a 	bl	8001764 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	4818      	ldr	r0, [pc, #96]	; (80011bc <MX_ADC1_Init+0x108>)
 800115c:	f002 f85c 	bl	8003218 <HAL_ADCEx_MultiModeConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001166:	f000 fafd 	bl	8001764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_ADC1_Init+0x10c>)
 800116c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800116e:	2306      	movs	r3, #6
 8001170:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001176:	237f      	movs	r3, #127	; 0x7f
 8001178:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800117a:	2304      	movs	r3, #4
 800117c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	4619      	mov	r1, r3
 8001186:	480d      	ldr	r0, [pc, #52]	; (80011bc <MX_ADC1_Init+0x108>)
 8001188:	f001 fab6 	bl	80026f8 <HAL_ADC_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001192:	f000 fae7 	bl	8001764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_ADC1_Init+0x110>)
 8001198:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800119a:	230c      	movs	r3, #12
 800119c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <MX_ADC1_Init+0x108>)
 80011a4:	f001 faa8 	bl	80026f8 <HAL_ADC_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80011ae:	f000 fad9 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3730      	adds	r7, #48	; 0x30
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000002c 	.word	0x2000002c
 80011c0:	04300002 	.word	0x04300002
 80011c4:	08600004 	.word	0x08600004

080011c8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_LPUART1_UART_Init+0x8c>)
 80011ce:	4a22      	ldr	r2, [pc, #136]	; (8001258 <MX_LPUART1_UART_Init+0x90>)
 80011d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <MX_LPUART1_UART_Init+0x8c>)
 80011d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <MX_LPUART1_UART_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_LPUART1_UART_Init+0x8c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_LPUART1_UART_Init+0x8c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_LPUART1_UART_Init+0x8c>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_LPUART1_UART_Init+0x8c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_LPUART1_UART_Init+0x8c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_LPUART1_UART_Init+0x8c>)
 8001200:	2200      	movs	r2, #0
 8001202:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_LPUART1_UART_Init+0x8c>)
 8001206:	2200      	movs	r2, #0
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800120a:	4812      	ldr	r0, [pc, #72]	; (8001254 <MX_LPUART1_UART_Init+0x8c>)
 800120c:	f005 fb1c 	bl	8006848 <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001216:	f000 faa5 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800121a:	2100      	movs	r1, #0
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_LPUART1_UART_Init+0x8c>)
 800121e:	f006 ff1b 	bl	8008058 <HAL_UARTEx_SetTxFifoThreshold>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001228:	f000 fa9c 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800122c:	2100      	movs	r1, #0
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <MX_LPUART1_UART_Init+0x8c>)
 8001230:	f006 ff50 	bl	80080d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800123a:	f000 fa93 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_LPUART1_UART_Init+0x8c>)
 8001240:	f006 fed1 	bl	8007fe6 <HAL_UARTEx_DisableFifoMode>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800124a:	f000 fa8b 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200000f8 	.word	0x200000f8
 8001258:	40008000 	.word	0x40008000

0800125c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_TIM3_Init+0x94>)
 800127c:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <MX_TIM3_Init+0x98>)
 800127e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_TIM3_Init+0x94>)
 8001282:	22a9      	movs	r2, #169	; 0xa9
 8001284:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_TIM3_Init+0x94>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_TIM3_Init+0x94>)
 800128e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001292:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_TIM3_Init+0x94>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_TIM3_Init+0x94>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <MX_TIM3_Init+0x94>)
 80012a2:	f003 feff 	bl	80050a4 <HAL_TIM_Base_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012ac:	f000 fa5a 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	4619      	mov	r1, r3
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <MX_TIM3_Init+0x94>)
 80012be:	f004 fc09 	bl	8005ad4 <HAL_TIM_ConfigClockSource>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012c8:	f000 fa4c 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012cc:	2320      	movs	r3, #32
 80012ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_TIM3_Init+0x94>)
 80012da:	f005 f9d9 	bl	8006690 <HAL_TIMEx_MasterConfigSynchronization>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012e4:	f000 fa3e 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000024c 	.word	0x2000024c
 80012f4:	40000400 	.word	0x40000400

080012f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08e      	sub	sp, #56	; 0x38
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001318:	463b      	mov	r3, r7
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
 8001326:	615a      	str	r2, [r3, #20]
 8001328:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <MX_TIM4_Init+0xe8>)
 800132c:	4a2d      	ldr	r2, [pc, #180]	; (80013e4 <MX_TIM4_Init+0xec>)
 800132e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <MX_TIM4_Init+0xe8>)
 8001332:	22a9      	movs	r2, #169	; 0xa9
 8001334:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <MX_TIM4_Init+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <MX_TIM4_Init+0xe8>)
 800133e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001342:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <MX_TIM4_Init+0xe8>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134a:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <MX_TIM4_Init+0xe8>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001350:	4823      	ldr	r0, [pc, #140]	; (80013e0 <MX_TIM4_Init+0xe8>)
 8001352:	f003 fea7 	bl	80050a4 <HAL_TIM_Base_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800135c:	f000 fa02 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136a:	4619      	mov	r1, r3
 800136c:	481c      	ldr	r0, [pc, #112]	; (80013e0 <MX_TIM4_Init+0xe8>)
 800136e:	f004 fbb1 	bl	8005ad4 <HAL_TIM_ConfigClockSource>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001378:	f000 f9f4 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800137c:	4818      	ldr	r0, [pc, #96]	; (80013e0 <MX_TIM4_Init+0xe8>)
 800137e:	f003 ffd1 	bl	8005324 <HAL_TIM_PWM_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001388:	f000 f9ec 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4811      	ldr	r0, [pc, #68]	; (80013e0 <MX_TIM4_Init+0xe8>)
 800139c:	f005 f978 	bl	8006690 <HAL_TIMEx_MasterConfigSynchronization>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80013a6:	f000 f9dd 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013aa:	2360      	movs	r3, #96	; 0x60
 80013ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80013ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013bc:	463b      	mov	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	4619      	mov	r1, r3
 80013c2:	4807      	ldr	r0, [pc, #28]	; (80013e0 <MX_TIM4_Init+0xe8>)
 80013c4:	f004 fa72 	bl	80058ac <HAL_TIM_PWM_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80013ce:	f000 f9c9 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013d2:	4803      	ldr	r0, [pc, #12]	; (80013e0 <MX_TIM4_Init+0xe8>)
 80013d4:	f000 fb7c 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 80013d8:	bf00      	nop
 80013da:	3738      	adds	r7, #56	; 0x38
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000298 	.word	0x20000298
 80013e4:	40000800 	.word	0x40000800

080013e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_TIM5_Init+0x94>)
 8001408:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <MX_TIM5_Init+0x98>)
 800140a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_TIM5_Init+0x94>)
 800140e:	22a9      	movs	r2, #169	; 0xa9
 8001410:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <MX_TIM5_Init+0x94>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4999;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <MX_TIM5_Init+0x94>)
 800141a:	f241 3287 	movw	r2, #4999	; 0x1387
 800141e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <MX_TIM5_Init+0x94>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <MX_TIM5_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800142c:	4813      	ldr	r0, [pc, #76]	; (800147c <MX_TIM5_Init+0x94>)
 800142e:	f003 fe39 	bl	80050a4 <HAL_TIM_Base_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001438:	f000 f994 	bl	8001764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001440:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	4619      	mov	r1, r3
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <MX_TIM5_Init+0x94>)
 800144a:	f004 fb43 	bl	8005ad4 <HAL_TIM_ConfigClockSource>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001454:	f000 f986 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_TIM5_Init+0x94>)
 8001466:	f005 f913 	bl	8006690 <HAL_TIMEx_MasterConfigSynchronization>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001470:	f000 f978 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	3720      	adds	r7, #32
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200002e4 	.word	0x200002e4
 8001480:	40000c00 	.word	0x40000c00

08001484 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_DMA_Init+0x70>)
 800148c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148e:	4a19      	ldr	r2, [pc, #100]	; (80014f4 <MX_DMA_Init+0x70>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6493      	str	r3, [r2, #72]	; 0x48
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_DMA_Init+0x70>)
 8001498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_DMA_Init+0x70>)
 80014a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a6:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <MX_DMA_Init+0x70>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6493      	str	r3, [r2, #72]	; 0x48
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_DMA_Init+0x70>)
 80014b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	200b      	movs	r0, #11
 80014c0:	f002 f88d 	bl	80035de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014c4:	200b      	movs	r0, #11
 80014c6:	f002 f8a4 	bl	8003612 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	200c      	movs	r0, #12
 80014d0:	f002 f885 	bl	80035de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014d4:	200c      	movs	r0, #12
 80014d6:	f002 f89c 	bl	8003612 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	200d      	movs	r0, #13
 80014e0:	f002 f87d 	bl	80035de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014e4:	200d      	movs	r0, #13
 80014e6:	f002 f894 	bl	8003612 <HAL_NVIC_EnableIRQ>

}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40021000 	.word	0x40021000

080014f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <MX_GPIO_Init+0x104>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a3a      	ldr	r2, [pc, #232]	; (80015fc <MX_GPIO_Init+0x104>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b38      	ldr	r3, [pc, #224]	; (80015fc <MX_GPIO_Init+0x104>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001526:	4b35      	ldr	r3, [pc, #212]	; (80015fc <MX_GPIO_Init+0x104>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a34      	ldr	r2, [pc, #208]	; (80015fc <MX_GPIO_Init+0x104>)
 800152c:	f043 0320 	orr.w	r3, r3, #32
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b32      	ldr	r3, [pc, #200]	; (80015fc <MX_GPIO_Init+0x104>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0320 	and.w	r3, r3, #32
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <MX_GPIO_Init+0x104>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a2e      	ldr	r2, [pc, #184]	; (80015fc <MX_GPIO_Init+0x104>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <MX_GPIO_Init+0x104>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b29      	ldr	r3, [pc, #164]	; (80015fc <MX_GPIO_Init+0x104>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a28      	ldr	r2, [pc, #160]	; (80015fc <MX_GPIO_Init+0x104>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <MX_GPIO_Init+0x104>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001578:	f002 fd1a 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001582:	481f      	ldr	r0, [pc, #124]	; (8001600 <MX_GPIO_Init+0x108>)
 8001584:	f002 fd14 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800158e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4819      	ldr	r0, [pc, #100]	; (8001604 <MX_GPIO_Init+0x10c>)
 80015a0:	f002 fb84 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80015a4:	f44f 7390 	mov.w	r3, #288	; 0x120
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c0:	f002 fb74 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4808      	ldr	r0, [pc, #32]	; (8001600 <MX_GPIO_Init+0x108>)
 80015de:	f002 fb65 	bl	8003cac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2028      	movs	r0, #40	; 0x28
 80015e8:	f001 fff9 	bl	80035de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015ec:	2028      	movs	r0, #40	; 0x28
 80015ee:	f002 f810 	bl	8003612 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000
 8001600:	48000400 	.word	0x48000400
 8001604:	48000800 	.word	0x48000800

08001608 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001618:	d10c      	bne.n	8001634 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		mode += 1;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_GPIO_EXTI_Callback+0x38>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <HAL_GPIO_EXTI_Callback+0x38>)
 8001624:	701a      	strb	r2, [r3, #0]
		if(mode == 4){
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_GPIO_EXTI_Callback+0x38>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b04      	cmp	r3, #4
 800162c:	d102      	bne.n	8001634 <HAL_GPIO_EXTI_Callback+0x2c>
			mode = 1;
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <HAL_GPIO_EXTI_Callback+0x38>)
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	20000000 	.word	0x20000000

08001644 <PWM_Mode1>:

void PWM_Mode1(int dut){ //Motor Control
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	//PWM to Motor Output Compare
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, (int)((dut * 1000) / 100));
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	461a      	mov	r2, r3
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <PWM_Mode1+0x68>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	635a      	str	r2, [r3, #52]	; 0x34

	if(VfeedbackM1 >= 0){   //Motor Rotate Forward (CW) Radiant Increase
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <PWM_Mode1+0x6c>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	db0d      	blt.n	800168a <PWM_Mode1+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001678:	f002 fc9a 	bl	8003fb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001682:	480c      	ldr	r0, [pc, #48]	; (80016b4 <PWM_Mode1+0x70>)
 8001684:	f002 fc94 	bl	8003fb0 <HAL_GPIO_WritePin>
	}
	else{ //Motor Rotate Reverse Radiant decrease (CCW)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001688:	e00c      	b.n	80016a4 <PWM_Mode1+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001694:	f002 fc8c 	bl	8003fb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <PWM_Mode1+0x70>)
 80016a0:	f002 fc86 	bl	8003fb0 <HAL_GPIO_WritePin>
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000298 	.word	0x20000298
 80016b0:	20000384 	.word	0x20000384
 80016b4:	48000400 	.word	0x48000400

080016b8 <PWM_Mode2>:

void PWM_Mode2(int dut){ //Motor Control
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	}
	else{ //Motor Rotate Reverse Radiant decrease (CCW)
//		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
//		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (int)((dut * 1000) / 100));
	}
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_TIM_PeriodElapsedCallback>:
	setpositionM1 = ADCBuffer[1]*2*3.14/4095; //4095 -> rad
	positionM1 = (ADCBuffer[0] + 4095*n_round)*2*3.14/4095; //4095 -> rad //feedback from potentionmeter
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	if(htim == &htim5 && mode == 3)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a1a      	ldr	r2, [pc, #104]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d12c      	bne.n	8001736 <HAL_TIM_PeriodElapsedCallback+0x6a>
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d128      	bne.n	8001736 <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
		uint16_t pos = ADCBuffer[0]; // Your 16-bit number
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	82fb      	strh	r3, [r7, #22]
		uint16_t set_pos = ADCBuffer[1];
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80016ec:	885b      	ldrh	r3, [r3, #2]
 80016ee:	82bb      	strh	r3, [r7, #20]
		uint8_t header = 69; // ASCII value for 'E'
 80016f0:	2345      	movs	r3, #69	; 0x45
 80016f2:	74fb      	strb	r3, [r7, #19]
		uint8_t terminator = '\n'; // Newline character
 80016f4:	230a      	movs	r3, #10
 80016f6:	74bb      	strb	r3, [r7, #18]

		// Split 16-bit number into two 8-bit parts
		uint8_t highByte_pos = (pos >> 8) & 0xFF;
 80016f8:	8afb      	ldrh	r3, [r7, #22]
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	747b      	strb	r3, [r7, #17]
		uint8_t lowByte_pos = pos & 0xFF;
 8001700:	8afb      	ldrh	r3, [r7, #22]
 8001702:	743b      	strb	r3, [r7, #16]

		uint8_t highByte_setpos = (set_pos >> 8) & 0xFF;
 8001704:	8abb      	ldrh	r3, [r7, #20]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	b29b      	uxth	r3, r3
 800170a:	73fb      	strb	r3, [r7, #15]
		uint8_t lowByte_setpos = set_pos & 0xFF;
 800170c:	8abb      	ldrh	r3, [r7, #20]
 800170e:	73bb      	strb	r3, [r7, #14]


		// Prepare buffer to hold header, two 8-bit parts, and terminator
		uint8_t buffer[6];
		buffer[0] = header;
 8001710:	7cfb      	ldrb	r3, [r7, #19]
 8001712:	723b      	strb	r3, [r7, #8]
		buffer[1] = highByte_pos;
 8001714:	7c7b      	ldrb	r3, [r7, #17]
 8001716:	727b      	strb	r3, [r7, #9]
		buffer[2] = lowByte_pos;
 8001718:	7c3b      	ldrb	r3, [r7, #16]
 800171a:	72bb      	strb	r3, [r7, #10]
		buffer[3] = highByte_setpos;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	72fb      	strb	r3, [r7, #11]
		buffer[4] = lowByte_setpos;
 8001720:	7bbb      	ldrb	r3, [r7, #14]
 8001722:	733b      	strb	r3, [r7, #12]
		buffer[5] = terminator;
 8001724:	7cbb      	ldrb	r3, [r7, #18]
 8001726:	737b      	strb	r3, [r7, #13]

		// Transmit data over UART
		HAL_UART_Transmit(&hlpuart1, buffer, sizeof(buffer), 10);
 8001728:	f107 0108 	add.w	r1, r7, #8
 800172c:	230a      	movs	r3, #10
 800172e:	2206      	movs	r2, #6
 8001730:	4806      	ldr	r0, [pc, #24]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001732:	f005 f8d9 	bl	80068e8 <HAL_UART_Transmit>
//		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim1);
//		Raw_positionM2 += QEIReadRaw;
//		positionM2 = (Raw_positionM2*2*3.14)/3072;
//		__HAL_TIM_SET_COUNTER(&htim3, 0);
//	}
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200002e4 	.word	0x200002e4
 8001744:	20000000 	.word	0x20000000
 8001748:	20000330 	.word	0x20000330
 800174c:	200000f8 	.word	0x200000f8

08001750 <HAL_UART_RxCpltCallback>:
	//start UART in DMA Mode
	HAL_UART_Receive_DMA(&hlpuart1, get_Uart, 2);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
	{

	}
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800176c:	e7fe      	b.n	800176c <Error_Handler+0x8>
	...

08001770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_MspInit+0x44>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177a:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_MspInit+0x44>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6613      	str	r3, [r2, #96]	; 0x60
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_MspInit+0x44>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_MspInit+0x44>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_MspInit+0x44>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6593      	str	r3, [r2, #88]	; 0x58
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_MspInit+0x44>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017a6:	f002 fcf1 	bl	800418c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b09e      	sub	sp, #120	; 0x78
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	2254      	movs	r2, #84	; 0x54
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f006 fd3d 	bl	8008258 <memset>
  if(hadc->Instance==ADC1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017e6:	d15f      	bne.n	80018a8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80017e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80017ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80017f2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 fa05 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001804:	f7ff ffae 	bl	8001764 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001808:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_ADC_MspInit+0xf8>)
 800180a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180c:	4a28      	ldr	r2, [pc, #160]	; (80018b0 <HAL_ADC_MspInit+0xf8>)
 800180e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001814:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <HAL_ADC_MspInit+0xf8>)
 8001816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <HAL_ADC_MspInit+0xf8>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001824:	4a22      	ldr	r2, [pc, #136]	; (80018b0 <HAL_ADC_MspInit+0xf8>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182c:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_ADC_MspInit+0xf8>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001838:	2303      	movs	r3, #3
 800183a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800183c:	2303      	movs	r3, #3
 800183e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001848:	4619      	mov	r1, r3
 800184a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184e:	f002 fa2d 	bl	8003cac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_ADC_MspInit+0xfc>)
 8001854:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <HAL_ADC_MspInit+0x100>)
 8001856:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_ADC_MspInit+0xfc>)
 800185a:	2205      	movs	r2, #5
 800185c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_ADC_MspInit+0xfc>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <HAL_ADC_MspInit+0xfc>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_ADC_MspInit+0xfc>)
 800186c:	2280      	movs	r2, #128	; 0x80
 800186e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001870:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_ADC_MspInit+0xfc>)
 8001872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001876:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_ADC_MspInit+0xfc>)
 800187a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800187e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_ADC_MspInit+0xfc>)
 8001882:	2220      	movs	r2, #32
 8001884:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_ADC_MspInit+0xfc>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800188c:	4809      	ldr	r0, [pc, #36]	; (80018b4 <HAL_ADC_MspInit+0xfc>)
 800188e:	f001 fedb 	bl	8003648 <HAL_DMA_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001898:	f7ff ff64 	bl	8001764 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <HAL_ADC_MspInit+0xfc>)
 80018a0:	655a      	str	r2, [r3, #84]	; 0x54
 80018a2:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <HAL_ADC_MspInit+0xfc>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018a8:	bf00      	nop
 80018aa:	3778      	adds	r7, #120	; 0x78
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000
 80018b4:	20000098 	.word	0x20000098
 80018b8:	40020008 	.word	0x40020008

080018bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b09e      	sub	sp, #120	; 0x78
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	2254      	movs	r2, #84	; 0x54
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f006 fcbb 	bl	8008258 <memset>
  if(huart->Instance==LPUART1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a4d      	ldr	r2, [pc, #308]	; (8001a1c <HAL_UART_MspInit+0x160>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	f040 8092 	bne.w	8001a12 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018ee:	2320      	movs	r3, #32
 80018f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f6:	f107 0310 	add.w	r3, r7, #16
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 f984 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001906:	f7ff ff2d 	bl	8001764 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800190a:	4b45      	ldr	r3, [pc, #276]	; (8001a20 <HAL_UART_MspInit+0x164>)
 800190c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190e:	4a44      	ldr	r2, [pc, #272]	; (8001a20 <HAL_UART_MspInit+0x164>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001916:	4b42      	ldr	r3, [pc, #264]	; (8001a20 <HAL_UART_MspInit+0x164>)
 8001918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <HAL_UART_MspInit+0x164>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a3e      	ldr	r2, [pc, #248]	; (8001a20 <HAL_UART_MspInit+0x164>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b3c      	ldr	r3, [pc, #240]	; (8001a20 <HAL_UART_MspInit+0x164>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800193a:	230c      	movs	r3, #12
 800193c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800194a:	230c      	movs	r3, #12
 800194c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001958:	f002 f9a8 	bl	8003cac <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 800195c:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <HAL_UART_MspInit+0x168>)
 800195e:	4a32      	ldr	r2, [pc, #200]	; (8001a28 <HAL_UART_MspInit+0x16c>)
 8001960:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001962:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <HAL_UART_MspInit+0x168>)
 8001964:	2222      	movs	r2, #34	; 0x22
 8001966:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001968:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <HAL_UART_MspInit+0x168>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800196e:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_UART_MspInit+0x168>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_UART_MspInit+0x168>)
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197a:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <HAL_UART_MspInit+0x168>)
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001980:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <HAL_UART_MspInit+0x168>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001986:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_UART_MspInit+0x168>)
 8001988:	2220      	movs	r2, #32
 800198a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <HAL_UART_MspInit+0x168>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001992:	4824      	ldr	r0, [pc, #144]	; (8001a24 <HAL_UART_MspInit+0x168>)
 8001994:	f001 fe58 	bl	8003648 <HAL_DMA_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800199e:	f7ff fee1 	bl	8001764 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a1f      	ldr	r2, [pc, #124]	; (8001a24 <HAL_UART_MspInit+0x168>)
 80019a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80019aa:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <HAL_UART_MspInit+0x168>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <HAL_UART_MspInit+0x170>)
 80019b2:	4a1f      	ldr	r2, [pc, #124]	; (8001a30 <HAL_UART_MspInit+0x174>)
 80019b4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_UART_MspInit+0x170>)
 80019b8:	2223      	movs	r2, #35	; 0x23
 80019ba:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_UART_MspInit+0x170>)
 80019be:	2210      	movs	r2, #16
 80019c0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c2:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <HAL_UART_MspInit+0x170>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019c8:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <HAL_UART_MspInit+0x170>)
 80019ca:	2280      	movs	r2, #128	; 0x80
 80019cc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <HAL_UART_MspInit+0x170>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_UART_MspInit+0x170>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_UART_MspInit+0x170>)
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_UART_MspInit+0x170>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80019e6:	4811      	ldr	r0, [pc, #68]	; (8001a2c <HAL_UART_MspInit+0x170>)
 80019e8:	f001 fe2e 	bl	8003648 <HAL_DMA_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80019f2:	f7ff feb7 	bl	8001764 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <HAL_UART_MspInit+0x170>)
 80019fa:	67da      	str	r2, [r3, #124]	; 0x7c
 80019fc:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <HAL_UART_MspInit+0x170>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	205b      	movs	r0, #91	; 0x5b
 8001a08:	f001 fde9 	bl	80035de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001a0c:	205b      	movs	r0, #91	; 0x5b
 8001a0e:	f001 fe00 	bl	8003612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3778      	adds	r7, #120	; 0x78
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40008000 	.word	0x40008000
 8001a20:	40021000 	.word	0x40021000
 8001a24:	2000018c 	.word	0x2000018c
 8001a28:	4002001c 	.word	0x4002001c
 8001a2c:	200001ec 	.word	0x200001ec
 8001a30:	40020030 	.word	0x40020030

08001a34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a1f      	ldr	r2, [pc, #124]	; (8001ac0 <HAL_TIM_Base_MspInit+0x8c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d10c      	bne.n	8001a60 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a46:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <HAL_TIM_Base_MspInit+0x90>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ac4 <HAL_TIM_Base_MspInit+0x90>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6593      	str	r3, [r2, #88]	; 0x58
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_TIM_Base_MspInit+0x90>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001a5e:	e02a      	b.n	8001ab6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <HAL_TIM_Base_MspInit+0x94>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d10c      	bne.n	8001a84 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_TIM_Base_MspInit+0x90>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	4a15      	ldr	r2, [pc, #84]	; (8001ac4 <HAL_TIM_Base_MspInit+0x90>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	6593      	str	r3, [r2, #88]	; 0x58
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <HAL_TIM_Base_MspInit+0x90>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
}
 8001a82:	e018      	b.n	8001ab6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM5)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a10      	ldr	r2, [pc, #64]	; (8001acc <HAL_TIM_Base_MspInit+0x98>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d113      	bne.n	8001ab6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_TIM_Base_MspInit+0x90>)
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	4a0c      	ldr	r2, [pc, #48]	; (8001ac4 <HAL_TIM_Base_MspInit+0x90>)
 8001a94:	f043 0308 	orr.w	r3, r3, #8
 8001a98:	6593      	str	r3, [r2, #88]	; 0x58
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_TIM_Base_MspInit+0x90>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2032      	movs	r0, #50	; 0x32
 8001aac:	f001 fd97 	bl	80035de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ab0:	2032      	movs	r0, #50	; 0x32
 8001ab2:	f001 fdae 	bl	8003612 <HAL_NVIC_EnableIRQ>
}
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40000400 	.word	0x40000400
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40000800 	.word	0x40000800
 8001acc:	40000c00 	.word	0x40000c00

08001ad0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <HAL_TIM_MspPostInit+0x68>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d11d      	bne.n	8001b2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_TIM_MspPostInit+0x6c>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <HAL_TIM_MspPostInit+0x6c>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_TIM_MspPostInit+0x6c>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001b1c:	230a      	movs	r3, #10
 8001b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	4619      	mov	r1, r3
 8001b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2a:	f002 f8bf 	bl	8003cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b2e:	bf00      	nop
 8001b30:	3720      	adds	r7, #32
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40000800 	.word	0x40000800
 8001b3c:	40021000 	.word	0x40021000

08001b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b44:	e7fe      	b.n	8001b44 <NMI_Handler+0x4>

08001b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <HardFault_Handler+0x4>

08001b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <MemManage_Handler+0x4>

08001b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8c:	f000 f8ca 	bl	8001d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <DMA1_Channel1_IRQHandler+0x10>)
 8001b9a:	f001 ff38 	bl	8003a0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000098 	.word	0x20000098

08001ba8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <DMA1_Channel2_IRQHandler+0x10>)
 8001bae:	f001 ff2e 	bl	8003a0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000018c 	.word	0x2000018c

08001bbc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <DMA1_Channel3_IRQHandler+0x10>)
 8001bc2:	f001 ff24 	bl	8003a0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200001ec 	.word	0x200001ec

08001bd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001bd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bd8:	f002 fa1c 	bl	8004014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <TIM5_IRQHandler+0x10>)
 8001be6:	f003 fd11 	bl	800560c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200002e4 	.word	0x200002e4

08001bf4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <LPUART1_IRQHandler+0x10>)
 8001bfa:	f004 ff4f 	bl	8006a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200000f8 	.word	0x200000f8

08001c08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <SystemInit+0x20>)
 8001c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <SystemInit+0x20>)
 8001c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c2c:	480d      	ldr	r0, [pc, #52]	; (8001c64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c30:	f7ff ffea 	bl	8001c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c36:	490d      	ldr	r1, [pc, #52]	; (8001c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c38:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <LoopForever+0xe>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c3c:	e002      	b.n	8001c44 <LoopCopyDataInit>

08001c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c42:	3304      	adds	r3, #4

08001c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c48:	d3f9      	bcc.n	8001c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c4c:	4c0a      	ldr	r4, [pc, #40]	; (8001c78 <LoopForever+0x16>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c50:	e001      	b.n	8001c56 <LoopFillZerobss>

08001c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c54:	3204      	adds	r2, #4

08001c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c58:	d3fb      	bcc.n	8001c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f006 fb05 	bl	8008268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c5e:	f7ff f877 	bl	8000d50 <main>

08001c62 <LoopForever>:

LoopForever:
    b LoopForever
 8001c62:	e7fe      	b.n	8001c62 <LoopForever>
  ldr   r0, =_estack
 8001c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c6c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001c70:	08008318 	.word	0x08008318
  ldr r2, =_sbss
 8001c74:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c78:	2000039c 	.word	0x2000039c

08001c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <ADC1_2_IRQHandler>

08001c7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f001 fc9d 	bl	80035c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 f80e 	bl	8001cb0 <HAL_InitTick>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	71fb      	strb	r3, [r7, #7]
 8001c9e:	e001      	b.n	8001ca4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ca0:	f7ff fd66 	bl	8001770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ca4:	79fb      	ldrb	r3, [r7, #7]

}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_InitTick+0x68>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d022      	beq.n	8001d0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_InitTick+0x6c>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <HAL_InitTick+0x68>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f001 fca8 	bl	800362e <HAL_SYSTICK_Config>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10f      	bne.n	8001d04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b0f      	cmp	r3, #15
 8001ce8:	d809      	bhi.n	8001cfe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cea:	2200      	movs	r2, #0
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cf2:	f001 fc74 	bl	80035de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <HAL_InitTick+0x70>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e007      	b.n	8001d0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	e004      	b.n	8001d0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	e001      	b.n	8001d0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000000c 	.word	0x2000000c
 8001d1c:	20000004 	.word	0x20000004
 8001d20:	20000008 	.word	0x20000008

08001d24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_IncTick+0x1c>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_IncTick+0x20>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	4a03      	ldr	r2, [pc, #12]	; (8001d40 <HAL_IncTick+0x1c>)
 8001d34:	6013      	str	r3, [r2, #0]
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	20000398 	.word	0x20000398
 8001d44:	2000000c 	.word	0x2000000c

08001d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <HAL_GetTick+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000398 	.word	0x20000398

08001d60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	609a      	str	r2, [r3, #8]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3360      	adds	r3, #96	; 0x60
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <LL_ADC_SetOffset+0x44>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	4313      	orrs	r3, r2
 8001df8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e00:	bf00      	nop
 8001e02:	371c      	adds	r7, #28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	03fff000 	.word	0x03fff000

08001e10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3360      	adds	r3, #96	; 0x60
 8001e1e:	461a      	mov	r2, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3360      	adds	r3, #96	; 0x60
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	431a      	orrs	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e66:	bf00      	nop
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b087      	sub	sp, #28
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3360      	adds	r3, #96	; 0x60
 8001e82:	461a      	mov	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e9c:	bf00      	nop
 8001e9e:	371c      	adds	r7, #28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3360      	adds	r3, #96	; 0x60
 8001eb8:	461a      	mov	r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ed2:	bf00      	nop
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	615a      	str	r2, [r3, #20]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b087      	sub	sp, #28
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3330      	adds	r3, #48	; 0x30
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	4413      	add	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	211f      	movs	r1, #31
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	401a      	ands	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	0e9b      	lsrs	r3, r3, #26
 8001f62:	f003 011f 	and.w	r1, r3, #31
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f76:	bf00      	nop
 8001f78:	371c      	adds	r7, #28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b087      	sub	sp, #28
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3314      	adds	r3, #20
 8001f92:	461a      	mov	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	0e5b      	lsrs	r3, r3, #25
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	4413      	add	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	0d1b      	lsrs	r3, r3, #20
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	2107      	movs	r1, #7
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	0d1b      	lsrs	r3, r3, #20
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fcc:	bf00      	nop
 8001fce:	371c      	adds	r7, #28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0318 	and.w	r3, r3, #24
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ffc:	40d9      	lsrs	r1, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	400b      	ands	r3, r1
 8002002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002006:	431a      	orrs	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	0007ffff 	.word	0x0007ffff

08002020 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 031f 	and.w	r3, r3, #31
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800204c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6093      	str	r3, [r2, #8]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002074:	d101      	bne.n	800207a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002098:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800209c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020c4:	d101      	bne.n	80020ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020ec:	f043 0201 	orr.w	r2, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <LL_ADC_IsEnabled+0x18>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <LL_ADC_IsEnabled+0x1a>
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002136:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800213a:	f043 0204 	orr.w	r2, r3, #4
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b04      	cmp	r3, #4
 8002160:	d101      	bne.n	8002166 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b08      	cmp	r3, #8
 8002186:	d101      	bne.n	800218c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e1a9      	b.n	800250a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d109      	bne.n	80021d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff faf7 	bl	80017b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff3f 	bl	8002060 <LL_ADC_IsDeepPowerDownEnabled>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff25 	bl	800203c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ff5a 	bl	80020b0 <LL_ADC_IsInternalRegulatorEnabled>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d115      	bne.n	800222e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff3e 	bl	8002088 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800220c:	4b9c      	ldr	r3, [pc, #624]	; (8002480 <HAL_ADC_Init+0x2e4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	4a9c      	ldr	r2, [pc, #624]	; (8002484 <HAL_ADC_Init+0x2e8>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	3301      	adds	r3, #1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002220:	e002      	b.n	8002228 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3b01      	subs	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f9      	bne.n	8002222 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff3c 	bl	80020b0 <LL_ADC_IsInternalRegulatorEnabled>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10d      	bne.n	800225a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	f043 0210 	orr.w	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ff75 	bl	800214e <LL_ADC_REG_IsConversionOngoing>
 8002264:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 8142 	bne.w	80024f8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f040 813e 	bne.w	80024f8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002280:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002284:	f043 0202 	orr.w	r2, r3, #2
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff35 	bl	8002100 <LL_ADC_IsEnabled>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d141      	bne.n	8002320 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022a4:	d004      	beq.n	80022b0 <HAL_ADC_Init+0x114>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a77      	ldr	r2, [pc, #476]	; (8002488 <HAL_ADC_Init+0x2ec>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d10f      	bne.n	80022d0 <HAL_ADC_Init+0x134>
 80022b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80022b4:	f7ff ff24 	bl	8002100 <LL_ADC_IsEnabled>
 80022b8:	4604      	mov	r4, r0
 80022ba:	4873      	ldr	r0, [pc, #460]	; (8002488 <HAL_ADC_Init+0x2ec>)
 80022bc:	f7ff ff20 	bl	8002100 <LL_ADC_IsEnabled>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4323      	orrs	r3, r4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	e012      	b.n	80022f6 <HAL_ADC_Init+0x15a>
 80022d0:	486e      	ldr	r0, [pc, #440]	; (800248c <HAL_ADC_Init+0x2f0>)
 80022d2:	f7ff ff15 	bl	8002100 <LL_ADC_IsEnabled>
 80022d6:	4604      	mov	r4, r0
 80022d8:	486d      	ldr	r0, [pc, #436]	; (8002490 <HAL_ADC_Init+0x2f4>)
 80022da:	f7ff ff11 	bl	8002100 <LL_ADC_IsEnabled>
 80022de:	4603      	mov	r3, r0
 80022e0:	431c      	orrs	r4, r3
 80022e2:	486c      	ldr	r0, [pc, #432]	; (8002494 <HAL_ADC_Init+0x2f8>)
 80022e4:	f7ff ff0c 	bl	8002100 <LL_ADC_IsEnabled>
 80022e8:	4603      	mov	r3, r0
 80022ea:	4323      	orrs	r3, r4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d012      	beq.n	8002320 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002302:	d004      	beq.n	800230e <HAL_ADC_Init+0x172>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a5f      	ldr	r2, [pc, #380]	; (8002488 <HAL_ADC_Init+0x2ec>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_ADC_Init+0x176>
 800230e:	4a62      	ldr	r2, [pc, #392]	; (8002498 <HAL_ADC_Init+0x2fc>)
 8002310:	e000      	b.n	8002314 <HAL_ADC_Init+0x178>
 8002312:	4a62      	ldr	r2, [pc, #392]	; (800249c <HAL_ADC_Init+0x300>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f7ff fd20 	bl	8001d60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7f5b      	ldrb	r3, [r3, #29]
 8002324:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800232a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002330:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002336:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800233e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800234a:	2b01      	cmp	r3, #1
 800234c:	d106      	bne.n	800235c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	3b01      	subs	r3, #1
 8002354:	045b      	lsls	r3, r3, #17
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d009      	beq.n	8002378 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	4b48      	ldr	r3, [pc, #288]	; (80024a0 <HAL_ADC_Init+0x304>)
 8002380:	4013      	ands	r3, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	69b9      	ldr	r1, [r7, #24]
 8002388:	430b      	orrs	r3, r1
 800238a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fee4 	bl	8002174 <LL_ADC_INJ_IsConversionOngoing>
 80023ac:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d17f      	bne.n	80024b4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d17c      	bne.n	80024b4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023be:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023c6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023d6:	f023 0302 	bic.w	r3, r3, #2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	69b9      	ldr	r1, [r7, #24]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d017      	beq.n	800241c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002404:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6911      	ldr	r1, [r2, #16]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	430b      	orrs	r3, r1
 8002416:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800241a:	e013      	b.n	8002444 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800242a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800243c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002440:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800244a:	2b01      	cmp	r3, #1
 800244c:	d12a      	bne.n	80024a4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002464:	4311      	orrs	r1, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800246a:	4311      	orrs	r1, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002470:	430a      	orrs	r2, r1
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0201 	orr.w	r2, r2, #1
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	e019      	b.n	80024b4 <HAL_ADC_Init+0x318>
 8002480:	20000004 	.word	0x20000004
 8002484:	053e2d63 	.word	0x053e2d63
 8002488:	50000100 	.word	0x50000100
 800248c:	50000400 	.word	0x50000400
 8002490:	50000500 	.word	0x50000500
 8002494:	50000600 	.word	0x50000600
 8002498:	50000300 	.word	0x50000300
 800249c:	50000700 	.word	0x50000700
 80024a0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d10c      	bne.n	80024d6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f023 010f 	bic.w	r1, r3, #15
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	1e5a      	subs	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
 80024d4:	e007      	b.n	80024e6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 020f 	bic.w	r2, r2, #15
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	f023 0303 	bic.w	r3, r3, #3
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80024f6:	e007      	b.n	8002508 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fc:	f043 0210 	orr.w	r2, r3, #16
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002508:	7ffb      	ldrb	r3, [r7, #31]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3724      	adds	r7, #36	; 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd90      	pop	{r4, r7, pc}
 8002512:	bf00      	nop

08002514 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002528:	d004      	beq.n	8002534 <HAL_ADC_Start_DMA+0x20>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a5a      	ldr	r2, [pc, #360]	; (8002698 <HAL_ADC_Start_DMA+0x184>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_ADC_Start_DMA+0x24>
 8002534:	4b59      	ldr	r3, [pc, #356]	; (800269c <HAL_ADC_Start_DMA+0x188>)
 8002536:	e000      	b.n	800253a <HAL_ADC_Start_DMA+0x26>
 8002538:	4b59      	ldr	r3, [pc, #356]	; (80026a0 <HAL_ADC_Start_DMA+0x18c>)
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fd70 	bl	8002020 <LL_ADC_GetMultimode>
 8002540:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fe01 	bl	800214e <LL_ADC_REG_IsConversionOngoing>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 809b 	bne.w	800268a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_ADC_Start_DMA+0x4e>
 800255e:	2302      	movs	r3, #2
 8002560:	e096      	b.n	8002690 <HAL_ADC_Start_DMA+0x17c>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a4d      	ldr	r2, [pc, #308]	; (80026a4 <HAL_ADC_Start_DMA+0x190>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d008      	beq.n	8002586 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	2b05      	cmp	r3, #5
 800257e:	d002      	beq.n	8002586 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b09      	cmp	r3, #9
 8002584:	d17a      	bne.n	800267c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fcf6 	bl	8002f78 <ADC_Enable>
 800258c:	4603      	mov	r3, r0
 800258e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d16d      	bne.n	8002672 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800259e:	f023 0301 	bic.w	r3, r3, #1
 80025a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a3a      	ldr	r2, [pc, #232]	; (8002698 <HAL_ADC_Start_DMA+0x184>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d009      	beq.n	80025c8 <HAL_ADC_Start_DMA+0xb4>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a3b      	ldr	r2, [pc, #236]	; (80026a8 <HAL_ADC_Start_DMA+0x194>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d002      	beq.n	80025c4 <HAL_ADC_Start_DMA+0xb0>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	e003      	b.n	80025cc <HAL_ADC_Start_DMA+0xb8>
 80025c4:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_ADC_Start_DMA+0x198>)
 80025c6:	e001      	b.n	80025cc <HAL_ADC_Start_DMA+0xb8>
 80025c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d002      	beq.n	80025da <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f6:	f023 0206 	bic.w	r2, r3, #6
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	661a      	str	r2, [r3, #96]	; 0x60
 80025fe:	e002      	b.n	8002606 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	4a29      	ldr	r2, [pc, #164]	; (80026b0 <HAL_ADC_Start_DMA+0x19c>)
 800260c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002612:	4a28      	ldr	r2, [pc, #160]	; (80026b4 <HAL_ADC_Start_DMA+0x1a0>)
 8002614:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	4a27      	ldr	r2, [pc, #156]	; (80026b8 <HAL_ADC_Start_DMA+0x1a4>)
 800261c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	221c      	movs	r2, #28
 8002624:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0210 	orr.w	r2, r2, #16
 800263c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0201 	orr.w	r2, r2, #1
 800264c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3340      	adds	r3, #64	; 0x40
 8002658:	4619      	mov	r1, r3
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f001 f89b 	bl	8003798 <HAL_DMA_Start_IT>
 8002662:	4603      	mov	r3, r0
 8002664:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fd5b 	bl	8002126 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002670:	e00d      	b.n	800268e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800267a:	e008      	b.n	800268e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002688:	e001      	b.n	800268e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800268a:	2302      	movs	r3, #2
 800268c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800268e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	50000100 	.word	0x50000100
 800269c:	50000300 	.word	0x50000300
 80026a0:	50000700 	.word	0x50000700
 80026a4:	50000600 	.word	0x50000600
 80026a8:	50000500 	.word	0x50000500
 80026ac:	50000400 	.word	0x50000400
 80026b0:	080030a5 	.word	0x080030a5
 80026b4:	0800317d 	.word	0x0800317d
 80026b8:	08003199 	.word	0x08003199

080026bc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b0b6      	sub	sp, #216	; 0xd8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002712:	2b01      	cmp	r3, #1
 8002714:	d102      	bne.n	800271c <HAL_ADC_ConfigChannel+0x24>
 8002716:	2302      	movs	r3, #2
 8002718:	f000 bc13 	b.w	8002f42 <HAL_ADC_ConfigChannel+0x84a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fd10 	bl	800214e <LL_ADC_REG_IsConversionOngoing>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	f040 83f3 	bne.w	8002f1c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6859      	ldr	r1, [r3, #4]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	f7ff fbf1 	bl	8001f2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fcfe 	bl	800214e <LL_ADC_REG_IsConversionOngoing>
 8002752:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fd0a 	bl	8002174 <LL_ADC_INJ_IsConversionOngoing>
 8002760:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002764:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 81d9 	bne.w	8002b20 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800276e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002772:	2b00      	cmp	r3, #0
 8002774:	f040 81d4 	bne.w	8002b20 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002780:	d10f      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2200      	movs	r2, #0
 800278c:	4619      	mov	r1, r3
 800278e:	f7ff fbf8 	bl	8001f82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fb9f 	bl	8001ede <LL_ADC_SetSamplingTimeCommonConfig>
 80027a0:	e00e      	b.n	80027c0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6819      	ldr	r1, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f7ff fbe7 	bl	8001f82 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fb8f 	bl	8001ede <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	08db      	lsrs	r3, r3, #3
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d022      	beq.n	8002828 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6919      	ldr	r1, [r3, #16]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027f2:	f7ff fae9 	bl	8001dc8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6919      	ldr	r1, [r3, #16]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	461a      	mov	r2, r3
 8002804:	f7ff fb35 	bl	8001e72 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002814:	2b01      	cmp	r3, #1
 8002816:	d102      	bne.n	800281e <HAL_ADC_ConfigChannel+0x126>
 8002818:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800281c:	e000      	b.n	8002820 <HAL_ADC_ConfigChannel+0x128>
 800281e:	2300      	movs	r3, #0
 8002820:	461a      	mov	r2, r3
 8002822:	f7ff fb41 	bl	8001ea8 <LL_ADC_SetOffsetSaturation>
 8002826:	e17b      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff faee 	bl	8001e10 <LL_ADC_GetOffsetChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10a      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x15c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fae3 	bl	8001e10 <LL_ADC_GetOffsetChannel>
 800284a:	4603      	mov	r3, r0
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	f003 021f 	and.w	r2, r3, #31
 8002852:	e01e      	b.n	8002892 <HAL_ADC_ConfigChannel+0x19a>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fad8 	bl	8001e10 <LL_ADC_GetOffsetChannel>
 8002860:	4603      	mov	r3, r0
 8002862:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002876:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800287a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002882:	2320      	movs	r3, #32
 8002884:	e004      	b.n	8002890 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002886:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289a:	2b00      	cmp	r3, #0
 800289c:	d105      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x1b2>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	0e9b      	lsrs	r3, r3, #26
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	e018      	b.n	80028dc <HAL_ADC_ConfigChannel+0x1e4>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80028be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80028ce:	2320      	movs	r3, #32
 80028d0:	e004      	b.n	80028dc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80028d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028dc:	429a      	cmp	r2, r3
 80028de:	d106      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2200      	movs	r2, #0
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff faa7 	bl	8001e3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2101      	movs	r1, #1
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fa8b 	bl	8001e10 <LL_ADC_GetOffsetChannel>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10a      	bne.n	800291a <HAL_ADC_ConfigChannel+0x222>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2101      	movs	r1, #1
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fa80 	bl	8001e10 <LL_ADC_GetOffsetChannel>
 8002910:	4603      	mov	r3, r0
 8002912:	0e9b      	lsrs	r3, r3, #26
 8002914:	f003 021f 	and.w	r2, r3, #31
 8002918:	e01e      	b.n	8002958 <HAL_ADC_ConfigChannel+0x260>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2101      	movs	r1, #1
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fa75 	bl	8001e10 <LL_ADC_GetOffsetChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002930:	fa93 f3a3 	rbit	r3, r3
 8002934:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002938:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800293c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002940:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002948:	2320      	movs	r3, #32
 800294a:	e004      	b.n	8002956 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800294c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	2b00      	cmp	r3, #0
 8002962:	d105      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x278>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	e018      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x2aa>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002984:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800298c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002994:	2320      	movs	r3, #32
 8002996:	e004      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d106      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2200      	movs	r2, #0
 80029ac:	2101      	movs	r1, #1
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fa44 	bl	8001e3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2102      	movs	r1, #2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fa28 	bl	8001e10 <LL_ADC_GetOffsetChannel>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10a      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x2e8>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2102      	movs	r1, #2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fa1d 	bl	8001e10 <LL_ADC_GetOffsetChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	0e9b      	lsrs	r3, r3, #26
 80029da:	f003 021f 	and.w	r2, r3, #31
 80029de:	e01e      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x326>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2102      	movs	r1, #2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fa12 	bl	8001e10 <LL_ADC_GetOffsetChannel>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80029fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002a0e:	2320      	movs	r3, #32
 8002a10:	e004      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002a12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d105      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x33e>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	0e9b      	lsrs	r3, r3, #26
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	e016      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x36c>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002a56:	2320      	movs	r3, #32
 8002a58:	e004      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002a5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d106      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2102      	movs	r1, #2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff f9e3 	bl	8001e3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2103      	movs	r1, #3
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff f9c7 	bl	8001e10 <LL_ADC_GetOffsetChannel>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10a      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x3aa>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2103      	movs	r1, #3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff f9bc 	bl	8001e10 <LL_ADC_GetOffsetChannel>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	0e9b      	lsrs	r3, r3, #26
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	e017      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x3da>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2103      	movs	r1, #3
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff f9b1 	bl	8001e10 <LL_ADC_GetOffsetChannel>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002abc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002ac4:	2320      	movs	r3, #32
 8002ac6:	e003      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d105      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x3f2>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0e9b      	lsrs	r3, r3, #26
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	e011      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x416>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002afa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002b02:	2320      	movs	r3, #32
 8002b04:	e003      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b08:	fab3 f383 	clz	r3, r3
 8002b0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d106      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2200      	movs	r2, #0
 8002b18:	2103      	movs	r1, #3
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff f98e 	bl	8001e3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff faeb 	bl	8002100 <LL_ADC_IsEnabled>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f040 813d 	bne.w	8002dac <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f7ff fa4a 	bl	8001fd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4aa2      	ldr	r2, [pc, #648]	; (8002dd4 <HAL_ADC_ConfigChannel+0x6dc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	f040 812e 	bne.w	8002dac <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10b      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x480>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	0e9b      	lsrs	r3, r3, #26
 8002b66:	3301      	adds	r3, #1
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	2b09      	cmp	r3, #9
 8002b6e:	bf94      	ite	ls
 8002b70:	2301      	movls	r3, #1
 8002b72:	2300      	movhi	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	e019      	b.n	8002bac <HAL_ADC_ConfigChannel+0x4b4>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b88:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002b90:	2320      	movs	r3, #32
 8002b92:	e003      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2b09      	cmp	r3, #9
 8002ba4:	bf94      	ite	ls
 8002ba6:	2301      	movls	r3, #1
 8002ba8:	2300      	movhi	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d079      	beq.n	8002ca4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d107      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x4d4>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	069b      	lsls	r3, r3, #26
 8002bc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bca:	e015      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x500>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bdc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002be4:	2320      	movs	r3, #32
 8002be6:	e003      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	069b      	lsls	r3, r3, #26
 8002bf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x520>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	e017      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x550>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	e003      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	2101      	movs	r1, #1
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	ea42 0103 	orr.w	r1, r2, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x576>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	051b      	lsls	r3, r3, #20
 8002c6c:	e018      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x5a8>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002c86:	2320      	movs	r3, #32
 8002c88:	e003      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	3301      	adds	r3, #1
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	e07e      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d107      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x5c8>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0e9b      	lsrs	r3, r3, #26
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	069b      	lsls	r3, r3, #26
 8002cba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cbe:	e015      	b.n	8002cec <HAL_ADC_ConfigChannel+0x5f4>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	e003      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	069b      	lsls	r3, r3, #26
 8002ce8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d109      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x614>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	0e9b      	lsrs	r3, r3, #26
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	2101      	movs	r1, #1
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	e017      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x644>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	61fb      	str	r3, [r7, #28]
  return result;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002d24:	2320      	movs	r3, #32
 8002d26:	e003      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	3301      	adds	r3, #1
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2101      	movs	r1, #1
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	ea42 0103 	orr.w	r1, r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10d      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x670>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	0e9b      	lsrs	r3, r3, #26
 8002d52:	3301      	adds	r3, #1
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3b1e      	subs	r3, #30
 8002d60:	051b      	lsls	r3, r3, #20
 8002d62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d66:	e01b      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x6a8>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	613b      	str	r3, [r7, #16]
  return result;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002d80:	2320      	movs	r3, #32
 8002d82:	e003      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f003 021f 	and.w	r2, r3, #31
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	3b1e      	subs	r3, #30
 8002d9a:	051b      	lsls	r3, r3, #20
 8002d9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002da0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002da6:	4619      	mov	r1, r3
 8002da8:	f7ff f8eb 	bl	8001f82 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_ADC_ConfigChannel+0x6e0>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80be 	beq.w	8002f36 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc2:	d004      	beq.n	8002dce <HAL_ADC_ConfigChannel+0x6d6>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <HAL_ADC_ConfigChannel+0x6e4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d10a      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x6ec>
 8002dce:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <HAL_ADC_ConfigChannel+0x6e8>)
 8002dd0:	e009      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x6ee>
 8002dd2:	bf00      	nop
 8002dd4:	407f0000 	.word	0x407f0000
 8002dd8:	80080000 	.word	0x80080000
 8002ddc:	50000100 	.word	0x50000100
 8002de0:	50000300 	.word	0x50000300
 8002de4:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <HAL_ADC_ConfigChannel+0x854>)
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe ffe0 	bl	8001dac <LL_ADC_GetCommonPathInternalCh>
 8002dec:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a56      	ldr	r2, [pc, #344]	; (8002f50 <HAL_ADC_ConfigChannel+0x858>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x70c>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a55      	ldr	r2, [pc, #340]	; (8002f54 <HAL_ADC_ConfigChannel+0x85c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d13a      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d134      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e18:	d005      	beq.n	8002e26 <HAL_ADC_ConfigChannel+0x72e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a4e      	ldr	r2, [pc, #312]	; (8002f58 <HAL_ADC_ConfigChannel+0x860>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	f040 8085 	bne.w	8002f30 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e2e:	d004      	beq.n	8002e3a <HAL_ADC_ConfigChannel+0x742>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a49      	ldr	r2, [pc, #292]	; (8002f5c <HAL_ADC_ConfigChannel+0x864>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x746>
 8002e3a:	4a49      	ldr	r2, [pc, #292]	; (8002f60 <HAL_ADC_ConfigChannel+0x868>)
 8002e3c:	e000      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x748>
 8002e3e:	4a43      	ldr	r2, [pc, #268]	; (8002f4c <HAL_ADC_ConfigChannel+0x854>)
 8002e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	f7fe ff9b 	bl	8001d86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e50:	4b44      	ldr	r3, [pc, #272]	; (8002f64 <HAL_ADC_ConfigChannel+0x86c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	4a44      	ldr	r2, [pc, #272]	; (8002f68 <HAL_ADC_ConfigChannel+0x870>)
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	4613      	mov	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e6a:	e002      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f9      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e78:	e05a      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a3b      	ldr	r2, [pc, #236]	; (8002f6c <HAL_ADC_ConfigChannel+0x874>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d125      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d11f      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a31      	ldr	r2, [pc, #196]	; (8002f5c <HAL_ADC_ConfigChannel+0x864>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d104      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x7ac>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a34      	ldr	r2, [pc, #208]	; (8002f70 <HAL_ADC_ConfigChannel+0x878>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d047      	beq.n	8002f34 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eac:	d004      	beq.n	8002eb8 <HAL_ADC_ConfigChannel+0x7c0>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a2a      	ldr	r2, [pc, #168]	; (8002f5c <HAL_ADC_ConfigChannel+0x864>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x7c4>
 8002eb8:	4a29      	ldr	r2, [pc, #164]	; (8002f60 <HAL_ADC_ConfigChannel+0x868>)
 8002eba:	e000      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x7c6>
 8002ebc:	4a23      	ldr	r2, [pc, #140]	; (8002f4c <HAL_ADC_ConfigChannel+0x854>)
 8002ebe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4610      	mov	r0, r2
 8002eca:	f7fe ff5c 	bl	8001d86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ece:	e031      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a27      	ldr	r2, [pc, #156]	; (8002f74 <HAL_ADC_ConfigChannel+0x87c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d12d      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002eda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d127      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1c      	ldr	r2, [pc, #112]	; (8002f5c <HAL_ADC_ConfigChannel+0x864>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d022      	beq.n	8002f36 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ef8:	d004      	beq.n	8002f04 <HAL_ADC_ConfigChannel+0x80c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <HAL_ADC_ConfigChannel+0x864>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x810>
 8002f04:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <HAL_ADC_ConfigChannel+0x868>)
 8002f06:	e000      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x812>
 8002f08:	4a10      	ldr	r2, [pc, #64]	; (8002f4c <HAL_ADC_ConfigChannel+0x854>)
 8002f0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f12:	4619      	mov	r1, r3
 8002f14:	4610      	mov	r0, r2
 8002f16:	f7fe ff36 	bl	8001d86 <LL_ADC_SetCommonPathInternalCh>
 8002f1a:	e00c      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f20:	f043 0220 	orr.w	r2, r3, #32
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002f2e:	e002      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f30:	bf00      	nop
 8002f32:	e000      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	37d8      	adds	r7, #216	; 0xd8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	50000700 	.word	0x50000700
 8002f50:	c3210000 	.word	0xc3210000
 8002f54:	90c00010 	.word	0x90c00010
 8002f58:	50000600 	.word	0x50000600
 8002f5c:	50000100 	.word	0x50000100
 8002f60:	50000300 	.word	0x50000300
 8002f64:	20000004 	.word	0x20000004
 8002f68:	053e2d63 	.word	0x053e2d63
 8002f6c:	c7520000 	.word	0xc7520000
 8002f70:	50000500 	.word	0x50000500
 8002f74:	cb840000 	.word	0xcb840000

08002f78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff f8b9 	bl	8002100 <LL_ADC_IsEnabled>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d176      	bne.n	8003082 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	4b3c      	ldr	r3, [pc, #240]	; (800308c <ADC_Enable+0x114>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00d      	beq.n	8002fbe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa6:	f043 0210 	orr.w	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb2:	f043 0201 	orr.w	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e062      	b.n	8003084 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff f888 	bl	80020d8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd0:	d004      	beq.n	8002fdc <ADC_Enable+0x64>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2e      	ldr	r2, [pc, #184]	; (8003090 <ADC_Enable+0x118>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d101      	bne.n	8002fe0 <ADC_Enable+0x68>
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <ADC_Enable+0x11c>)
 8002fde:	e000      	b.n	8002fe2 <ADC_Enable+0x6a>
 8002fe0:	4b2d      	ldr	r3, [pc, #180]	; (8003098 <ADC_Enable+0x120>)
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fee2 	bl	8001dac <LL_ADC_GetCommonPathInternalCh>
 8002fe8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d013      	beq.n	800301a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff2:	4b2a      	ldr	r3, [pc, #168]	; (800309c <ADC_Enable+0x124>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	099b      	lsrs	r3, r3, #6
 8002ff8:	4a29      	ldr	r2, [pc, #164]	; (80030a0 <ADC_Enable+0x128>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800300c:	e002      	b.n	8003014 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	3b01      	subs	r3, #1
 8003012:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f9      	bne.n	800300e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800301a:	f7fe fe95 	bl	8001d48 <HAL_GetTick>
 800301e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003020:	e028      	b.n	8003074 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff f86a 	bl	8002100 <LL_ADC_IsEnabled>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d104      	bne.n	800303c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff f84e 	bl	80020d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800303c:	f7fe fe84 	bl	8001d48 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d914      	bls.n	8003074 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d00d      	beq.n	8003074 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305c:	f043 0210 	orr.w	r2, r3, #16
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003068:	f043 0201 	orr.w	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e007      	b.n	8003084 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b01      	cmp	r3, #1
 8003080:	d1cf      	bne.n	8003022 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	8000003f 	.word	0x8000003f
 8003090:	50000100 	.word	0x50000100
 8003094:	50000300 	.word	0x50000300
 8003098:	50000700 	.word	0x50000700
 800309c:	20000004 	.word	0x20000004
 80030a0:	053e2d63 	.word	0x053e2d63

080030a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d14b      	bne.n	8003156 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d021      	beq.n	800311c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe ff11 	bl	8001f04 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d032      	beq.n	800314e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d12b      	bne.n	800314e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11f      	bne.n	800314e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	65da      	str	r2, [r3, #92]	; 0x5c
 800311a:	e018      	b.n	800314e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d111      	bne.n	800314e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d105      	bne.n	800314e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003146:	f043 0201 	orr.w	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff fab4 	bl	80026bc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003154:	e00e      	b.n	8003174 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7ff fabe 	bl	80026e4 <HAL_ADC_ErrorCallback>
}
 8003168:	e004      	b.n	8003174 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4798      	blx	r3
}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f7ff faa0 	bl	80026d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b6:	f043 0204 	orr.w	r2, r3, #4
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff fa90 	bl	80026e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <LL_ADC_IsEnabled>:
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <LL_ADC_IsEnabled+0x18>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <LL_ADC_IsEnabled+0x1a>
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b04      	cmp	r3, #4
 8003204:	d101      	bne.n	800320a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b0a1      	sub	sp, #132	; 0x84
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003232:	2302      	movs	r3, #2
 8003234:	e0e7      	b.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800323e:	2300      	movs	r3, #0
 8003240:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003242:	2300      	movs	r3, #0
 8003244:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800324e:	d102      	bne.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003250:	4b6f      	ldr	r3, [pc, #444]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	e009      	b.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a6e      	ldr	r2, [pc, #440]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d102      	bne.n	8003266 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003260:	4b6d      	ldr	r3, [pc, #436]	; (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	e001      	b.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003274:	f043 0220 	orr.w	r2, r3, #32
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0be      	b.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ffb1 	bl	80031f2 <LL_ADC_REG_IsConversionOngoing>
 8003290:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ffab 	bl	80031f2 <LL_ADC_REG_IsConversionOngoing>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 80a0 	bne.w	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80032a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 809c 	bne.w	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032b4:	d004      	beq.n	80032c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a55      	ldr	r2, [pc, #340]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80032c0:	4b56      	ldr	r3, [pc, #344]	; (800341c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80032c2:	e000      	b.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80032c4:	4b56      	ldr	r3, [pc, #344]	; (8003420 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80032c6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d04b      	beq.n	8003368 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032e2:	035b      	lsls	r3, r3, #13
 80032e4:	430b      	orrs	r3, r1
 80032e6:	431a      	orrs	r2, r3
 80032e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032f4:	d004      	beq.n	8003300 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a45      	ldr	r2, [pc, #276]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d10f      	bne.n	8003320 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003300:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003304:	f7ff ff62 	bl	80031cc <LL_ADC_IsEnabled>
 8003308:	4604      	mov	r4, r0
 800330a:	4841      	ldr	r0, [pc, #260]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800330c:	f7ff ff5e 	bl	80031cc <LL_ADC_IsEnabled>
 8003310:	4603      	mov	r3, r0
 8003312:	4323      	orrs	r3, r4
 8003314:	2b00      	cmp	r3, #0
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e012      	b.n	8003346 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003320:	483c      	ldr	r0, [pc, #240]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003322:	f7ff ff53 	bl	80031cc <LL_ADC_IsEnabled>
 8003326:	4604      	mov	r4, r0
 8003328:	483b      	ldr	r0, [pc, #236]	; (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800332a:	f7ff ff4f 	bl	80031cc <LL_ADC_IsEnabled>
 800332e:	4603      	mov	r3, r0
 8003330:	431c      	orrs	r4, r3
 8003332:	483c      	ldr	r0, [pc, #240]	; (8003424 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003334:	f7ff ff4a 	bl	80031cc <LL_ADC_IsEnabled>
 8003338:	4603      	mov	r3, r0
 800333a:	4323      	orrs	r3, r4
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf0c      	ite	eq
 8003340:	2301      	moveq	r3, #1
 8003342:	2300      	movne	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d056      	beq.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800334a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003352:	f023 030f 	bic.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	6811      	ldr	r1, [r2, #0]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	6892      	ldr	r2, [r2, #8]
 800335e:	430a      	orrs	r2, r1
 8003360:	431a      	orrs	r2, r3
 8003362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003364:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003366:	e047      	b.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003372:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800337c:	d004      	beq.n	8003388 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a23      	ldr	r2, [pc, #140]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d10f      	bne.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003388:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800338c:	f7ff ff1e 	bl	80031cc <LL_ADC_IsEnabled>
 8003390:	4604      	mov	r4, r0
 8003392:	481f      	ldr	r0, [pc, #124]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003394:	f7ff ff1a 	bl	80031cc <LL_ADC_IsEnabled>
 8003398:	4603      	mov	r3, r0
 800339a:	4323      	orrs	r3, r4
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	e012      	b.n	80033ce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80033a8:	481a      	ldr	r0, [pc, #104]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033aa:	f7ff ff0f 	bl	80031cc <LL_ADC_IsEnabled>
 80033ae:	4604      	mov	r4, r0
 80033b0:	4819      	ldr	r0, [pc, #100]	; (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033b2:	f7ff ff0b 	bl	80031cc <LL_ADC_IsEnabled>
 80033b6:	4603      	mov	r3, r0
 80033b8:	431c      	orrs	r4, r3
 80033ba:	481a      	ldr	r0, [pc, #104]	; (8003424 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80033bc:	f7ff ff06 	bl	80031cc <LL_ADC_IsEnabled>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4323      	orrs	r3, r4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d012      	beq.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033da:	f023 030f 	bic.w	r3, r3, #15
 80033de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033e0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033e2:	e009      	b.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80033f6:	e000      	b.n	80033fa <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003402:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003406:	4618      	mov	r0, r3
 8003408:	3784      	adds	r7, #132	; 0x84
 800340a:	46bd      	mov	sp, r7
 800340c:	bd90      	pop	{r4, r7, pc}
 800340e:	bf00      	nop
 8003410:	50000100 	.word	0x50000100
 8003414:	50000400 	.word	0x50000400
 8003418:	50000500 	.word	0x50000500
 800341c:	50000300 	.word	0x50000300
 8003420:	50000700 	.word	0x50000700
 8003424:	50000600 	.word	0x50000600

08003428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <__NVIC_SetPriorityGrouping+0x44>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003444:	4013      	ands	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800345a:	4a04      	ldr	r2, [pc, #16]	; (800346c <__NVIC_SetPriorityGrouping+0x44>)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	60d3      	str	r3, [r2, #12]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000ed00 	.word	0xe000ed00

08003470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <__NVIC_GetPriorityGrouping+0x18>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	f003 0307 	and.w	r3, r3, #7
}
 800347e:	4618      	mov	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	2b00      	cmp	r3, #0
 800349c:	db0b      	blt.n	80034b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	f003 021f 	and.w	r2, r3, #31
 80034a4:	4907      	ldr	r1, [pc, #28]	; (80034c4 <__NVIC_EnableIRQ+0x38>)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	2001      	movs	r0, #1
 80034ae:	fa00 f202 	lsl.w	r2, r0, r2
 80034b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	e000e100 	.word	0xe000e100

080034c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	6039      	str	r1, [r7, #0]
 80034d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	db0a      	blt.n	80034f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	490c      	ldr	r1, [pc, #48]	; (8003514 <__NVIC_SetPriority+0x4c>)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	0112      	lsls	r2, r2, #4
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	440b      	add	r3, r1
 80034ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034f0:	e00a      	b.n	8003508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	4908      	ldr	r1, [pc, #32]	; (8003518 <__NVIC_SetPriority+0x50>)
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	3b04      	subs	r3, #4
 8003500:	0112      	lsls	r2, r2, #4
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	440b      	add	r3, r1
 8003506:	761a      	strb	r2, [r3, #24]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	e000e100 	.word	0xe000e100
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800351c:	b480      	push	{r7}
 800351e:	b089      	sub	sp, #36	; 0x24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f1c3 0307 	rsb	r3, r3, #7
 8003536:	2b04      	cmp	r3, #4
 8003538:	bf28      	it	cs
 800353a:	2304      	movcs	r3, #4
 800353c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3304      	adds	r3, #4
 8003542:	2b06      	cmp	r3, #6
 8003544:	d902      	bls.n	800354c <NVIC_EncodePriority+0x30>
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	3b03      	subs	r3, #3
 800354a:	e000      	b.n	800354e <NVIC_EncodePriority+0x32>
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43da      	mvns	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	401a      	ands	r2, r3
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	43d9      	mvns	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003574:	4313      	orrs	r3, r2
         );
}
 8003576:	4618      	mov	r0, r3
 8003578:	3724      	adds	r7, #36	; 0x24
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3b01      	subs	r3, #1
 8003590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003594:	d301      	bcc.n	800359a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003596:	2301      	movs	r3, #1
 8003598:	e00f      	b.n	80035ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <SysTick_Config+0x40>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3b01      	subs	r3, #1
 80035a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035a2:	210f      	movs	r1, #15
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035a8:	f7ff ff8e 	bl	80034c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <SysTick_Config+0x40>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035b2:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <SysTick_Config+0x40>)
 80035b4:	2207      	movs	r2, #7
 80035b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	e000e010 	.word	0xe000e010

080035c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff ff29 	bl	8003428 <__NVIC_SetPriorityGrouping>
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b086      	sub	sp, #24
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	4603      	mov	r3, r0
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035ec:	f7ff ff40 	bl	8003470 <__NVIC_GetPriorityGrouping>
 80035f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	6978      	ldr	r0, [r7, #20]
 80035f8:	f7ff ff90 	bl	800351c <NVIC_EncodePriority>
 80035fc:	4602      	mov	r2, r0
 80035fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff ff5f 	bl	80034c8 <__NVIC_SetPriority>
}
 800360a:	bf00      	nop
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	4603      	mov	r3, r0
 800361a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800361c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff ff33 	bl	800348c <__NVIC_EnableIRQ>
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ffa4 	bl	8003584 <SysTick_Config>
 800363c:	4603      	mov	r3, r0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e08d      	b.n	8003776 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	4b47      	ldr	r3, [pc, #284]	; (8003780 <HAL_DMA_Init+0x138>)
 8003662:	429a      	cmp	r2, r3
 8003664:	d80f      	bhi.n	8003686 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	4b45      	ldr	r3, [pc, #276]	; (8003784 <HAL_DMA_Init+0x13c>)
 800366e:	4413      	add	r3, r2
 8003670:	4a45      	ldr	r2, [pc, #276]	; (8003788 <HAL_DMA_Init+0x140>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	009a      	lsls	r2, r3, #2
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a42      	ldr	r2, [pc, #264]	; (800378c <HAL_DMA_Init+0x144>)
 8003682:	641a      	str	r2, [r3, #64]	; 0x40
 8003684:	e00e      	b.n	80036a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	4b40      	ldr	r3, [pc, #256]	; (8003790 <HAL_DMA_Init+0x148>)
 800368e:	4413      	add	r3, r2
 8003690:	4a3d      	ldr	r2, [pc, #244]	; (8003788 <HAL_DMA_Init+0x140>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	091b      	lsrs	r3, r3, #4
 8003698:	009a      	lsls	r2, r3, #2
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a3c      	ldr	r2, [pc, #240]	; (8003794 <HAL_DMA_Init+0x14c>)
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fa76 	bl	8003be8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003704:	d102      	bne.n	800370c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003720:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d010      	beq.n	800374c <HAL_DMA_Init+0x104>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b04      	cmp	r3, #4
 8003730:	d80c      	bhi.n	800374c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fa96 	bl	8003c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	e008      	b.n	800375e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40020407 	.word	0x40020407
 8003784:	bffdfff8 	.word	0xbffdfff8
 8003788:	cccccccd 	.word	0xcccccccd
 800378c:	40020000 	.word	0x40020000
 8003790:	bffdfbf8 	.word	0xbffdfbf8
 8003794:	40020400 	.word	0x40020400

08003798 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_DMA_Start_IT+0x20>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e066      	b.n	8003886 <HAL_DMA_Start_IT+0xee>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d155      	bne.n	8003878 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f9bb 	bl	8003b6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 020e 	orr.w	r2, r2, #14
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e00f      	b.n	8003830 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0204 	bic.w	r2, r2, #4
 800381e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 020a 	orr.w	r2, r2, #10
 800382e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800384c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	2b00      	cmp	r3, #0
 8003854:	d007      	beq.n	8003866 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003864:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0201 	orr.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e005      	b.n	8003884 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003880:	2302      	movs	r3, #2
 8003882:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003884:	7dfb      	ldrb	r3, [r7, #23]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d005      	beq.n	80038b2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2204      	movs	r2, #4
 80038aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
 80038b0:	e037      	b.n	8003922 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 020e 	bic.w	r2, r2, #14
 80038c0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0201 	bic.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f003 021f 	and.w	r2, r3, #31
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f202 	lsl.w	r2, r1, r2
 80038f4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038fe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00c      	beq.n	8003922 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003916:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003920:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003932:	7bfb      	ldrb	r3, [r7, #15]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d00d      	beq.n	8003974 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2204      	movs	r2, #4
 800395c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
 8003972:	e047      	b.n	8003a04 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 020e 	bic.w	r2, r2, #14
 8003982:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0201 	bic.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	f003 021f 	and.w	r2, r3, #31
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	2101      	movs	r1, #1
 80039b2:	fa01 f202 	lsl.w	r2, r1, r2
 80039b6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00c      	beq.n	80039e4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
    }
  }
  return status;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	2204      	movs	r2, #4
 8003a30:	409a      	lsls	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d026      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x7a>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d021      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d107      	bne.n	8003a62 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0204 	bic.w	r2, r2, #4
 8003a60:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f003 021f 	and.w	r2, r3, #31
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	2104      	movs	r1, #4
 8003a70:	fa01 f202 	lsl.w	r2, r1, r2
 8003a74:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d071      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a86:	e06c      	b.n	8003b62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	2202      	movs	r2, #2
 8003a92:	409a      	lsls	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d02e      	beq.n	8003afa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d029      	beq.n	8003afa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 020a 	bic.w	r2, r2, #10
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	f003 021f 	and.w	r2, r3, #31
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	2102      	movs	r1, #2
 8003ada:	fa01 f202 	lsl.w	r2, r1, r2
 8003ade:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d038      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003af8:	e033      	b.n	8003b62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	2208      	movs	r2, #8
 8003b04:	409a      	lsls	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d02a      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d025      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 020e 	bic.w	r2, r2, #14
 8003b26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2c:	f003 021f 	and.w	r2, r3, #31
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	2101      	movs	r1, #1
 8003b36:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d004      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b62:	bf00      	nop
 8003b64:	bf00      	nop
}
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b82:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b94:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f003 021f 	and.w	r2, r3, #31
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d108      	bne.n	8003bcc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bca:	e007      	b.n	8003bdc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	60da      	str	r2, [r3, #12]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d802      	bhi.n	8003c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003bfc:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	e001      	b.n	8003c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c04:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	3b08      	subs	r3, #8
 8003c12:	4a12      	ldr	r2, [pc, #72]	; (8003c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	089b      	lsrs	r3, r3, #2
 8003c22:	009a      	lsls	r2, r3, #2
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	461a      	mov	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a0b      	ldr	r2, [pc, #44]	; (8003c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c32:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40020407 	.word	0x40020407
 8003c54:	40020800 	.word	0x40020800
 8003c58:	40020820 	.word	0x40020820
 8003c5c:	cccccccd 	.word	0xcccccccd
 8003c60:	40020880 	.word	0x40020880

08003c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a08      	ldr	r2, [pc, #32]	; (8003ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c86:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	2201      	movs	r2, #1
 8003c92:	409a      	lsls	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	1000823f 	.word	0x1000823f
 8003ca8:	40020940 	.word	0x40020940

08003cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cba:	e15a      	b.n	8003f72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 814c 	beq.w	8003f6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d005      	beq.n	8003cec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d130      	bne.n	8003d4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d22:	2201      	movs	r2, #1
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	f003 0201 	and.w	r2, r3, #1
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d017      	beq.n	8003d8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	2203      	movs	r2, #3
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d123      	bne.n	8003dde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	08da      	lsrs	r2, r3, #3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3208      	adds	r2, #8
 8003d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	220f      	movs	r2, #15
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	691a      	ldr	r2, [r3, #16]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	08da      	lsrs	r2, r3, #3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3208      	adds	r2, #8
 8003dd8:	6939      	ldr	r1, [r7, #16]
 8003dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	2203      	movs	r2, #3
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4013      	ands	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0203 	and.w	r2, r3, #3
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 80a6 	beq.w	8003f6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e20:	4b5b      	ldr	r3, [pc, #364]	; (8003f90 <HAL_GPIO_Init+0x2e4>)
 8003e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e24:	4a5a      	ldr	r2, [pc, #360]	; (8003f90 <HAL_GPIO_Init+0x2e4>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6613      	str	r3, [r2, #96]	; 0x60
 8003e2c:	4b58      	ldr	r3, [pc, #352]	; (8003f90 <HAL_GPIO_Init+0x2e4>)
 8003e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e38:	4a56      	ldr	r2, [pc, #344]	; (8003f94 <HAL_GPIO_Init+0x2e8>)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	3302      	adds	r3, #2
 8003e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	220f      	movs	r2, #15
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e62:	d01f      	beq.n	8003ea4 <HAL_GPIO_Init+0x1f8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a4c      	ldr	r2, [pc, #304]	; (8003f98 <HAL_GPIO_Init+0x2ec>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d019      	beq.n	8003ea0 <HAL_GPIO_Init+0x1f4>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a4b      	ldr	r2, [pc, #300]	; (8003f9c <HAL_GPIO_Init+0x2f0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d013      	beq.n	8003e9c <HAL_GPIO_Init+0x1f0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a4a      	ldr	r2, [pc, #296]	; (8003fa0 <HAL_GPIO_Init+0x2f4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00d      	beq.n	8003e98 <HAL_GPIO_Init+0x1ec>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a49      	ldr	r2, [pc, #292]	; (8003fa4 <HAL_GPIO_Init+0x2f8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d007      	beq.n	8003e94 <HAL_GPIO_Init+0x1e8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a48      	ldr	r2, [pc, #288]	; (8003fa8 <HAL_GPIO_Init+0x2fc>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d101      	bne.n	8003e90 <HAL_GPIO_Init+0x1e4>
 8003e8c:	2305      	movs	r3, #5
 8003e8e:	e00a      	b.n	8003ea6 <HAL_GPIO_Init+0x1fa>
 8003e90:	2306      	movs	r3, #6
 8003e92:	e008      	b.n	8003ea6 <HAL_GPIO_Init+0x1fa>
 8003e94:	2304      	movs	r3, #4
 8003e96:	e006      	b.n	8003ea6 <HAL_GPIO_Init+0x1fa>
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e004      	b.n	8003ea6 <HAL_GPIO_Init+0x1fa>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e002      	b.n	8003ea6 <HAL_GPIO_Init+0x1fa>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <HAL_GPIO_Init+0x1fa>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	f002 0203 	and.w	r2, r2, #3
 8003eac:	0092      	lsls	r2, r2, #2
 8003eae:	4093      	lsls	r3, r2
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eb6:	4937      	ldr	r1, [pc, #220]	; (8003f94 <HAL_GPIO_Init+0x2e8>)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	089b      	lsrs	r3, r3, #2
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ec4:	4b39      	ldr	r3, [pc, #228]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ee8:	4a30      	ldr	r2, [pc, #192]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003eee:	4b2f      	ldr	r3, [pc, #188]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f12:	4a26      	ldr	r2, [pc, #152]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f18:	4b24      	ldr	r3, [pc, #144]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f3c:	4a1b      	ldr	r2, [pc, #108]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f42:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f66:	4a11      	ldr	r2, [pc, #68]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f47f ae9d 	bne.w	8003cbc <HAL_GPIO_Init+0x10>
  }
}
 8003f82:	bf00      	nop
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40010000 	.word	0x40010000
 8003f98:	48000400 	.word	0x48000400
 8003f9c:	48000800 	.word	0x48000800
 8003fa0:	48000c00 	.word	0x48000c00
 8003fa4:	48001000 	.word	0x48001000
 8003fa8:	48001400 	.word	0x48001400
 8003fac:	40010400 	.word	0x40010400

08003fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fc0:	787b      	ldrb	r3, [r7, #1]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fc6:	887a      	ldrh	r2, [r7, #2]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fcc:	e002      	b.n	8003fd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fce:	887a      	ldrh	r2, [r7, #2]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ff2:	887a      	ldrh	r2, [r7, #2]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	041a      	lsls	r2, r3, #16
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	43d9      	mvns	r1, r3
 8003ffe:	887b      	ldrh	r3, [r7, #2]
 8004000:	400b      	ands	r3, r1
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	619a      	str	r2, [r3, #24]
}
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800401e:	4b08      	ldr	r3, [pc, #32]	; (8004040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004020:	695a      	ldr	r2, [r3, #20]
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d006      	beq.n	8004038 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800402a:	4a05      	ldr	r2, [pc, #20]	; (8004040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fd fae8 	bl	8001608 <HAL_GPIO_EXTI_Callback>
  }
}
 8004038:	bf00      	nop
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40010400 	.word	0x40010400

08004044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d141      	bne.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004052:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800405a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405e:	d131      	bne.n	80040c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004060:	4b47      	ldr	r3, [pc, #284]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004066:	4a46      	ldr	r2, [pc, #280]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800406c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004070:	4b43      	ldr	r3, [pc, #268]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004078:	4a41      	ldr	r2, [pc, #260]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800407e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004080:	4b40      	ldr	r3, [pc, #256]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2232      	movs	r2, #50	; 0x32
 8004086:	fb02 f303 	mul.w	r3, r2, r3
 800408a:	4a3f      	ldr	r2, [pc, #252]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	0c9b      	lsrs	r3, r3, #18
 8004092:	3301      	adds	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004096:	e002      	b.n	800409e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3b01      	subs	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800409e:	4b38      	ldr	r3, [pc, #224]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040aa:	d102      	bne.n	80040b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f2      	bne.n	8004098 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040b2:	4b33      	ldr	r3, [pc, #204]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040be:	d158      	bne.n	8004172 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e057      	b.n	8004174 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040c4:	4b2e      	ldr	r3, [pc, #184]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ca:	4a2d      	ldr	r2, [pc, #180]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040d4:	e04d      	b.n	8004172 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040dc:	d141      	bne.n	8004162 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040de:	4b28      	ldr	r3, [pc, #160]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ea:	d131      	bne.n	8004150 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040ec:	4b24      	ldr	r3, [pc, #144]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040f2:	4a23      	ldr	r2, [pc, #140]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040fc:	4b20      	ldr	r3, [pc, #128]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004104:	4a1e      	ldr	r2, [pc, #120]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800410a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800410c:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2232      	movs	r2, #50	; 0x32
 8004112:	fb02 f303 	mul.w	r3, r2, r3
 8004116:	4a1c      	ldr	r2, [pc, #112]	; (8004188 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	0c9b      	lsrs	r3, r3, #18
 800411e:	3301      	adds	r3, #1
 8004120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004122:	e002      	b.n	800412a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	3b01      	subs	r3, #1
 8004128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800412a:	4b15      	ldr	r3, [pc, #84]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004136:	d102      	bne.n	800413e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f2      	bne.n	8004124 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414a:	d112      	bne.n	8004172 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e011      	b.n	8004174 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004156:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004160:	e007      	b.n	8004172 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004162:	4b07      	ldr	r3, [pc, #28]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800416a:	4a05      	ldr	r2, [pc, #20]	; (8004180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004170:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	40007000 	.word	0x40007000
 8004184:	20000004 	.word	0x20000004
 8004188:	431bde83 	.word	0x431bde83

0800418c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800419a:	6093      	str	r3, [r2, #8]
}
 800419c:	bf00      	nop
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40007000 	.word	0x40007000

080041ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e2fe      	b.n	80047bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d075      	beq.n	80042b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ca:	4b97      	ldr	r3, [pc, #604]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
 80041d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041d4:	4b94      	ldr	r3, [pc, #592]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b0c      	cmp	r3, #12
 80041e2:	d102      	bne.n	80041ea <HAL_RCC_OscConfig+0x3e>
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d002      	beq.n	80041f0 <HAL_RCC_OscConfig+0x44>
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d10b      	bne.n	8004208 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f0:	4b8d      	ldr	r3, [pc, #564]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d05b      	beq.n	80042b4 <HAL_RCC_OscConfig+0x108>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d157      	bne.n	80042b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e2d9      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004210:	d106      	bne.n	8004220 <HAL_RCC_OscConfig+0x74>
 8004212:	4b85      	ldr	r3, [pc, #532]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a84      	ldr	r2, [pc, #528]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e01d      	b.n	800425c <HAL_RCC_OscConfig+0xb0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0x98>
 800422a:	4b7f      	ldr	r3, [pc, #508]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a7e      	ldr	r2, [pc, #504]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b7c      	ldr	r3, [pc, #496]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a7b      	ldr	r2, [pc, #492]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e00b      	b.n	800425c <HAL_RCC_OscConfig+0xb0>
 8004244:	4b78      	ldr	r3, [pc, #480]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a77      	ldr	r2, [pc, #476]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 800424a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4b75      	ldr	r3, [pc, #468]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a74      	ldr	r2, [pc, #464]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800425a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d013      	beq.n	800428c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fd fd70 	bl	8001d48 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800426c:	f7fd fd6c 	bl	8001d48 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e29e      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800427e:	4b6a      	ldr	r3, [pc, #424]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0xc0>
 800428a:	e014      	b.n	80042b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fd fd5c 	bl	8001d48 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004294:	f7fd fd58 	bl	8001d48 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e28a      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042a6:	4b60      	ldr	r3, [pc, #384]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0xe8>
 80042b2:	e000      	b.n	80042b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d075      	beq.n	80043ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c2:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042cc:	4b56      	ldr	r3, [pc, #344]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b0c      	cmp	r3, #12
 80042da:	d102      	bne.n	80042e2 <HAL_RCC_OscConfig+0x136>
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d002      	beq.n	80042e8 <HAL_RCC_OscConfig+0x13c>
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d11f      	bne.n	8004328 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042e8:	4b4f      	ldr	r3, [pc, #316]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_RCC_OscConfig+0x154>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e25d      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004300:	4b49      	ldr	r3, [pc, #292]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	061b      	lsls	r3, r3, #24
 800430e:	4946      	ldr	r1, [pc, #280]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004310:	4313      	orrs	r3, r2
 8004312:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004314:	4b45      	ldr	r3, [pc, #276]	; (800442c <HAL_RCC_OscConfig+0x280>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7fd fcc9 	bl	8001cb0 <HAL_InitTick>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d043      	beq.n	80043ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e249      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d023      	beq.n	8004378 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004330:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a3c      	ldr	r2, [pc, #240]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fd fd04 	bl	8001d48 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004344:	f7fd fd00 	bl	8001d48 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e232      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004356:	4b34      	ldr	r3, [pc, #208]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004362:	4b31      	ldr	r3, [pc, #196]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	061b      	lsls	r3, r3, #24
 8004370:	492d      	ldr	r1, [pc, #180]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004372:	4313      	orrs	r3, r2
 8004374:	604b      	str	r3, [r1, #4]
 8004376:	e01a      	b.n	80043ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004378:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 800437e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fd fce0 	bl	8001d48 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438c:	f7fd fcdc 	bl	8001d48 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e20e      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800439e:	4b22      	ldr	r3, [pc, #136]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x1e0>
 80043aa:	e000      	b.n	80043ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d041      	beq.n	800443e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01c      	beq.n	80043fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c2:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80043c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c8:	4a17      	ldr	r2, [pc, #92]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d2:	f7fd fcb9 	bl	8001d48 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043da:	f7fd fcb5 	bl	8001d48 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e1e7      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ec:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80043ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0ef      	beq.n	80043da <HAL_RCC_OscConfig+0x22e>
 80043fa:	e020      	b.n	800443e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 80043fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004402:	4a09      	ldr	r2, [pc, #36]	; (8004428 <HAL_RCC_OscConfig+0x27c>)
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440c:	f7fd fc9c 	bl	8001d48 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004412:	e00d      	b.n	8004430 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004414:	f7fd fc98 	bl	8001d48 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d906      	bls.n	8004430 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e1ca      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000
 800442c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004430:	4b8c      	ldr	r3, [pc, #560]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1ea      	bne.n	8004414 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80a6 	beq.w	8004598 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444c:	2300      	movs	r3, #0
 800444e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004450:	4b84      	ldr	r3, [pc, #528]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_RCC_OscConfig+0x2b4>
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x2b6>
 8004460:	2300      	movs	r3, #0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00d      	beq.n	8004482 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	4b7f      	ldr	r3, [pc, #508]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446a:	4a7e      	ldr	r2, [pc, #504]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800446c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004470:	6593      	str	r3, [r2, #88]	; 0x58
 8004472:	4b7c      	ldr	r3, [pc, #496]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800447e:	2301      	movs	r3, #1
 8004480:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004482:	4b79      	ldr	r3, [pc, #484]	; (8004668 <HAL_RCC_OscConfig+0x4bc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d118      	bne.n	80044c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800448e:	4b76      	ldr	r3, [pc, #472]	; (8004668 <HAL_RCC_OscConfig+0x4bc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a75      	ldr	r2, [pc, #468]	; (8004668 <HAL_RCC_OscConfig+0x4bc>)
 8004494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449a:	f7fd fc55 	bl	8001d48 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a2:	f7fd fc51 	bl	8001d48 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e183      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b4:	4b6c      	ldr	r3, [pc, #432]	; (8004668 <HAL_RCC_OscConfig+0x4bc>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d108      	bne.n	80044da <HAL_RCC_OscConfig+0x32e>
 80044c8:	4b66      	ldr	r3, [pc, #408]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ce:	4a65      	ldr	r2, [pc, #404]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044d8:	e024      	b.n	8004524 <HAL_RCC_OscConfig+0x378>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b05      	cmp	r3, #5
 80044e0:	d110      	bne.n	8004504 <HAL_RCC_OscConfig+0x358>
 80044e2:	4b60      	ldr	r3, [pc, #384]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	4a5e      	ldr	r2, [pc, #376]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044ea:	f043 0304 	orr.w	r3, r3, #4
 80044ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044f2:	4b5c      	ldr	r3, [pc, #368]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f8:	4a5a      	ldr	r2, [pc, #360]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004502:	e00f      	b.n	8004524 <HAL_RCC_OscConfig+0x378>
 8004504:	4b57      	ldr	r3, [pc, #348]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	4a56      	ldr	r2, [pc, #344]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004514:	4b53      	ldr	r3, [pc, #332]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	4a52      	ldr	r2, [pc, #328]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800451c:	f023 0304 	bic.w	r3, r3, #4
 8004520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d016      	beq.n	800455a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fd fc0c 	bl	8001d48 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004532:	e00a      	b.n	800454a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7fd fc08 	bl	8001d48 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e138      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454a:	4b46      	ldr	r3, [pc, #280]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ed      	beq.n	8004534 <HAL_RCC_OscConfig+0x388>
 8004558:	e015      	b.n	8004586 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455a:	f7fd fbf5 	bl	8001d48 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004562:	f7fd fbf1 	bl	8001d48 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e121      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004578:	4b3a      	ldr	r3, [pc, #232]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1ed      	bne.n	8004562 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004586:	7ffb      	ldrb	r3, [r7, #31]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d105      	bne.n	8004598 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458c:	4b35      	ldr	r3, [pc, #212]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004590:	4a34      	ldr	r2, [pc, #208]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004596:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d03c      	beq.n	800461e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01c      	beq.n	80045e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045ac:	4b2d      	ldr	r3, [pc, #180]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b2:	4a2c      	ldr	r2, [pc, #176]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fd fbc4 	bl	8001d48 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c4:	f7fd fbc0 	bl	8001d48 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e0f2      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ef      	beq.n	80045c4 <HAL_RCC_OscConfig+0x418>
 80045e4:	e01b      	b.n	800461e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045e6:	4b1f      	ldr	r3, [pc, #124]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ec:	4a1d      	ldr	r2, [pc, #116]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f6:	f7fd fba7 	bl	8001d48 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045fe:	f7fd fba3 	bl	8001d48 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e0d5      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004610:	4b14      	ldr	r3, [pc, #80]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1ef      	bne.n	80045fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80c9 	beq.w	80047ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004628:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 030c 	and.w	r3, r3, #12
 8004630:	2b0c      	cmp	r3, #12
 8004632:	f000 8083 	beq.w	800473c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d15e      	bne.n	80046fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463e:	4b09      	ldr	r3, [pc, #36]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a08      	ldr	r2, [pc, #32]	; (8004664 <HAL_RCC_OscConfig+0x4b8>)
 8004644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7fd fb7d 	bl	8001d48 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004650:	e00c      	b.n	800466c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004652:	f7fd fb79 	bl	8001d48 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d905      	bls.n	800466c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e0ab      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
 8004664:	40021000 	.word	0x40021000
 8004668:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800466c:	4b55      	ldr	r3, [pc, #340]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1ec      	bne.n	8004652 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004678:	4b52      	ldr	r3, [pc, #328]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	4b52      	ldr	r3, [pc, #328]	; (80047c8 <HAL_RCC_OscConfig+0x61c>)
 800467e:	4013      	ands	r3, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6a11      	ldr	r1, [r2, #32]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004688:	3a01      	subs	r2, #1
 800468a:	0112      	lsls	r2, r2, #4
 800468c:	4311      	orrs	r1, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004692:	0212      	lsls	r2, r2, #8
 8004694:	4311      	orrs	r1, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800469a:	0852      	lsrs	r2, r2, #1
 800469c:	3a01      	subs	r2, #1
 800469e:	0552      	lsls	r2, r2, #21
 80046a0:	4311      	orrs	r1, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046a6:	0852      	lsrs	r2, r2, #1
 80046a8:	3a01      	subs	r2, #1
 80046aa:	0652      	lsls	r2, r2, #25
 80046ac:	4311      	orrs	r1, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046b2:	06d2      	lsls	r2, r2, #27
 80046b4:	430a      	orrs	r2, r1
 80046b6:	4943      	ldr	r1, [pc, #268]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046bc:	4b41      	ldr	r3, [pc, #260]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a40      	ldr	r2, [pc, #256]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80046c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046c8:	4b3e      	ldr	r3, [pc, #248]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4a3d      	ldr	r2, [pc, #244]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80046ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fd fb38 	bl	8001d48 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fd fb34 	bl	8001d48 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e066      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ee:	4b35      	ldr	r3, [pc, #212]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x530>
 80046fa:	e05e      	b.n	80047ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fc:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a30      	ldr	r2, [pc, #192]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fd fb1e 	bl	8001d48 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004710:	f7fd fb1a 	bl	8001d48 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e04c      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004722:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800472e:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	4924      	ldr	r1, [pc, #144]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 8004734:	4b25      	ldr	r3, [pc, #148]	; (80047cc <HAL_RCC_OscConfig+0x620>)
 8004736:	4013      	ands	r3, r2
 8004738:	60cb      	str	r3, [r1, #12]
 800473a:	e03e      	b.n	80047ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e039      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004748:	4b1e      	ldr	r3, [pc, #120]	; (80047c4 <HAL_RCC_OscConfig+0x618>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f003 0203 	and.w	r2, r3, #3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	429a      	cmp	r2, r3
 800475a:	d12c      	bne.n	80047b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	3b01      	subs	r3, #1
 8004768:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476a:	429a      	cmp	r2, r3
 800476c:	d123      	bne.n	80047b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800477a:	429a      	cmp	r2, r3
 800477c:	d11b      	bne.n	80047b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d113      	bne.n	80047b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	3b01      	subs	r3, #1
 800479c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800479e:	429a      	cmp	r2, r3
 80047a0:	d109      	bne.n	80047b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	3b01      	subs	r3, #1
 80047b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d001      	beq.n	80047ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3720      	adds	r7, #32
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40021000 	.word	0x40021000
 80047c8:	019f800c 	.word	0x019f800c
 80047cc:	feeefffc 	.word	0xfeeefffc

080047d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e11e      	b.n	8004a26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047e8:	4b91      	ldr	r3, [pc, #580]	; (8004a30 <HAL_RCC_ClockConfig+0x260>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d910      	bls.n	8004818 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f6:	4b8e      	ldr	r3, [pc, #568]	; (8004a30 <HAL_RCC_ClockConfig+0x260>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f023 020f 	bic.w	r2, r3, #15
 80047fe:	498c      	ldr	r1, [pc, #560]	; (8004a30 <HAL_RCC_ClockConfig+0x260>)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	4313      	orrs	r3, r2
 8004804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004806:	4b8a      	ldr	r3, [pc, #552]	; (8004a30 <HAL_RCC_ClockConfig+0x260>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e106      	b.n	8004a26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d073      	beq.n	800490c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b03      	cmp	r3, #3
 800482a:	d129      	bne.n	8004880 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800482c:	4b81      	ldr	r3, [pc, #516]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0f4      	b.n	8004a26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800483c:	f000 f99e 	bl	8004b7c <RCC_GetSysClockFreqFromPLLSource>
 8004840:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4a7c      	ldr	r2, [pc, #496]	; (8004a38 <HAL_RCC_ClockConfig+0x268>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d93f      	bls.n	80048ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800484a:	4b7a      	ldr	r3, [pc, #488]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800485e:	2b00      	cmp	r3, #0
 8004860:	d033      	beq.n	80048ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004866:	2b00      	cmp	r3, #0
 8004868:	d12f      	bne.n	80048ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800486a:	4b72      	ldr	r3, [pc, #456]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004872:	4a70      	ldr	r2, [pc, #448]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 8004874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004878:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	e024      	b.n	80048ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d107      	bne.n	8004898 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004888:	4b6a      	ldr	r3, [pc, #424]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d109      	bne.n	80048a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0c6      	b.n	8004a26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004898:	4b66      	ldr	r3, [pc, #408]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0be      	b.n	8004a26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80048a8:	f000 f8ce 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 80048ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4a61      	ldr	r2, [pc, #388]	; (8004a38 <HAL_RCC_ClockConfig+0x268>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d909      	bls.n	80048ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048b6:	4b5f      	ldr	r3, [pc, #380]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048be:	4a5d      	ldr	r2, [pc, #372]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 80048c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048c6:	2380      	movs	r3, #128	; 0x80
 80048c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048ca:	4b5a      	ldr	r3, [pc, #360]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f023 0203 	bic.w	r2, r3, #3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	4957      	ldr	r1, [pc, #348]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048dc:	f7fd fa34 	bl	8001d48 <HAL_GetTick>
 80048e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e2:	e00a      	b.n	80048fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e4:	f7fd fa30 	bl	8001d48 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e095      	b.n	8004a26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	4b4e      	ldr	r3, [pc, #312]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 020c 	and.w	r2, r3, #12
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	429a      	cmp	r2, r3
 800490a:	d1eb      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d023      	beq.n	8004960 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004924:	4b43      	ldr	r3, [pc, #268]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	4a42      	ldr	r2, [pc, #264]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 800492a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800492e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800493c:	4b3d      	ldr	r3, [pc, #244]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004944:	4a3b      	ldr	r2, [pc, #236]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 8004946:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800494a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800494c:	4b39      	ldr	r3, [pc, #228]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4936      	ldr	r1, [pc, #216]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
 800495e:	e008      	b.n	8004972 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2b80      	cmp	r3, #128	; 0x80
 8004964:	d105      	bne.n	8004972 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004966:	4b33      	ldr	r3, [pc, #204]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	4a32      	ldr	r2, [pc, #200]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 800496c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004970:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004972:	4b2f      	ldr	r3, [pc, #188]	; (8004a30 <HAL_RCC_ClockConfig+0x260>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d21d      	bcs.n	80049bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004980:	4b2b      	ldr	r3, [pc, #172]	; (8004a30 <HAL_RCC_ClockConfig+0x260>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f023 020f 	bic.w	r2, r3, #15
 8004988:	4929      	ldr	r1, [pc, #164]	; (8004a30 <HAL_RCC_ClockConfig+0x260>)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	4313      	orrs	r3, r2
 800498e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004990:	f7fd f9da 	bl	8001d48 <HAL_GetTick>
 8004994:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	e00a      	b.n	80049ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004998:	f7fd f9d6 	bl	8001d48 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e03b      	b.n	8004a26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <HAL_RCC_ClockConfig+0x260>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d1ed      	bne.n	8004998 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c8:	4b1a      	ldr	r3, [pc, #104]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4917      	ldr	r1, [pc, #92]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049e6:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	490f      	ldr	r1, [pc, #60]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049fa:	f000 f825 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 80049fe:	4602      	mov	r2, r0
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <HAL_RCC_ClockConfig+0x264>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	490c      	ldr	r1, [pc, #48]	; (8004a3c <HAL_RCC_ClockConfig+0x26c>)
 8004a0c:	5ccb      	ldrb	r3, [r1, r3]
 8004a0e:	f003 031f 	and.w	r3, r3, #31
 8004a12:	fa22 f303 	lsr.w	r3, r2, r3
 8004a16:	4a0a      	ldr	r2, [pc, #40]	; (8004a40 <HAL_RCC_ClockConfig+0x270>)
 8004a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a1a:	4b0a      	ldr	r3, [pc, #40]	; (8004a44 <HAL_RCC_ClockConfig+0x274>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fd f946 	bl	8001cb0 <HAL_InitTick>
 8004a24:	4603      	mov	r3, r0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40022000 	.word	0x40022000
 8004a34:	40021000 	.word	0x40021000
 8004a38:	04c4b400 	.word	0x04c4b400
 8004a3c:	080082c8 	.word	0x080082c8
 8004a40:	20000004 	.word	0x20000004
 8004a44:	20000008 	.word	0x20000008

08004a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a4e:	4b2c      	ldr	r3, [pc, #176]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d102      	bne.n	8004a60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a5a:	4b2a      	ldr	r3, [pc, #168]	; (8004b04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	e047      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a60:	4b27      	ldr	r3, [pc, #156]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 030c 	and.w	r3, r3, #12
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d102      	bne.n	8004a72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a6c:	4b26      	ldr	r3, [pc, #152]	; (8004b08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	e03e      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a72:	4b23      	ldr	r3, [pc, #140]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
 8004a7a:	2b0c      	cmp	r3, #12
 8004a7c:	d136      	bne.n	8004aec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a7e:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a88:	4b1d      	ldr	r3, [pc, #116]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	091b      	lsrs	r3, r3, #4
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	3301      	adds	r3, #1
 8004a94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d10c      	bne.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a9c:	4a1a      	ldr	r2, [pc, #104]	; (8004b08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa4:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aa6:	68d2      	ldr	r2, [r2, #12]
 8004aa8:	0a12      	lsrs	r2, r2, #8
 8004aaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	617b      	str	r3, [r7, #20]
      break;
 8004ab4:	e00c      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ab6:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abe:	4a10      	ldr	r2, [pc, #64]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ac0:	68d2      	ldr	r2, [r2, #12]
 8004ac2:	0a12      	lsrs	r2, r2, #8
 8004ac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ac8:	fb02 f303 	mul.w	r3, r2, r3
 8004acc:	617b      	str	r3, [r7, #20]
      break;
 8004ace:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	0e5b      	lsrs	r3, r3, #25
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	3301      	adds	r3, #1
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	e001      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004af0:	693b      	ldr	r3, [r7, #16]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40021000 	.word	0x40021000
 8004b04:	00f42400 	.word	0x00f42400
 8004b08:	016e3600 	.word	0x016e3600

08004b0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b10:	4b03      	ldr	r3, [pc, #12]	; (8004b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b12:	681b      	ldr	r3, [r3, #0]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	20000004 	.word	0x20000004

08004b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b28:	f7ff fff0 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	0a1b      	lsrs	r3, r3, #8
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	4904      	ldr	r1, [pc, #16]	; (8004b4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b3a:	5ccb      	ldrb	r3, [r1, r3]
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	080082d8 	.word	0x080082d8

08004b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b54:	f7ff ffda 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	0adb      	lsrs	r3, r3, #11
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	4904      	ldr	r1, [pc, #16]	; (8004b78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b66:	5ccb      	ldrb	r3, [r1, r3]
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021000 	.word	0x40021000
 8004b78:	080082d8 	.word	0x080082d8

08004b7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b82:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	3301      	adds	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d10c      	bne.n	8004bba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ba0:	4a17      	ldr	r2, [pc, #92]	; (8004c00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba8:	4a14      	ldr	r2, [pc, #80]	; (8004bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004baa:	68d2      	ldr	r2, [r2, #12]
 8004bac:	0a12      	lsrs	r2, r2, #8
 8004bae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	617b      	str	r3, [r7, #20]
    break;
 8004bb8:	e00c      	b.n	8004bd4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bba:	4a12      	ldr	r2, [pc, #72]	; (8004c04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc2:	4a0e      	ldr	r2, [pc, #56]	; (8004bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bc4:	68d2      	ldr	r2, [r2, #12]
 8004bc6:	0a12      	lsrs	r2, r2, #8
 8004bc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bcc:	fb02 f303 	mul.w	r3, r2, r3
 8004bd0:	617b      	str	r3, [r7, #20]
    break;
 8004bd2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bd4:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	0e5b      	lsrs	r3, r3, #25
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	3301      	adds	r3, #1
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bee:	687b      	ldr	r3, [r7, #4]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	016e3600 	.word	0x016e3600
 8004c04:	00f42400 	.word	0x00f42400

08004c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c10:	2300      	movs	r3, #0
 8004c12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c14:	2300      	movs	r3, #0
 8004c16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8098 	beq.w	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c26:	2300      	movs	r3, #0
 8004c28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c2a:	4b43      	ldr	r3, [pc, #268]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10d      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c36:	4b40      	ldr	r3, [pc, #256]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3a:	4a3f      	ldr	r2, [pc, #252]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c40:	6593      	str	r3, [r2, #88]	; 0x58
 8004c42:	4b3d      	ldr	r3, [pc, #244]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c52:	4b3a      	ldr	r3, [pc, #232]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a39      	ldr	r2, [pc, #228]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c5e:	f7fd f873 	bl	8001d48 <HAL_GetTick>
 8004c62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c64:	e009      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c66:	f7fd f86f 	bl	8001d48 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d902      	bls.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	74fb      	strb	r3, [r7, #19]
        break;
 8004c78:	e005      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c7a:	4b30      	ldr	r3, [pc, #192]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0ef      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d159      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c8c:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01e      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d019      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ca8:	4b23      	ldr	r3, [pc, #140]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cb4:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cba:	4a1f      	ldr	r2, [pc, #124]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc4:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	4a1b      	ldr	r2, [pc, #108]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cd4:	4a18      	ldr	r2, [pc, #96]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d016      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce6:	f7fd f82f 	bl	8001d48 <HAL_GetTick>
 8004cea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cec:	e00b      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cee:	f7fd f82b 	bl	8001d48 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d902      	bls.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	74fb      	strb	r3, [r7, #19]
            break;
 8004d04:	e006      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d06:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0ec      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d14:	7cfb      	ldrb	r3, [r7, #19]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d1a:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d28:	4903      	ldr	r1, [pc, #12]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d30:	e008      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	74bb      	strb	r3, [r7, #18]
 8004d36:	e005      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d40:	7cfb      	ldrb	r3, [r7, #19]
 8004d42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d44:	7c7b      	ldrb	r3, [r7, #17]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d105      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d4a:	4ba7      	ldr	r3, [pc, #668]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4e:	4aa6      	ldr	r2, [pc, #664]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d62:	4ba1      	ldr	r3, [pc, #644]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	f023 0203 	bic.w	r2, r3, #3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	499d      	ldr	r1, [pc, #628]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d84:	4b98      	ldr	r3, [pc, #608]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	f023 020c 	bic.w	r2, r3, #12
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	4995      	ldr	r1, [pc, #596]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004da6:	4b90      	ldr	r3, [pc, #576]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	498c      	ldr	r1, [pc, #560]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dc8:	4b87      	ldr	r3, [pc, #540]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	4984      	ldr	r1, [pc, #528]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dea:	4b7f      	ldr	r3, [pc, #508]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	497b      	ldr	r1, [pc, #492]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e0c:	4b76      	ldr	r3, [pc, #472]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	4973      	ldr	r1, [pc, #460]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e2e:	4b6e      	ldr	r3, [pc, #440]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	496a      	ldr	r1, [pc, #424]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e50:	4b65      	ldr	r3, [pc, #404]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	4962      	ldr	r1, [pc, #392]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e72:	4b5d      	ldr	r3, [pc, #372]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	4959      	ldr	r1, [pc, #356]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e94:	4b54      	ldr	r3, [pc, #336]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e9a:	f023 0203 	bic.w	r2, r3, #3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	4951      	ldr	r1, [pc, #324]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eb6:	4b4c      	ldr	r3, [pc, #304]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	4948      	ldr	r1, [pc, #288]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d015      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ed8:	4b43      	ldr	r3, [pc, #268]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ede:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	4940      	ldr	r1, [pc, #256]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef6:	d105      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ef8:	4b3b      	ldr	r3, [pc, #236]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	4a3a      	ldr	r2, [pc, #232]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d015      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f10:	4b35      	ldr	r3, [pc, #212]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1e:	4932      	ldr	r1, [pc, #200]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f2e:	d105      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f30:	4b2d      	ldr	r3, [pc, #180]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	4a2c      	ldr	r2, [pc, #176]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f3a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d015      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f48:	4b27      	ldr	r3, [pc, #156]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	4924      	ldr	r1, [pc, #144]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f66:	d105      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f68:	4b1f      	ldr	r3, [pc, #124]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	4a1e      	ldr	r2, [pc, #120]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f72:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d015      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f80:	4b19      	ldr	r3, [pc, #100]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8e:	4916      	ldr	r1, [pc, #88]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f9e:	d105      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa0:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	4a10      	ldr	r2, [pc, #64]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004faa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d019      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	4908      	ldr	r1, [pc, #32]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fd6:	d109      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fd8:	4b03      	ldr	r3, [pc, #12]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4a02      	ldr	r2, [pc, #8]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fe2:	60d3      	str	r3, [r2, #12]
 8004fe4:	e002      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004fe6:	bf00      	nop
 8004fe8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d015      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ff8:	4b29      	ldr	r3, [pc, #164]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	4926      	ldr	r1, [pc, #152]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005016:	d105      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005018:	4b21      	ldr	r3, [pc, #132]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	4a20      	ldr	r2, [pc, #128]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800501e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005022:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d015      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005030:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005036:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800503e:	4918      	ldr	r1, [pc, #96]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504e:	d105      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005050:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	4a12      	ldr	r2, [pc, #72]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d015      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005068:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800506a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800506e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005076:	490a      	ldr	r1, [pc, #40]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005082:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005086:	d105      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005088:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4a04      	ldr	r2, [pc, #16]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800508e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005092:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005094:	7cbb      	ldrb	r3, [r7, #18]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	40021000 	.word	0x40021000

080050a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e049      	b.n	800514a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fc fcb2 	bl	8001a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3304      	adds	r3, #4
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f000 fe34 	bl	8005d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	d001      	beq.n	800516c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e04c      	b.n	8005206 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a26      	ldr	r2, [pc, #152]	; (8005214 <HAL_TIM_Base_Start+0xc0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d022      	beq.n	80051c4 <HAL_TIM_Base_Start+0x70>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005186:	d01d      	beq.n	80051c4 <HAL_TIM_Base_Start+0x70>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a22      	ldr	r2, [pc, #136]	; (8005218 <HAL_TIM_Base_Start+0xc4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d018      	beq.n	80051c4 <HAL_TIM_Base_Start+0x70>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a21      	ldr	r2, [pc, #132]	; (800521c <HAL_TIM_Base_Start+0xc8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d013      	beq.n	80051c4 <HAL_TIM_Base_Start+0x70>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1f      	ldr	r2, [pc, #124]	; (8005220 <HAL_TIM_Base_Start+0xcc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00e      	beq.n	80051c4 <HAL_TIM_Base_Start+0x70>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1e      	ldr	r2, [pc, #120]	; (8005224 <HAL_TIM_Base_Start+0xd0>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d009      	beq.n	80051c4 <HAL_TIM_Base_Start+0x70>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1c      	ldr	r2, [pc, #112]	; (8005228 <HAL_TIM_Base_Start+0xd4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <HAL_TIM_Base_Start+0x70>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1b      	ldr	r2, [pc, #108]	; (800522c <HAL_TIM_Base_Start+0xd8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d115      	bne.n	80051f0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	4b19      	ldr	r3, [pc, #100]	; (8005230 <HAL_TIM_Base_Start+0xdc>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b06      	cmp	r3, #6
 80051d4:	d015      	beq.n	8005202 <HAL_TIM_Base_Start+0xae>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051dc:	d011      	beq.n	8005202 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 0201 	orr.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ee:	e008      	b.n	8005202 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e000      	b.n	8005204 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005202:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40000400 	.word	0x40000400
 800521c:	40000800 	.word	0x40000800
 8005220:	40000c00 	.word	0x40000c00
 8005224:	40013400 	.word	0x40013400
 8005228:	40014000 	.word	0x40014000
 800522c:	40015000 	.word	0x40015000
 8005230:	00010007 	.word	0x00010007

08005234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b01      	cmp	r3, #1
 8005246:	d001      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e054      	b.n	80052f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0201 	orr.w	r2, r2, #1
 8005262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a26      	ldr	r2, [pc, #152]	; (8005304 <HAL_TIM_Base_Start_IT+0xd0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d022      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x80>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005276:	d01d      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x80>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a22      	ldr	r2, [pc, #136]	; (8005308 <HAL_TIM_Base_Start_IT+0xd4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d018      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x80>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a21      	ldr	r2, [pc, #132]	; (800530c <HAL_TIM_Base_Start_IT+0xd8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d013      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x80>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1f      	ldr	r2, [pc, #124]	; (8005310 <HAL_TIM_Base_Start_IT+0xdc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00e      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x80>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1e      	ldr	r2, [pc, #120]	; (8005314 <HAL_TIM_Base_Start_IT+0xe0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d009      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x80>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1c      	ldr	r2, [pc, #112]	; (8005318 <HAL_TIM_Base_Start_IT+0xe4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d004      	beq.n	80052b4 <HAL_TIM_Base_Start_IT+0x80>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1b      	ldr	r2, [pc, #108]	; (800531c <HAL_TIM_Base_Start_IT+0xe8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d115      	bne.n	80052e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	4b19      	ldr	r3, [pc, #100]	; (8005320 <HAL_TIM_Base_Start_IT+0xec>)
 80052bc:	4013      	ands	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b06      	cmp	r3, #6
 80052c4:	d015      	beq.n	80052f2 <HAL_TIM_Base_Start_IT+0xbe>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052cc:	d011      	beq.n	80052f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0201 	orr.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052de:	e008      	b.n	80052f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	e000      	b.n	80052f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40012c00 	.word	0x40012c00
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40000c00 	.word	0x40000c00
 8005314:	40013400 	.word	0x40013400
 8005318:	40014000 	.word	0x40014000
 800531c:	40015000 	.word	0x40015000
 8005320:	00010007 	.word	0x00010007

08005324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e049      	b.n	80053ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f841 	bl	80053d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3304      	adds	r3, #4
 8005360:	4619      	mov	r1, r3
 8005362:	4610      	mov	r0, r2
 8005364:	f000 fcf4 	bl	8005d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d109      	bne.n	800540c <HAL_TIM_PWM_Start+0x24>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	bf14      	ite	ne
 8005404:	2301      	movne	r3, #1
 8005406:	2300      	moveq	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	e03c      	b.n	8005486 <HAL_TIM_PWM_Start+0x9e>
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2b04      	cmp	r3, #4
 8005410:	d109      	bne.n	8005426 <HAL_TIM_PWM_Start+0x3e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b01      	cmp	r3, #1
 800541c:	bf14      	ite	ne
 800541e:	2301      	movne	r3, #1
 8005420:	2300      	moveq	r3, #0
 8005422:	b2db      	uxtb	r3, r3
 8005424:	e02f      	b.n	8005486 <HAL_TIM_PWM_Start+0x9e>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b08      	cmp	r3, #8
 800542a:	d109      	bne.n	8005440 <HAL_TIM_PWM_Start+0x58>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	bf14      	ite	ne
 8005438:	2301      	movne	r3, #1
 800543a:	2300      	moveq	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e022      	b.n	8005486 <HAL_TIM_PWM_Start+0x9e>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b0c      	cmp	r3, #12
 8005444:	d109      	bne.n	800545a <HAL_TIM_PWM_Start+0x72>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b01      	cmp	r3, #1
 8005450:	bf14      	ite	ne
 8005452:	2301      	movne	r3, #1
 8005454:	2300      	moveq	r3, #0
 8005456:	b2db      	uxtb	r3, r3
 8005458:	e015      	b.n	8005486 <HAL_TIM_PWM_Start+0x9e>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b10      	cmp	r3, #16
 800545e:	d109      	bne.n	8005474 <HAL_TIM_PWM_Start+0x8c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	bf14      	ite	ne
 800546c:	2301      	movne	r3, #1
 800546e:	2300      	moveq	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	e008      	b.n	8005486 <HAL_TIM_PWM_Start+0x9e>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b01      	cmp	r3, #1
 800547e:	bf14      	ite	ne
 8005480:	2301      	movne	r3, #1
 8005482:	2300      	moveq	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e0a6      	b.n	80055dc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d104      	bne.n	800549e <HAL_TIM_PWM_Start+0xb6>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800549c:	e023      	b.n	80054e6 <HAL_TIM_PWM_Start+0xfe>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_PWM_Start+0xc6>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054ac:	e01b      	b.n	80054e6 <HAL_TIM_PWM_Start+0xfe>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d104      	bne.n	80054be <HAL_TIM_PWM_Start+0xd6>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054bc:	e013      	b.n	80054e6 <HAL_TIM_PWM_Start+0xfe>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b0c      	cmp	r3, #12
 80054c2:	d104      	bne.n	80054ce <HAL_TIM_PWM_Start+0xe6>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054cc:	e00b      	b.n	80054e6 <HAL_TIM_PWM_Start+0xfe>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d104      	bne.n	80054de <HAL_TIM_PWM_Start+0xf6>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054dc:	e003      	b.n	80054e6 <HAL_TIM_PWM_Start+0xfe>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2202      	movs	r2, #2
 80054e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2201      	movs	r2, #1
 80054ec:	6839      	ldr	r1, [r7, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f001 f8a8 	bl	8006644 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a3a      	ldr	r2, [pc, #232]	; (80055e4 <HAL_TIM_PWM_Start+0x1fc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d018      	beq.n	8005530 <HAL_TIM_PWM_Start+0x148>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a39      	ldr	r2, [pc, #228]	; (80055e8 <HAL_TIM_PWM_Start+0x200>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d013      	beq.n	8005530 <HAL_TIM_PWM_Start+0x148>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a37      	ldr	r2, [pc, #220]	; (80055ec <HAL_TIM_PWM_Start+0x204>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00e      	beq.n	8005530 <HAL_TIM_PWM_Start+0x148>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a36      	ldr	r2, [pc, #216]	; (80055f0 <HAL_TIM_PWM_Start+0x208>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d009      	beq.n	8005530 <HAL_TIM_PWM_Start+0x148>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a34      	ldr	r2, [pc, #208]	; (80055f4 <HAL_TIM_PWM_Start+0x20c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d004      	beq.n	8005530 <HAL_TIM_PWM_Start+0x148>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a33      	ldr	r2, [pc, #204]	; (80055f8 <HAL_TIM_PWM_Start+0x210>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d101      	bne.n	8005534 <HAL_TIM_PWM_Start+0x14c>
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <HAL_TIM_PWM_Start+0x14e>
 8005534:	2300      	movs	r3, #0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d007      	beq.n	800554a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005548:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a25      	ldr	r2, [pc, #148]	; (80055e4 <HAL_TIM_PWM_Start+0x1fc>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d022      	beq.n	800559a <HAL_TIM_PWM_Start+0x1b2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555c:	d01d      	beq.n	800559a <HAL_TIM_PWM_Start+0x1b2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a26      	ldr	r2, [pc, #152]	; (80055fc <HAL_TIM_PWM_Start+0x214>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d018      	beq.n	800559a <HAL_TIM_PWM_Start+0x1b2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a24      	ldr	r2, [pc, #144]	; (8005600 <HAL_TIM_PWM_Start+0x218>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <HAL_TIM_PWM_Start+0x1b2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a23      	ldr	r2, [pc, #140]	; (8005604 <HAL_TIM_PWM_Start+0x21c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00e      	beq.n	800559a <HAL_TIM_PWM_Start+0x1b2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a19      	ldr	r2, [pc, #100]	; (80055e8 <HAL_TIM_PWM_Start+0x200>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d009      	beq.n	800559a <HAL_TIM_PWM_Start+0x1b2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a18      	ldr	r2, [pc, #96]	; (80055ec <HAL_TIM_PWM_Start+0x204>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_TIM_PWM_Start+0x1b2>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a18      	ldr	r2, [pc, #96]	; (80055f8 <HAL_TIM_PWM_Start+0x210>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d115      	bne.n	80055c6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	4b19      	ldr	r3, [pc, #100]	; (8005608 <HAL_TIM_PWM_Start+0x220>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b06      	cmp	r3, #6
 80055aa:	d015      	beq.n	80055d8 <HAL_TIM_PWM_Start+0x1f0>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b2:	d011      	beq.n	80055d8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c4:	e008      	b.n	80055d8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0201 	orr.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	e000      	b.n	80055da <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40013400 	.word	0x40013400
 80055ec:	40014000 	.word	0x40014000
 80055f0:	40014400 	.word	0x40014400
 80055f4:	40014800 	.word	0x40014800
 80055f8:	40015000 	.word	0x40015000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	00010007 	.word	0x00010007

0800560c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d020      	beq.n	8005670 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01b      	beq.n	8005670 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0202 	mvn.w	r2, #2
 8005640:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fb5c 	bl	8005d14 <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fb4e 	bl	8005d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fb5f 	bl	8005d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b00      	cmp	r3, #0
 8005678:	d020      	beq.n	80056bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01b      	beq.n	80056bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0204 	mvn.w	r2, #4
 800568c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2202      	movs	r2, #2
 8005692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fb36 	bl	8005d14 <HAL_TIM_IC_CaptureCallback>
 80056a8:	e005      	b.n	80056b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fb28 	bl	8005d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fb39 	bl	8005d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d020      	beq.n	8005708 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01b      	beq.n	8005708 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0208 	mvn.w	r2, #8
 80056d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2204      	movs	r2, #4
 80056de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fb10 	bl	8005d14 <HAL_TIM_IC_CaptureCallback>
 80056f4:	e005      	b.n	8005702 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fb02 	bl	8005d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fb13 	bl	8005d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b00      	cmp	r3, #0
 8005710:	d020      	beq.n	8005754 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01b      	beq.n	8005754 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0210 	mvn.w	r2, #16
 8005724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2208      	movs	r2, #8
 800572a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 faea 	bl	8005d14 <HAL_TIM_IC_CaptureCallback>
 8005740:	e005      	b.n	800574e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fadc 	bl	8005d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 faed 	bl	8005d28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00c      	beq.n	8005778 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0201 	mvn.w	r2, #1
 8005770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fb ffaa 	bl	80016cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b00      	cmp	r3, #0
 8005780:	d104      	bne.n	800578c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00c      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800579e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f001 f815 	bl	80067d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00c      	beq.n	80057ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d007      	beq.n	80057ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f001 f80d 	bl	80067e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00c      	beq.n	80057ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 faa7 	bl	8005d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00c      	beq.n	8005812 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f06f 0220 	mvn.w	r2, #32
 800580a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 ffd5 	bl	80067bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00c      	beq.n	8005836 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d007      	beq.n	8005836 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800582e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 ffe1 	bl	80067f8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00c      	beq.n	800585a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d007      	beq.n	800585a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 ffd9 	bl	800680c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00c      	beq.n	800587e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 ffd1 	bl	8006820 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00c      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800589a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 ffc9 	bl	8006834 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e0ff      	b.n	8005aca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b14      	cmp	r3, #20
 80058d6:	f200 80f0 	bhi.w	8005aba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058da:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	08005935 	.word	0x08005935
 80058e4:	08005abb 	.word	0x08005abb
 80058e8:	08005abb 	.word	0x08005abb
 80058ec:	08005abb 	.word	0x08005abb
 80058f0:	08005975 	.word	0x08005975
 80058f4:	08005abb 	.word	0x08005abb
 80058f8:	08005abb 	.word	0x08005abb
 80058fc:	08005abb 	.word	0x08005abb
 8005900:	080059b7 	.word	0x080059b7
 8005904:	08005abb 	.word	0x08005abb
 8005908:	08005abb 	.word	0x08005abb
 800590c:	08005abb 	.word	0x08005abb
 8005910:	080059f7 	.word	0x080059f7
 8005914:	08005abb 	.word	0x08005abb
 8005918:	08005abb 	.word	0x08005abb
 800591c:	08005abb 	.word	0x08005abb
 8005920:	08005a39 	.word	0x08005a39
 8005924:	08005abb 	.word	0x08005abb
 8005928:	08005abb 	.word	0x08005abb
 800592c:	08005abb 	.word	0x08005abb
 8005930:	08005a79 	.word	0x08005a79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fabc 	bl	8005eb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0208 	orr.w	r2, r2, #8
 800594e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0204 	bic.w	r2, r2, #4
 800595e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6999      	ldr	r1, [r3, #24]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	619a      	str	r2, [r3, #24]
      break;
 8005972:	e0a5      	b.n	8005ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fb36 	bl	8005fec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800598e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800599e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6999      	ldr	r1, [r3, #24]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	021a      	lsls	r2, r3, #8
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	619a      	str	r2, [r3, #24]
      break;
 80059b4:	e084      	b.n	8005ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fba9 	bl	8006114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0208 	orr.w	r2, r2, #8
 80059d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0204 	bic.w	r2, r2, #4
 80059e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69d9      	ldr	r1, [r3, #28]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	61da      	str	r2, [r3, #28]
      break;
 80059f4:	e064      	b.n	8005ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 fc1b 	bl	8006238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69d9      	ldr	r1, [r3, #28]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	021a      	lsls	r2, r3, #8
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	61da      	str	r2, [r3, #28]
      break;
 8005a36:	e043      	b.n	8005ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fc8e 	bl	8006360 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0208 	orr.w	r2, r2, #8
 8005a52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0204 	bic.w	r2, r2, #4
 8005a62:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005a76:	e023      	b.n	8005ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68b9      	ldr	r1, [r7, #8]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fcd8 	bl	8006434 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	021a      	lsls	r2, r3, #8
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005ab8:	e002      	b.n	8005ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	75fb      	strb	r3, [r7, #23]
      break;
 8005abe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop

08005ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_TIM_ConfigClockSource+0x1c>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e0f6      	b.n	8005cde <HAL_TIM_ConfigClockSource+0x20a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005b0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a6f      	ldr	r2, [pc, #444]	; (8005ce8 <HAL_TIM_ConfigClockSource+0x214>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	f000 80c1 	beq.w	8005cb2 <HAL_TIM_ConfigClockSource+0x1de>
 8005b30:	4a6d      	ldr	r2, [pc, #436]	; (8005ce8 <HAL_TIM_ConfigClockSource+0x214>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	f200 80c6 	bhi.w	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b38:	4a6c      	ldr	r2, [pc, #432]	; (8005cec <HAL_TIM_ConfigClockSource+0x218>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	f000 80b9 	beq.w	8005cb2 <HAL_TIM_ConfigClockSource+0x1de>
 8005b40:	4a6a      	ldr	r2, [pc, #424]	; (8005cec <HAL_TIM_ConfigClockSource+0x218>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	f200 80be 	bhi.w	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b48:	4a69      	ldr	r2, [pc, #420]	; (8005cf0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	f000 80b1 	beq.w	8005cb2 <HAL_TIM_ConfigClockSource+0x1de>
 8005b50:	4a67      	ldr	r2, [pc, #412]	; (8005cf0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	f200 80b6 	bhi.w	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b58:	4a66      	ldr	r2, [pc, #408]	; (8005cf4 <HAL_TIM_ConfigClockSource+0x220>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	f000 80a9 	beq.w	8005cb2 <HAL_TIM_ConfigClockSource+0x1de>
 8005b60:	4a64      	ldr	r2, [pc, #400]	; (8005cf4 <HAL_TIM_ConfigClockSource+0x220>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	f200 80ae 	bhi.w	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b68:	4a63      	ldr	r2, [pc, #396]	; (8005cf8 <HAL_TIM_ConfigClockSource+0x224>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	f000 80a1 	beq.w	8005cb2 <HAL_TIM_ConfigClockSource+0x1de>
 8005b70:	4a61      	ldr	r2, [pc, #388]	; (8005cf8 <HAL_TIM_ConfigClockSource+0x224>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	f200 80a6 	bhi.w	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b78:	4a60      	ldr	r2, [pc, #384]	; (8005cfc <HAL_TIM_ConfigClockSource+0x228>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	f000 8099 	beq.w	8005cb2 <HAL_TIM_ConfigClockSource+0x1de>
 8005b80:	4a5e      	ldr	r2, [pc, #376]	; (8005cfc <HAL_TIM_ConfigClockSource+0x228>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	f200 809e 	bhi.w	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b8c:	f000 8091 	beq.w	8005cb2 <HAL_TIM_ConfigClockSource+0x1de>
 8005b90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b94:	f200 8096 	bhi.w	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b9c:	f000 8089 	beq.w	8005cb2 <HAL_TIM_ConfigClockSource+0x1de>
 8005ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba4:	f200 808e 	bhi.w	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bac:	d03e      	beq.n	8005c2c <HAL_TIM_ConfigClockSource+0x158>
 8005bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb2:	f200 8087 	bhi.w	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bba:	f000 8086 	beq.w	8005cca <HAL_TIM_ConfigClockSource+0x1f6>
 8005bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc2:	d87f      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bc4:	2b70      	cmp	r3, #112	; 0x70
 8005bc6:	d01a      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x12a>
 8005bc8:	2b70      	cmp	r3, #112	; 0x70
 8005bca:	d87b      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bcc:	2b60      	cmp	r3, #96	; 0x60
 8005bce:	d050      	beq.n	8005c72 <HAL_TIM_ConfigClockSource+0x19e>
 8005bd0:	2b60      	cmp	r3, #96	; 0x60
 8005bd2:	d877      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bd4:	2b50      	cmp	r3, #80	; 0x50
 8005bd6:	d03c      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x17e>
 8005bd8:	2b50      	cmp	r3, #80	; 0x50
 8005bda:	d873      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d058      	beq.n	8005c92 <HAL_TIM_ConfigClockSource+0x1be>
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d86f      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005be4:	2b30      	cmp	r3, #48	; 0x30
 8005be6:	d064      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x1de>
 8005be8:	2b30      	cmp	r3, #48	; 0x30
 8005bea:	d86b      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d060      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x1de>
 8005bf0:	2b20      	cmp	r3, #32
 8005bf2:	d867      	bhi.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d05c      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x1de>
 8005bf8:	2b10      	cmp	r3, #16
 8005bfa:	d05a      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0x1de>
 8005bfc:	e062      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c0e:	f000 fcf9 	bl	8006604 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	609a      	str	r2, [r3, #8]
      break;
 8005c2a:	e04f      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c3c:	f000 fce2 	bl	8006604 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c4e:	609a      	str	r2, [r3, #8]
      break;
 8005c50:	e03c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f000 fc54 	bl	800650c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2150      	movs	r1, #80	; 0x50
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fcad 	bl	80065ca <TIM_ITRx_SetConfig>
      break;
 8005c70:	e02c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f000 fc73 	bl	800656a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2160      	movs	r1, #96	; 0x60
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fc9d 	bl	80065ca <TIM_ITRx_SetConfig>
      break;
 8005c90:	e01c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f000 fc34 	bl	800650c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2140      	movs	r1, #64	; 0x40
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fc8d 	bl	80065ca <TIM_ITRx_SetConfig>
      break;
 8005cb0:	e00c      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	f000 fc84 	bl	80065ca <TIM_ITRx_SetConfig>
      break;
 8005cc2:	e003      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc8:	e000      	b.n	8005ccc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005cca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	00100070 	.word	0x00100070
 8005cec:	00100060 	.word	0x00100060
 8005cf0:	00100050 	.word	0x00100050
 8005cf4:	00100040 	.word	0x00100040
 8005cf8:	00100030 	.word	0x00100030
 8005cfc:	00100020 	.word	0x00100020

08005d00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a4c      	ldr	r2, [pc, #304]	; (8005e94 <TIM_Base_SetConfig+0x144>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d017      	beq.n	8005d98 <TIM_Base_SetConfig+0x48>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6e:	d013      	beq.n	8005d98 <TIM_Base_SetConfig+0x48>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a49      	ldr	r2, [pc, #292]	; (8005e98 <TIM_Base_SetConfig+0x148>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00f      	beq.n	8005d98 <TIM_Base_SetConfig+0x48>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a48      	ldr	r2, [pc, #288]	; (8005e9c <TIM_Base_SetConfig+0x14c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00b      	beq.n	8005d98 <TIM_Base_SetConfig+0x48>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a47      	ldr	r2, [pc, #284]	; (8005ea0 <TIM_Base_SetConfig+0x150>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d007      	beq.n	8005d98 <TIM_Base_SetConfig+0x48>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a46      	ldr	r2, [pc, #280]	; (8005ea4 <TIM_Base_SetConfig+0x154>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_Base_SetConfig+0x48>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a45      	ldr	r2, [pc, #276]	; (8005ea8 <TIM_Base_SetConfig+0x158>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d108      	bne.n	8005daa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a39      	ldr	r2, [pc, #228]	; (8005e94 <TIM_Base_SetConfig+0x144>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d023      	beq.n	8005dfa <TIM_Base_SetConfig+0xaa>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db8:	d01f      	beq.n	8005dfa <TIM_Base_SetConfig+0xaa>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a36      	ldr	r2, [pc, #216]	; (8005e98 <TIM_Base_SetConfig+0x148>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d01b      	beq.n	8005dfa <TIM_Base_SetConfig+0xaa>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a35      	ldr	r2, [pc, #212]	; (8005e9c <TIM_Base_SetConfig+0x14c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d017      	beq.n	8005dfa <TIM_Base_SetConfig+0xaa>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a34      	ldr	r2, [pc, #208]	; (8005ea0 <TIM_Base_SetConfig+0x150>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d013      	beq.n	8005dfa <TIM_Base_SetConfig+0xaa>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a33      	ldr	r2, [pc, #204]	; (8005ea4 <TIM_Base_SetConfig+0x154>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00f      	beq.n	8005dfa <TIM_Base_SetConfig+0xaa>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a33      	ldr	r2, [pc, #204]	; (8005eac <TIM_Base_SetConfig+0x15c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00b      	beq.n	8005dfa <TIM_Base_SetConfig+0xaa>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a32      	ldr	r2, [pc, #200]	; (8005eb0 <TIM_Base_SetConfig+0x160>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d007      	beq.n	8005dfa <TIM_Base_SetConfig+0xaa>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a31      	ldr	r2, [pc, #196]	; (8005eb4 <TIM_Base_SetConfig+0x164>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d003      	beq.n	8005dfa <TIM_Base_SetConfig+0xaa>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a2c      	ldr	r2, [pc, #176]	; (8005ea8 <TIM_Base_SetConfig+0x158>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d108      	bne.n	8005e0c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a18      	ldr	r2, [pc, #96]	; (8005e94 <TIM_Base_SetConfig+0x144>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d013      	beq.n	8005e60 <TIM_Base_SetConfig+0x110>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a1a      	ldr	r2, [pc, #104]	; (8005ea4 <TIM_Base_SetConfig+0x154>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00f      	beq.n	8005e60 <TIM_Base_SetConfig+0x110>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a1a      	ldr	r2, [pc, #104]	; (8005eac <TIM_Base_SetConfig+0x15c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d00b      	beq.n	8005e60 <TIM_Base_SetConfig+0x110>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a19      	ldr	r2, [pc, #100]	; (8005eb0 <TIM_Base_SetConfig+0x160>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d007      	beq.n	8005e60 <TIM_Base_SetConfig+0x110>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <TIM_Base_SetConfig+0x164>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d003      	beq.n	8005e60 <TIM_Base_SetConfig+0x110>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a13      	ldr	r2, [pc, #76]	; (8005ea8 <TIM_Base_SetConfig+0x158>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d103      	bne.n	8005e68 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d105      	bne.n	8005e86 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f023 0201 	bic.w	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	611a      	str	r2, [r3, #16]
  }
}
 8005e86:	bf00      	nop
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	40000400 	.word	0x40000400
 8005e9c:	40000800 	.word	0x40000800
 8005ea0:	40000c00 	.word	0x40000c00
 8005ea4:	40013400 	.word	0x40013400
 8005ea8:	40015000 	.word	0x40015000
 8005eac:	40014000 	.word	0x40014000
 8005eb0:	40014400 	.word	0x40014400
 8005eb4:	40014800 	.word	0x40014800

08005eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	f023 0201 	bic.w	r2, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0303 	bic.w	r3, r3, #3
 8005ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f023 0302 	bic.w	r3, r3, #2
 8005f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a30      	ldr	r2, [pc, #192]	; (8005fd4 <TIM_OC1_SetConfig+0x11c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d013      	beq.n	8005f40 <TIM_OC1_SetConfig+0x88>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a2f      	ldr	r2, [pc, #188]	; (8005fd8 <TIM_OC1_SetConfig+0x120>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00f      	beq.n	8005f40 <TIM_OC1_SetConfig+0x88>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a2e      	ldr	r2, [pc, #184]	; (8005fdc <TIM_OC1_SetConfig+0x124>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d00b      	beq.n	8005f40 <TIM_OC1_SetConfig+0x88>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a2d      	ldr	r2, [pc, #180]	; (8005fe0 <TIM_OC1_SetConfig+0x128>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d007      	beq.n	8005f40 <TIM_OC1_SetConfig+0x88>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a2c      	ldr	r2, [pc, #176]	; (8005fe4 <TIM_OC1_SetConfig+0x12c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d003      	beq.n	8005f40 <TIM_OC1_SetConfig+0x88>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a2b      	ldr	r2, [pc, #172]	; (8005fe8 <TIM_OC1_SetConfig+0x130>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d10c      	bne.n	8005f5a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 0308 	bic.w	r3, r3, #8
 8005f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f023 0304 	bic.w	r3, r3, #4
 8005f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a1d      	ldr	r2, [pc, #116]	; (8005fd4 <TIM_OC1_SetConfig+0x11c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d013      	beq.n	8005f8a <TIM_OC1_SetConfig+0xd2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a1c      	ldr	r2, [pc, #112]	; (8005fd8 <TIM_OC1_SetConfig+0x120>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00f      	beq.n	8005f8a <TIM_OC1_SetConfig+0xd2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a1b      	ldr	r2, [pc, #108]	; (8005fdc <TIM_OC1_SetConfig+0x124>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00b      	beq.n	8005f8a <TIM_OC1_SetConfig+0xd2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a1a      	ldr	r2, [pc, #104]	; (8005fe0 <TIM_OC1_SetConfig+0x128>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d007      	beq.n	8005f8a <TIM_OC1_SetConfig+0xd2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a19      	ldr	r2, [pc, #100]	; (8005fe4 <TIM_OC1_SetConfig+0x12c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <TIM_OC1_SetConfig+0xd2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a18      	ldr	r2, [pc, #96]	; (8005fe8 <TIM_OC1_SetConfig+0x130>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d111      	bne.n	8005fae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	621a      	str	r2, [r3, #32]
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	40012c00 	.word	0x40012c00
 8005fd8:	40013400 	.word	0x40013400
 8005fdc:	40014000 	.word	0x40014000
 8005fe0:	40014400 	.word	0x40014400
 8005fe4:	40014800 	.word	0x40014800
 8005fe8:	40015000 	.word	0x40015000

08005fec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	f023 0210 	bic.w	r2, r3, #16
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800601a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f023 0320 	bic.w	r3, r3, #32
 800603a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a2c      	ldr	r2, [pc, #176]	; (80060fc <TIM_OC2_SetConfig+0x110>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d007      	beq.n	8006060 <TIM_OC2_SetConfig+0x74>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a2b      	ldr	r2, [pc, #172]	; (8006100 <TIM_OC2_SetConfig+0x114>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d003      	beq.n	8006060 <TIM_OC2_SetConfig+0x74>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a2a      	ldr	r2, [pc, #168]	; (8006104 <TIM_OC2_SetConfig+0x118>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d10d      	bne.n	800607c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	4313      	orrs	r3, r2
 8006072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800607a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a1f      	ldr	r2, [pc, #124]	; (80060fc <TIM_OC2_SetConfig+0x110>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <TIM_OC2_SetConfig+0xc0>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a1e      	ldr	r2, [pc, #120]	; (8006100 <TIM_OC2_SetConfig+0x114>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00f      	beq.n	80060ac <TIM_OC2_SetConfig+0xc0>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a1e      	ldr	r2, [pc, #120]	; (8006108 <TIM_OC2_SetConfig+0x11c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00b      	beq.n	80060ac <TIM_OC2_SetConfig+0xc0>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a1d      	ldr	r2, [pc, #116]	; (800610c <TIM_OC2_SetConfig+0x120>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d007      	beq.n	80060ac <TIM_OC2_SetConfig+0xc0>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a1c      	ldr	r2, [pc, #112]	; (8006110 <TIM_OC2_SetConfig+0x124>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_OC2_SetConfig+0xc0>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a17      	ldr	r2, [pc, #92]	; (8006104 <TIM_OC2_SetConfig+0x118>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d113      	bne.n	80060d4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	621a      	str	r2, [r3, #32]
}
 80060ee:	bf00      	nop
 80060f0:	371c      	adds	r7, #28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40012c00 	.word	0x40012c00
 8006100:	40013400 	.word	0x40013400
 8006104:	40015000 	.word	0x40015000
 8006108:	40014000 	.word	0x40014000
 800610c:	40014400 	.word	0x40014400
 8006110:	40014800 	.word	0x40014800

08006114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0303 	bic.w	r3, r3, #3
 800614e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	021b      	lsls	r3, r3, #8
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a2b      	ldr	r2, [pc, #172]	; (8006220 <TIM_OC3_SetConfig+0x10c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d007      	beq.n	8006186 <TIM_OC3_SetConfig+0x72>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a2a      	ldr	r2, [pc, #168]	; (8006224 <TIM_OC3_SetConfig+0x110>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d003      	beq.n	8006186 <TIM_OC3_SetConfig+0x72>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a29      	ldr	r2, [pc, #164]	; (8006228 <TIM_OC3_SetConfig+0x114>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d10d      	bne.n	80061a2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800618c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a1e      	ldr	r2, [pc, #120]	; (8006220 <TIM_OC3_SetConfig+0x10c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d013      	beq.n	80061d2 <TIM_OC3_SetConfig+0xbe>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a1d      	ldr	r2, [pc, #116]	; (8006224 <TIM_OC3_SetConfig+0x110>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00f      	beq.n	80061d2 <TIM_OC3_SetConfig+0xbe>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a1d      	ldr	r2, [pc, #116]	; (800622c <TIM_OC3_SetConfig+0x118>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00b      	beq.n	80061d2 <TIM_OC3_SetConfig+0xbe>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a1c      	ldr	r2, [pc, #112]	; (8006230 <TIM_OC3_SetConfig+0x11c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d007      	beq.n	80061d2 <TIM_OC3_SetConfig+0xbe>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a1b      	ldr	r2, [pc, #108]	; (8006234 <TIM_OC3_SetConfig+0x120>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d003      	beq.n	80061d2 <TIM_OC3_SetConfig+0xbe>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a16      	ldr	r2, [pc, #88]	; (8006228 <TIM_OC3_SetConfig+0x114>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d113      	bne.n	80061fa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	621a      	str	r2, [r3, #32]
}
 8006214:	bf00      	nop
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	40012c00 	.word	0x40012c00
 8006224:	40013400 	.word	0x40013400
 8006228:	40015000 	.word	0x40015000
 800622c:	40014000 	.word	0x40014000
 8006230:	40014400 	.word	0x40014400
 8006234:	40014800 	.word	0x40014800

08006238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	031b      	lsls	r3, r3, #12
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a2c      	ldr	r2, [pc, #176]	; (8006348 <TIM_OC4_SetConfig+0x110>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <TIM_OC4_SetConfig+0x74>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a2b      	ldr	r2, [pc, #172]	; (800634c <TIM_OC4_SetConfig+0x114>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_OC4_SetConfig+0x74>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a2a      	ldr	r2, [pc, #168]	; (8006350 <TIM_OC4_SetConfig+0x118>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d10d      	bne.n	80062c8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	031b      	lsls	r3, r3, #12
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a1f      	ldr	r2, [pc, #124]	; (8006348 <TIM_OC4_SetConfig+0x110>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d013      	beq.n	80062f8 <TIM_OC4_SetConfig+0xc0>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a1e      	ldr	r2, [pc, #120]	; (800634c <TIM_OC4_SetConfig+0x114>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00f      	beq.n	80062f8 <TIM_OC4_SetConfig+0xc0>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a1e      	ldr	r2, [pc, #120]	; (8006354 <TIM_OC4_SetConfig+0x11c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00b      	beq.n	80062f8 <TIM_OC4_SetConfig+0xc0>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a1d      	ldr	r2, [pc, #116]	; (8006358 <TIM_OC4_SetConfig+0x120>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d007      	beq.n	80062f8 <TIM_OC4_SetConfig+0xc0>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a1c      	ldr	r2, [pc, #112]	; (800635c <TIM_OC4_SetConfig+0x124>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_OC4_SetConfig+0xc0>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a17      	ldr	r2, [pc, #92]	; (8006350 <TIM_OC4_SetConfig+0x118>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d113      	bne.n	8006320 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006306:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	019b      	lsls	r3, r3, #6
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4313      	orrs	r3, r2
 8006312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	019b      	lsls	r3, r3, #6
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40012c00 	.word	0x40012c00
 800634c:	40013400 	.word	0x40013400
 8006350:	40015000 	.word	0x40015000
 8006354:	40014000 	.word	0x40014000
 8006358:	40014400 	.word	0x40014400
 800635c:	40014800 	.word	0x40014800

08006360 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800638e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	041b      	lsls	r3, r3, #16
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a19      	ldr	r2, [pc, #100]	; (800641c <TIM_OC5_SetConfig+0xbc>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d013      	beq.n	80063e2 <TIM_OC5_SetConfig+0x82>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a18      	ldr	r2, [pc, #96]	; (8006420 <TIM_OC5_SetConfig+0xc0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00f      	beq.n	80063e2 <TIM_OC5_SetConfig+0x82>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a17      	ldr	r2, [pc, #92]	; (8006424 <TIM_OC5_SetConfig+0xc4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00b      	beq.n	80063e2 <TIM_OC5_SetConfig+0x82>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a16      	ldr	r2, [pc, #88]	; (8006428 <TIM_OC5_SetConfig+0xc8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d007      	beq.n	80063e2 <TIM_OC5_SetConfig+0x82>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a15      	ldr	r2, [pc, #84]	; (800642c <TIM_OC5_SetConfig+0xcc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d003      	beq.n	80063e2 <TIM_OC5_SetConfig+0x82>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a14      	ldr	r2, [pc, #80]	; (8006430 <TIM_OC5_SetConfig+0xd0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d109      	bne.n	80063f6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	021b      	lsls	r3, r3, #8
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	621a      	str	r2, [r3, #32]
}
 8006410:	bf00      	nop
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	40012c00 	.word	0x40012c00
 8006420:	40013400 	.word	0x40013400
 8006424:	40014000 	.word	0x40014000
 8006428:	40014400 	.word	0x40014400
 800642c:	40014800 	.word	0x40014800
 8006430:	40015000 	.word	0x40015000

08006434 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800645a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	4313      	orrs	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800647a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	051b      	lsls	r3, r3, #20
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a1a      	ldr	r2, [pc, #104]	; (80064f4 <TIM_OC6_SetConfig+0xc0>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d013      	beq.n	80064b8 <TIM_OC6_SetConfig+0x84>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a19      	ldr	r2, [pc, #100]	; (80064f8 <TIM_OC6_SetConfig+0xc4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00f      	beq.n	80064b8 <TIM_OC6_SetConfig+0x84>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a18      	ldr	r2, [pc, #96]	; (80064fc <TIM_OC6_SetConfig+0xc8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00b      	beq.n	80064b8 <TIM_OC6_SetConfig+0x84>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a17      	ldr	r2, [pc, #92]	; (8006500 <TIM_OC6_SetConfig+0xcc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d007      	beq.n	80064b8 <TIM_OC6_SetConfig+0x84>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a16      	ldr	r2, [pc, #88]	; (8006504 <TIM_OC6_SetConfig+0xd0>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <TIM_OC6_SetConfig+0x84>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a15      	ldr	r2, [pc, #84]	; (8006508 <TIM_OC6_SetConfig+0xd4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d109      	bne.n	80064cc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	029b      	lsls	r3, r3, #10
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40012c00 	.word	0x40012c00
 80064f8:	40013400 	.word	0x40013400
 80064fc:	40014000 	.word	0x40014000
 8006500:	40014400 	.word	0x40014400
 8006504:	40014800 	.word	0x40014800
 8006508:	40015000 	.word	0x40015000

0800650c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	f023 0201 	bic.w	r2, r3, #1
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f023 030a 	bic.w	r3, r3, #10
 8006548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800656a:	b480      	push	{r7}
 800656c:	b087      	sub	sp, #28
 800656e:	af00      	add	r7, sp, #0
 8006570:	60f8      	str	r0, [r7, #12]
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	f023 0210 	bic.w	r2, r3, #16
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	031b      	lsls	r3, r3, #12
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	011b      	lsls	r3, r3, #4
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	621a      	str	r2, [r3, #32]
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b085      	sub	sp, #20
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80065e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	f043 0307 	orr.w	r3, r3, #7
 80065f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	609a      	str	r2, [r3, #8]
}
 80065f8:	bf00      	nop
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800661e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	021a      	lsls	r2, r3, #8
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	431a      	orrs	r2, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4313      	orrs	r3, r2
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	4313      	orrs	r3, r2
 8006630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	609a      	str	r2, [r3, #8]
}
 8006638:	bf00      	nop
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f003 031f 	and.w	r3, r3, #31
 8006656:	2201      	movs	r2, #1
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1a      	ldr	r2, [r3, #32]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	43db      	mvns	r3, r3
 8006666:	401a      	ands	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a1a      	ldr	r2, [r3, #32]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 031f 	and.w	r3, r3, #31
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	fa01 f303 	lsl.w	r3, r1, r3
 800667c:	431a      	orrs	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	621a      	str	r2, [r3, #32]
}
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
	...

08006690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e074      	b.n	8006792 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a34      	ldr	r2, [pc, #208]	; (80067a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d009      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a33      	ldr	r2, [pc, #204]	; (80067a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d004      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a31      	ldr	r2, [pc, #196]	; (80067a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d108      	bne.n	80066f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80066fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a21      	ldr	r2, [pc, #132]	; (80067a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d022      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006728:	d01d      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1f      	ldr	r2, [pc, #124]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d018      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a1d      	ldr	r2, [pc, #116]	; (80067b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d013      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a1c      	ldr	r2, [pc, #112]	; (80067b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00e      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a15      	ldr	r2, [pc, #84]	; (80067a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d009      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a18      	ldr	r2, [pc, #96]	; (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d004      	beq.n	8006766 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a11      	ldr	r2, [pc, #68]	; (80067a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d10c      	bne.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800676c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	4313      	orrs	r3, r2
 8006776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40012c00 	.word	0x40012c00
 80067a4:	40013400 	.word	0x40013400
 80067a8:	40015000 	.word	0x40015000
 80067ac:	40000400 	.word	0x40000400
 80067b0:	40000800 	.word	0x40000800
 80067b4:	40000c00 	.word	0x40000c00
 80067b8:	40014000 	.word	0x40014000

080067bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e042      	b.n	80068e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006860:	2b00      	cmp	r3, #0
 8006862:	d106      	bne.n	8006872 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7fb f825 	bl	80018bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2224      	movs	r2, #36	; 0x24
 8006876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0201 	bic.w	r2, r2, #1
 8006888:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 ff4c 	bl	8007730 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fc4d 	bl	8007138 <UART_SetConfig>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d101      	bne.n	80068a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e01b      	b.n	80068e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0201 	orr.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 ffcb 	bl	8007874 <UART_CheckIdleState>
 80068de:	4603      	mov	r3, r0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08a      	sub	sp, #40	; 0x28
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	603b      	str	r3, [r7, #0]
 80068f4:	4613      	mov	r3, r2
 80068f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fe:	2b20      	cmp	r3, #32
 8006900:	d17b      	bne.n	80069fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <HAL_UART_Transmit+0x26>
 8006908:	88fb      	ldrh	r3, [r7, #6]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e074      	b.n	80069fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2221      	movs	r2, #33	; 0x21
 800691e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006922:	f7fb fa11 	bl	8001d48 <HAL_GetTick>
 8006926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	88fa      	ldrh	r2, [r7, #6]
 800692c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	88fa      	ldrh	r2, [r7, #6]
 8006934:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006940:	d108      	bne.n	8006954 <HAL_UART_Transmit+0x6c>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d104      	bne.n	8006954 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800694a:	2300      	movs	r3, #0
 800694c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	e003      	b.n	800695c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006958:	2300      	movs	r3, #0
 800695a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800695c:	e030      	b.n	80069c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2200      	movs	r2, #0
 8006966:	2180      	movs	r1, #128	; 0x80
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f001 f82d 	bl	80079c8 <UART_WaitOnFlagUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2220      	movs	r2, #32
 8006978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e03d      	b.n	80069fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10b      	bne.n	800699e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006994:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	3302      	adds	r3, #2
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	e007      	b.n	80069ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	781a      	ldrb	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	3301      	adds	r3, #1
 80069ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	3b01      	subs	r3, #1
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1c8      	bne.n	800695e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2200      	movs	r2, #0
 80069d4:	2140      	movs	r1, #64	; 0x40
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 fff6 	bl	80079c8 <UART_WaitOnFlagUntilTimeout>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e006      	b.n	80069fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2220      	movs	r2, #32
 80069f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e000      	b.n	80069fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80069fa:	2302      	movs	r3, #2
  }
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3720      	adds	r7, #32
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08a      	sub	sp, #40	; 0x28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d137      	bne.n	8006a8c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d002      	beq.n	8006a28 <HAL_UART_Receive_DMA+0x24>
 8006a22:	88fb      	ldrh	r3, [r7, #6]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e030      	b.n	8006a8e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a18      	ldr	r2, [pc, #96]	; (8006a98 <HAL_UART_Receive_DMA+0x94>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d01f      	beq.n	8006a7c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d018      	beq.n	8006a7c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	613b      	str	r3, [r7, #16]
   return(result);
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	623b      	str	r3, [r7, #32]
 8006a6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	69f9      	ldr	r1, [r7, #28]
 8006a6e:	6a3a      	ldr	r2, [r7, #32]
 8006a70:	e841 2300 	strex	r3, r2, [r1]
 8006a74:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e6      	bne.n	8006a4a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a7c:	88fb      	ldrh	r3, [r7, #6]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f001 f80e 	bl	8007aa4 <UART_Start_Receive_DMA>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	e000      	b.n	8006a8e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a8c:	2302      	movs	r3, #2
  }
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3728      	adds	r7, #40	; 0x28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40008000 	.word	0x40008000

08006a9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b0ba      	sub	sp, #232	; 0xe8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ac2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006ac6:	f640 030f 	movw	r3, #2063	; 0x80f
 8006aca:	4013      	ands	r3, r2
 8006acc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d11b      	bne.n	8006b10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d015      	beq.n	8006b10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae8:	f003 0320 	and.w	r3, r3, #32
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d105      	bne.n	8006afc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d009      	beq.n	8006b10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 82e3 	beq.w	80070cc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
      }
      return;
 8006b0e:	e2dd      	b.n	80070cc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 8123 	beq.w	8006d60 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b1e:	4b8d      	ldr	r3, [pc, #564]	; (8006d54 <HAL_UART_IRQHandler+0x2b8>)
 8006b20:	4013      	ands	r3, r2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d106      	bne.n	8006b34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b2a:	4b8b      	ldr	r3, [pc, #556]	; (8006d58 <HAL_UART_IRQHandler+0x2bc>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 8116 	beq.w	8006d60 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d011      	beq.n	8006b64 <HAL_UART_IRQHandler+0xc8>
 8006b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2201      	movs	r2, #1
 8006b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5a:	f043 0201 	orr.w	r2, r3, #1
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d011      	beq.n	8006b94 <HAL_UART_IRQHandler+0xf8>
 8006b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2202      	movs	r2, #2
 8006b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8a:	f043 0204 	orr.w	r2, r3, #4
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d011      	beq.n	8006bc4 <HAL_UART_IRQHandler+0x128>
 8006ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00b      	beq.n	8006bc4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bba:	f043 0202 	orr.w	r2, r3, #2
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d017      	beq.n	8006c00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd4:	f003 0320 	and.w	r3, r3, #32
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d105      	bne.n	8006be8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006bdc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006be0:	4b5c      	ldr	r3, [pc, #368]	; (8006d54 <HAL_UART_IRQHandler+0x2b8>)
 8006be2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00b      	beq.n	8006c00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2208      	movs	r2, #8
 8006bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf6:	f043 0208 	orr.w	r2, r3, #8
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d012      	beq.n	8006c32 <HAL_UART_IRQHandler+0x196>
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00c      	beq.n	8006c32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c28:	f043 0220 	orr.w	r2, r3, #32
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 8249 	beq.w	80070d0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c42:	f003 0320 	and.w	r3, r3, #32
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d013      	beq.n	8006c72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d105      	bne.n	8006c62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d007      	beq.n	8006c72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c86:	2b40      	cmp	r3, #64	; 0x40
 8006c88:	d005      	beq.n	8006c96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d054      	beq.n	8006d40 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 ffeb 	bl	8007c72 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca6:	2b40      	cmp	r3, #64	; 0x40
 8006ca8:	d146      	bne.n	8006d38 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3308      	adds	r3, #8
 8006cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ce2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1d9      	bne.n	8006caa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d017      	beq.n	8006d30 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d06:	4a15      	ldr	r2, [pc, #84]	; (8006d5c <HAL_UART_IRQHandler+0x2c0>)
 8006d08:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fc fe15 	bl	8003940 <HAL_DMA_Abort_IT>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d019      	beq.n	8006d50 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2e:	e00f      	b.n	8006d50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f9eb 	bl	800710c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d36:	e00b      	b.n	8006d50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f9e7 	bl	800710c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d3e:	e007      	b.n	8006d50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f9e3 	bl	800710c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006d4e:	e1bf      	b.n	80070d0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d50:	bf00      	nop
    return;
 8006d52:	e1bd      	b.n	80070d0 <HAL_UART_IRQHandler+0x634>
 8006d54:	10000001 	.word	0x10000001
 8006d58:	04000120 	.word	0x04000120
 8006d5c:	08007f29 	.word	0x08007f29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	f040 8153 	bne.w	8007010 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d6e:	f003 0310 	and.w	r3, r3, #16
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 814c 	beq.w	8007010 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d7c:	f003 0310 	and.w	r3, r3, #16
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 8145 	beq.w	8007010 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2210      	movs	r2, #16
 8006d8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d98:	2b40      	cmp	r3, #64	; 0x40
 8006d9a:	f040 80bb 	bne.w	8006f14 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006dac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 818f 	beq.w	80070d4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	f080 8187 	bcs.w	80070d4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f040 8087 	bne.w	8006ef2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1da      	bne.n	8006de4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3308      	adds	r3, #8
 8006e34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e40:	f023 0301 	bic.w	r3, r3, #1
 8006e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e5e:	e841 2300 	strex	r3, r2, [r1]
 8006e62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1e1      	bne.n	8006e2e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3308      	adds	r3, #8
 8006e70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e74:	e853 3f00 	ldrex	r3, [r3]
 8006e78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3308      	adds	r3, #8
 8006e8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e3      	bne.n	8006e6a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ec0:	f023 0310 	bic.w	r3, r3, #16
 8006ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ed2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ed4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ed8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e4      	bne.n	8006eb0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fc fcce 	bl	800388e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f907 	bl	8007120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f12:	e0df      	b.n	80070d4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80d1 	beq.w	80070d8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006f36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 80cc 	beq.w	80070d8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f62:	647b      	str	r3, [r7, #68]	; 0x44
 8006f64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f6a:	e841 2300 	strex	r3, r2, [r1]
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1e4      	bne.n	8006f40 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	623b      	str	r3, [r7, #32]
   return(result);
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f8c:	f023 0301 	bic.w	r3, r3, #1
 8006f90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f9e:	633a      	str	r2, [r7, #48]	; 0x30
 8006fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fa6:	e841 2300 	strex	r3, r2, [r1]
 8006faa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e1      	bne.n	8006f76 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	e853 3f00 	ldrex	r3, [r3]
 8006fd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0310 	bic.w	r3, r3, #16
 8006fda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fe8:	61fb      	str	r3, [r7, #28]
 8006fea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	69b9      	ldr	r1, [r7, #24]
 8006fee:	69fa      	ldr	r2, [r7, #28]
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e4      	bne.n	8006fc6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007002:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f889 	bl	8007120 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800700e:	e063      	b.n	80070d8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00e      	beq.n	800703a <HAL_UART_IRQHandler+0x59e>
 800701c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d008      	beq.n	800703a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007030:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 ffb9 	bl	8007faa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007038:	e051      	b.n	80070de <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800703a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800703e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007042:	2b00      	cmp	r3, #0
 8007044:	d014      	beq.n	8007070 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800704a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704e:	2b00      	cmp	r3, #0
 8007050:	d105      	bne.n	800705e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d008      	beq.n	8007070 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007062:	2b00      	cmp	r3, #0
 8007064:	d03a      	beq.n	80070dc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	4798      	blx	r3
    }
    return;
 800706e:	e035      	b.n	80070dc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007078:	2b00      	cmp	r3, #0
 800707a:	d009      	beq.n	8007090 <HAL_UART_IRQHandler+0x5f4>
 800707c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 ff63 	bl	8007f54 <UART_EndTransmit_IT>
    return;
 800708e:	e026      	b.n	80070de <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d009      	beq.n	80070b0 <HAL_UART_IRQHandler+0x614>
 800709c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 ff92 	bl	8007fd2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070ae:	e016      	b.n	80070de <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80070b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d010      	beq.n	80070de <HAL_UART_IRQHandler+0x642>
 80070bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	da0c      	bge.n	80070de <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 ff7a 	bl	8007fbe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070ca:	e008      	b.n	80070de <HAL_UART_IRQHandler+0x642>
      return;
 80070cc:	bf00      	nop
 80070ce:	e006      	b.n	80070de <HAL_UART_IRQHandler+0x642>
    return;
 80070d0:	bf00      	nop
 80070d2:	e004      	b.n	80070de <HAL_UART_IRQHandler+0x642>
      return;
 80070d4:	bf00      	nop
 80070d6:	e002      	b.n	80070de <HAL_UART_IRQHandler+0x642>
      return;
 80070d8:	bf00      	nop
 80070da:	e000      	b.n	80070de <HAL_UART_IRQHandler+0x642>
    return;
 80070dc:	bf00      	nop
  }
}
 80070de:	37e8      	adds	r7, #232	; 0xe8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800713c:	b08c      	sub	sp, #48	; 0x30
 800713e:	af00      	add	r7, sp, #0
 8007140:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	431a      	orrs	r2, r3
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	431a      	orrs	r2, r3
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	4313      	orrs	r3, r2
 800715e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	4baa      	ldr	r3, [pc, #680]	; (8007410 <UART_SetConfig+0x2d8>)
 8007168:	4013      	ands	r3, r2
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	6812      	ldr	r2, [r2, #0]
 800716e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007170:	430b      	orrs	r3, r1
 8007172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a9f      	ldr	r2, [pc, #636]	; (8007414 <UART_SetConfig+0x2dc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d004      	beq.n	80071a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a0:	4313      	orrs	r3, r2
 80071a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80071ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	6812      	ldr	r2, [r2, #0]
 80071b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071b8:	430b      	orrs	r3, r1
 80071ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c2:	f023 010f 	bic.w	r1, r3, #15
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a90      	ldr	r2, [pc, #576]	; (8007418 <UART_SetConfig+0x2e0>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d125      	bne.n	8007228 <UART_SetConfig+0xf0>
 80071dc:	4b8f      	ldr	r3, [pc, #572]	; (800741c <UART_SetConfig+0x2e4>)
 80071de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e2:	f003 0303 	and.w	r3, r3, #3
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d81a      	bhi.n	8007220 <UART_SetConfig+0xe8>
 80071ea:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <UART_SetConfig+0xb8>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	08007201 	.word	0x08007201
 80071f4:	08007211 	.word	0x08007211
 80071f8:	08007209 	.word	0x08007209
 80071fc:	08007219 	.word	0x08007219
 8007200:	2301      	movs	r3, #1
 8007202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007206:	e116      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007208:	2302      	movs	r3, #2
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800720e:	e112      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007210:	2304      	movs	r3, #4
 8007212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007216:	e10e      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007218:	2308      	movs	r3, #8
 800721a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800721e:	e10a      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007220:	2310      	movs	r3, #16
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007226:	e106      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a7c      	ldr	r2, [pc, #496]	; (8007420 <UART_SetConfig+0x2e8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d138      	bne.n	80072a4 <UART_SetConfig+0x16c>
 8007232:	4b7a      	ldr	r3, [pc, #488]	; (800741c <UART_SetConfig+0x2e4>)
 8007234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007238:	f003 030c 	and.w	r3, r3, #12
 800723c:	2b0c      	cmp	r3, #12
 800723e:	d82d      	bhi.n	800729c <UART_SetConfig+0x164>
 8007240:	a201      	add	r2, pc, #4	; (adr r2, 8007248 <UART_SetConfig+0x110>)
 8007242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007246:	bf00      	nop
 8007248:	0800727d 	.word	0x0800727d
 800724c:	0800729d 	.word	0x0800729d
 8007250:	0800729d 	.word	0x0800729d
 8007254:	0800729d 	.word	0x0800729d
 8007258:	0800728d 	.word	0x0800728d
 800725c:	0800729d 	.word	0x0800729d
 8007260:	0800729d 	.word	0x0800729d
 8007264:	0800729d 	.word	0x0800729d
 8007268:	08007285 	.word	0x08007285
 800726c:	0800729d 	.word	0x0800729d
 8007270:	0800729d 	.word	0x0800729d
 8007274:	0800729d 	.word	0x0800729d
 8007278:	08007295 	.word	0x08007295
 800727c:	2300      	movs	r3, #0
 800727e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007282:	e0d8      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007284:	2302      	movs	r3, #2
 8007286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800728a:	e0d4      	b.n	8007436 <UART_SetConfig+0x2fe>
 800728c:	2304      	movs	r3, #4
 800728e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007292:	e0d0      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007294:	2308      	movs	r3, #8
 8007296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800729a:	e0cc      	b.n	8007436 <UART_SetConfig+0x2fe>
 800729c:	2310      	movs	r3, #16
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072a2:	e0c8      	b.n	8007436 <UART_SetConfig+0x2fe>
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a5e      	ldr	r2, [pc, #376]	; (8007424 <UART_SetConfig+0x2ec>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d125      	bne.n	80072fa <UART_SetConfig+0x1c2>
 80072ae:	4b5b      	ldr	r3, [pc, #364]	; (800741c <UART_SetConfig+0x2e4>)
 80072b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072b8:	2b30      	cmp	r3, #48	; 0x30
 80072ba:	d016      	beq.n	80072ea <UART_SetConfig+0x1b2>
 80072bc:	2b30      	cmp	r3, #48	; 0x30
 80072be:	d818      	bhi.n	80072f2 <UART_SetConfig+0x1ba>
 80072c0:	2b20      	cmp	r3, #32
 80072c2:	d00a      	beq.n	80072da <UART_SetConfig+0x1a2>
 80072c4:	2b20      	cmp	r3, #32
 80072c6:	d814      	bhi.n	80072f2 <UART_SetConfig+0x1ba>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <UART_SetConfig+0x19a>
 80072cc:	2b10      	cmp	r3, #16
 80072ce:	d008      	beq.n	80072e2 <UART_SetConfig+0x1aa>
 80072d0:	e00f      	b.n	80072f2 <UART_SetConfig+0x1ba>
 80072d2:	2300      	movs	r3, #0
 80072d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d8:	e0ad      	b.n	8007436 <UART_SetConfig+0x2fe>
 80072da:	2302      	movs	r3, #2
 80072dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e0:	e0a9      	b.n	8007436 <UART_SetConfig+0x2fe>
 80072e2:	2304      	movs	r3, #4
 80072e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e8:	e0a5      	b.n	8007436 <UART_SetConfig+0x2fe>
 80072ea:	2308      	movs	r3, #8
 80072ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072f0:	e0a1      	b.n	8007436 <UART_SetConfig+0x2fe>
 80072f2:	2310      	movs	r3, #16
 80072f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072f8:	e09d      	b.n	8007436 <UART_SetConfig+0x2fe>
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a4a      	ldr	r2, [pc, #296]	; (8007428 <UART_SetConfig+0x2f0>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d125      	bne.n	8007350 <UART_SetConfig+0x218>
 8007304:	4b45      	ldr	r3, [pc, #276]	; (800741c <UART_SetConfig+0x2e4>)
 8007306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800730a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800730e:	2bc0      	cmp	r3, #192	; 0xc0
 8007310:	d016      	beq.n	8007340 <UART_SetConfig+0x208>
 8007312:	2bc0      	cmp	r3, #192	; 0xc0
 8007314:	d818      	bhi.n	8007348 <UART_SetConfig+0x210>
 8007316:	2b80      	cmp	r3, #128	; 0x80
 8007318:	d00a      	beq.n	8007330 <UART_SetConfig+0x1f8>
 800731a:	2b80      	cmp	r3, #128	; 0x80
 800731c:	d814      	bhi.n	8007348 <UART_SetConfig+0x210>
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <UART_SetConfig+0x1f0>
 8007322:	2b40      	cmp	r3, #64	; 0x40
 8007324:	d008      	beq.n	8007338 <UART_SetConfig+0x200>
 8007326:	e00f      	b.n	8007348 <UART_SetConfig+0x210>
 8007328:	2300      	movs	r3, #0
 800732a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800732e:	e082      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007330:	2302      	movs	r3, #2
 8007332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007336:	e07e      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007338:	2304      	movs	r3, #4
 800733a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733e:	e07a      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007340:	2308      	movs	r3, #8
 8007342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007346:	e076      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007348:	2310      	movs	r3, #16
 800734a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800734e:	e072      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a35      	ldr	r2, [pc, #212]	; (800742c <UART_SetConfig+0x2f4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d12a      	bne.n	80073b0 <UART_SetConfig+0x278>
 800735a:	4b30      	ldr	r3, [pc, #192]	; (800741c <UART_SetConfig+0x2e4>)
 800735c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007368:	d01a      	beq.n	80073a0 <UART_SetConfig+0x268>
 800736a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800736e:	d81b      	bhi.n	80073a8 <UART_SetConfig+0x270>
 8007370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007374:	d00c      	beq.n	8007390 <UART_SetConfig+0x258>
 8007376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800737a:	d815      	bhi.n	80073a8 <UART_SetConfig+0x270>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <UART_SetConfig+0x250>
 8007380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007384:	d008      	beq.n	8007398 <UART_SetConfig+0x260>
 8007386:	e00f      	b.n	80073a8 <UART_SetConfig+0x270>
 8007388:	2300      	movs	r3, #0
 800738a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800738e:	e052      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007390:	2302      	movs	r3, #2
 8007392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007396:	e04e      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007398:	2304      	movs	r3, #4
 800739a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800739e:	e04a      	b.n	8007436 <UART_SetConfig+0x2fe>
 80073a0:	2308      	movs	r3, #8
 80073a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a6:	e046      	b.n	8007436 <UART_SetConfig+0x2fe>
 80073a8:	2310      	movs	r3, #16
 80073aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ae:	e042      	b.n	8007436 <UART_SetConfig+0x2fe>
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a17      	ldr	r2, [pc, #92]	; (8007414 <UART_SetConfig+0x2dc>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d13a      	bne.n	8007430 <UART_SetConfig+0x2f8>
 80073ba:	4b18      	ldr	r3, [pc, #96]	; (800741c <UART_SetConfig+0x2e4>)
 80073bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073c8:	d01a      	beq.n	8007400 <UART_SetConfig+0x2c8>
 80073ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073ce:	d81b      	bhi.n	8007408 <UART_SetConfig+0x2d0>
 80073d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073d4:	d00c      	beq.n	80073f0 <UART_SetConfig+0x2b8>
 80073d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073da:	d815      	bhi.n	8007408 <UART_SetConfig+0x2d0>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <UART_SetConfig+0x2b0>
 80073e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e4:	d008      	beq.n	80073f8 <UART_SetConfig+0x2c0>
 80073e6:	e00f      	b.n	8007408 <UART_SetConfig+0x2d0>
 80073e8:	2300      	movs	r3, #0
 80073ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ee:	e022      	b.n	8007436 <UART_SetConfig+0x2fe>
 80073f0:	2302      	movs	r3, #2
 80073f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073f6:	e01e      	b.n	8007436 <UART_SetConfig+0x2fe>
 80073f8:	2304      	movs	r3, #4
 80073fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073fe:	e01a      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007400:	2308      	movs	r3, #8
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007406:	e016      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007408:	2310      	movs	r3, #16
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800740e:	e012      	b.n	8007436 <UART_SetConfig+0x2fe>
 8007410:	cfff69f3 	.word	0xcfff69f3
 8007414:	40008000 	.word	0x40008000
 8007418:	40013800 	.word	0x40013800
 800741c:	40021000 	.word	0x40021000
 8007420:	40004400 	.word	0x40004400
 8007424:	40004800 	.word	0x40004800
 8007428:	40004c00 	.word	0x40004c00
 800742c:	40005000 	.word	0x40005000
 8007430:	2310      	movs	r3, #16
 8007432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4aae      	ldr	r2, [pc, #696]	; (80076f4 <UART_SetConfig+0x5bc>)
 800743c:	4293      	cmp	r3, r2
 800743e:	f040 8097 	bne.w	8007570 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007442:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007446:	2b08      	cmp	r3, #8
 8007448:	d823      	bhi.n	8007492 <UART_SetConfig+0x35a>
 800744a:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <UART_SetConfig+0x318>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	08007475 	.word	0x08007475
 8007454:	08007493 	.word	0x08007493
 8007458:	0800747d 	.word	0x0800747d
 800745c:	08007493 	.word	0x08007493
 8007460:	08007483 	.word	0x08007483
 8007464:	08007493 	.word	0x08007493
 8007468:	08007493 	.word	0x08007493
 800746c:	08007493 	.word	0x08007493
 8007470:	0800748b 	.word	0x0800748b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007474:	f7fd fb56 	bl	8004b24 <HAL_RCC_GetPCLK1Freq>
 8007478:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800747a:	e010      	b.n	800749e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800747c:	4b9e      	ldr	r3, [pc, #632]	; (80076f8 <UART_SetConfig+0x5c0>)
 800747e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007480:	e00d      	b.n	800749e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007482:	f7fd fae1 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8007486:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007488:	e009      	b.n	800749e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800748a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007490:	e005      	b.n	800749e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800749c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 8130 	beq.w	8007706 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	4a94      	ldr	r2, [pc, #592]	; (80076fc <UART_SetConfig+0x5c4>)
 80074ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074b0:	461a      	mov	r2, r3
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	4413      	add	r3, r2
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d305      	bcc.n	80074d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d903      	bls.n	80074de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074dc:	e113      	b.n	8007706 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	2200      	movs	r2, #0
 80074e2:	60bb      	str	r3, [r7, #8]
 80074e4:	60fa      	str	r2, [r7, #12]
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	4a84      	ldr	r2, [pc, #528]	; (80076fc <UART_SetConfig+0x5c4>)
 80074ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2200      	movs	r2, #0
 80074f4:	603b      	str	r3, [r7, #0]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007500:	f7f9 faa8 	bl	8000a54 <__aeabi_uldivmod>
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
 8007508:	4610      	mov	r0, r2
 800750a:	4619      	mov	r1, r3
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	020b      	lsls	r3, r1, #8
 8007516:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800751a:	0202      	lsls	r2, r0, #8
 800751c:	6979      	ldr	r1, [r7, #20]
 800751e:	6849      	ldr	r1, [r1, #4]
 8007520:	0849      	lsrs	r1, r1, #1
 8007522:	2000      	movs	r0, #0
 8007524:	460c      	mov	r4, r1
 8007526:	4605      	mov	r5, r0
 8007528:	eb12 0804 	adds.w	r8, r2, r4
 800752c:	eb43 0905 	adc.w	r9, r3, r5
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	469a      	mov	sl, r3
 8007538:	4693      	mov	fp, r2
 800753a:	4652      	mov	r2, sl
 800753c:	465b      	mov	r3, fp
 800753e:	4640      	mov	r0, r8
 8007540:	4649      	mov	r1, r9
 8007542:	f7f9 fa87 	bl	8000a54 <__aeabi_uldivmod>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	4613      	mov	r3, r2
 800754c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007554:	d308      	bcc.n	8007568 <UART_SetConfig+0x430>
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800755c:	d204      	bcs.n	8007568 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6a3a      	ldr	r2, [r7, #32]
 8007564:	60da      	str	r2, [r3, #12]
 8007566:	e0ce      	b.n	8007706 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800756e:	e0ca      	b.n	8007706 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007578:	d166      	bne.n	8007648 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800757a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800757e:	2b08      	cmp	r3, #8
 8007580:	d827      	bhi.n	80075d2 <UART_SetConfig+0x49a>
 8007582:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <UART_SetConfig+0x450>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	080075ad 	.word	0x080075ad
 800758c:	080075b5 	.word	0x080075b5
 8007590:	080075bd 	.word	0x080075bd
 8007594:	080075d3 	.word	0x080075d3
 8007598:	080075c3 	.word	0x080075c3
 800759c:	080075d3 	.word	0x080075d3
 80075a0:	080075d3 	.word	0x080075d3
 80075a4:	080075d3 	.word	0x080075d3
 80075a8:	080075cb 	.word	0x080075cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075ac:	f7fd faba 	bl	8004b24 <HAL_RCC_GetPCLK1Freq>
 80075b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075b2:	e014      	b.n	80075de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075b4:	f7fd facc 	bl	8004b50 <HAL_RCC_GetPCLK2Freq>
 80075b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075ba:	e010      	b.n	80075de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075bc:	4b4e      	ldr	r3, [pc, #312]	; (80076f8 <UART_SetConfig+0x5c0>)
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075c0:	e00d      	b.n	80075de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075c2:	f7fd fa41 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 80075c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075c8:	e009      	b.n	80075de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075d0:	e005      	b.n	80075de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 8090 	beq.w	8007706 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	4a44      	ldr	r2, [pc, #272]	; (80076fc <UART_SetConfig+0x5c4>)
 80075ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075f0:	461a      	mov	r2, r3
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80075f8:	005a      	lsls	r2, r3, #1
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	085b      	lsrs	r3, r3, #1
 8007600:	441a      	add	r2, r3
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	fbb2 f3f3 	udiv	r3, r2, r3
 800760a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	2b0f      	cmp	r3, #15
 8007610:	d916      	bls.n	8007640 <UART_SetConfig+0x508>
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007618:	d212      	bcs.n	8007640 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	b29b      	uxth	r3, r3
 800761e:	f023 030f 	bic.w	r3, r3, #15
 8007622:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	085b      	lsrs	r3, r3, #1
 8007628:	b29b      	uxth	r3, r3
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	b29a      	uxth	r2, r3
 8007630:	8bfb      	ldrh	r3, [r7, #30]
 8007632:	4313      	orrs	r3, r2
 8007634:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	8bfa      	ldrh	r2, [r7, #30]
 800763c:	60da      	str	r2, [r3, #12]
 800763e:	e062      	b.n	8007706 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007646:	e05e      	b.n	8007706 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007648:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800764c:	2b08      	cmp	r3, #8
 800764e:	d828      	bhi.n	80076a2 <UART_SetConfig+0x56a>
 8007650:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <UART_SetConfig+0x520>)
 8007652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007656:	bf00      	nop
 8007658:	0800767d 	.word	0x0800767d
 800765c:	08007685 	.word	0x08007685
 8007660:	0800768d 	.word	0x0800768d
 8007664:	080076a3 	.word	0x080076a3
 8007668:	08007693 	.word	0x08007693
 800766c:	080076a3 	.word	0x080076a3
 8007670:	080076a3 	.word	0x080076a3
 8007674:	080076a3 	.word	0x080076a3
 8007678:	0800769b 	.word	0x0800769b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800767c:	f7fd fa52 	bl	8004b24 <HAL_RCC_GetPCLK1Freq>
 8007680:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007682:	e014      	b.n	80076ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007684:	f7fd fa64 	bl	8004b50 <HAL_RCC_GetPCLK2Freq>
 8007688:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800768a:	e010      	b.n	80076ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800768c:	4b1a      	ldr	r3, [pc, #104]	; (80076f8 <UART_SetConfig+0x5c0>)
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007690:	e00d      	b.n	80076ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007692:	f7fd f9d9 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8007696:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007698:	e009      	b.n	80076ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800769a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076a0:	e005      	b.n	80076ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80076ac:	bf00      	nop
    }

    if (pclk != 0U)
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d028      	beq.n	8007706 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	4a10      	ldr	r2, [pc, #64]	; (80076fc <UART_SetConfig+0x5c4>)
 80076ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076be:	461a      	mov	r2, r3
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	085b      	lsrs	r3, r3, #1
 80076cc:	441a      	add	r2, r3
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	2b0f      	cmp	r3, #15
 80076dc:	d910      	bls.n	8007700 <UART_SetConfig+0x5c8>
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e4:	d20c      	bcs.n	8007700 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60da      	str	r2, [r3, #12]
 80076f0:	e009      	b.n	8007706 <UART_SetConfig+0x5ce>
 80076f2:	bf00      	nop
 80076f4:	40008000 	.word	0x40008000
 80076f8:	00f42400 	.word	0x00f42400
 80076fc:	080082e0 	.word	0x080082e0
      }
      else
      {
        ret = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2201      	movs	r2, #1
 800770a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2201      	movs	r2, #1
 8007712:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2200      	movs	r2, #0
 800771a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2200      	movs	r2, #0
 8007720:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007722:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007726:	4618      	mov	r0, r3
 8007728:	3730      	adds	r7, #48	; 0x30
 800772a:	46bd      	mov	sp, r7
 800772c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00a      	beq.n	800775a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00a      	beq.n	800777c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00a      	beq.n	800779e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a2:	f003 0304 	and.w	r3, r3, #4
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00a      	beq.n	80077c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00a      	beq.n	80077e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e6:	f003 0320 	and.w	r3, r3, #32
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00a      	beq.n	8007804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01a      	beq.n	8007846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800782a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800782e:	d10a      	bne.n	8007846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00a      	beq.n	8007868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	430a      	orrs	r2, r1
 8007866:	605a      	str	r2, [r3, #4]
  }
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b098      	sub	sp, #96	; 0x60
 8007878:	af02      	add	r7, sp, #8
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007884:	f7fa fa60 	bl	8001d48 <HAL_GetTick>
 8007888:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0308 	and.w	r3, r3, #8
 8007894:	2b08      	cmp	r3, #8
 8007896:	d12f      	bne.n	80078f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078a0:	2200      	movs	r2, #0
 80078a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f88e 	bl	80079c8 <UART_WaitOnFlagUntilTimeout>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d022      	beq.n	80078f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ba:	e853 3f00 	ldrex	r3, [r3]
 80078be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078c6:	653b      	str	r3, [r7, #80]	; 0x50
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	461a      	mov	r2, r3
 80078ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d0:	647b      	str	r3, [r7, #68]	; 0x44
 80078d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078d8:	e841 2300 	strex	r3, r2, [r1]
 80078dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1e6      	bne.n	80078b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e063      	b.n	80079c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	2b04      	cmp	r3, #4
 8007904:	d149      	bne.n	800799a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007906:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800790e:	2200      	movs	r2, #0
 8007910:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f857 	bl	80079c8 <UART_WaitOnFlagUntilTimeout>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d03c      	beq.n	800799a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	623b      	str	r3, [r7, #32]
   return(result);
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800793e:	633b      	str	r3, [r7, #48]	; 0x30
 8007940:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e6      	bne.n	8007920 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3308      	adds	r3, #8
 8007958:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	60fb      	str	r3, [r7, #12]
   return(result);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f023 0301 	bic.w	r3, r3, #1
 8007968:	64bb      	str	r3, [r7, #72]	; 0x48
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007972:	61fa      	str	r2, [r7, #28]
 8007974:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	69b9      	ldr	r1, [r7, #24]
 8007978:	69fa      	ldr	r2, [r7, #28]
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	617b      	str	r3, [r7, #20]
   return(result);
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e5      	bne.n	8007952 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2220      	movs	r2, #32
 800798a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e012      	b.n	80079c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3758      	adds	r7, #88	; 0x58
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	603b      	str	r3, [r7, #0]
 80079d4:	4613      	mov	r3, r2
 80079d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079d8:	e04f      	b.n	8007a7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079e0:	d04b      	beq.n	8007a7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079e2:	f7fa f9b1 	bl	8001d48 <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d302      	bcc.n	80079f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e04e      	b.n	8007a9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d037      	beq.n	8007a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b80      	cmp	r3, #128	; 0x80
 8007a0e:	d034      	beq.n	8007a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b40      	cmp	r3, #64	; 0x40
 8007a14:	d031      	beq.n	8007a7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	f003 0308 	and.w	r3, r3, #8
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d110      	bne.n	8007a46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2208      	movs	r2, #8
 8007a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f920 	bl	8007c72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2208      	movs	r2, #8
 8007a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e029      	b.n	8007a9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a54:	d111      	bne.n	8007a7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 f906 	bl	8007c72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e00f      	b.n	8007a9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	69da      	ldr	r2, [r3, #28]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	4013      	ands	r3, r2
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	bf0c      	ite	eq
 8007a8a:	2301      	moveq	r3, #1
 8007a8c:	2300      	movne	r3, #0
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	461a      	mov	r2, r3
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d0a0      	beq.n	80079da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b096      	sub	sp, #88	; 0x58
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	88fa      	ldrh	r2, [r7, #6]
 8007abc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2222      	movs	r2, #34	; 0x22
 8007acc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d02d      	beq.n	8007b36 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ae0:	4a40      	ldr	r2, [pc, #256]	; (8007be4 <UART_Start_Receive_DMA+0x140>)
 8007ae2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aea:	4a3f      	ldr	r2, [pc, #252]	; (8007be8 <UART_Start_Receive_DMA+0x144>)
 8007aec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007af4:	4a3d      	ldr	r2, [pc, #244]	; (8007bec <UART_Start_Receive_DMA+0x148>)
 8007af6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007afe:	2200      	movs	r2, #0
 8007b00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3324      	adds	r3, #36	; 0x24
 8007b0e:	4619      	mov	r1, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b14:	461a      	mov	r2, r3
 8007b16:	88fb      	ldrh	r3, [r7, #6]
 8007b18:	f7fb fe3e 	bl	8003798 <HAL_DMA_Start_IT>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d009      	beq.n	8007b36 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2210      	movs	r2, #16
 8007b26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e051      	b.n	8007bda <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d018      	beq.n	8007b70 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b46:	e853 3f00 	ldrex	r3, [r3]
 8007b4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b52:	657b      	str	r3, [r7, #84]	; 0x54
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b5e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b60:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b64:	e841 2300 	strex	r3, r2, [r1]
 8007b68:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1e6      	bne.n	8007b3e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3308      	adds	r3, #8
 8007b76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	e853 3f00 	ldrex	r3, [r3]
 8007b7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	f043 0301 	orr.w	r3, r3, #1
 8007b86:	653b      	str	r3, [r7, #80]	; 0x50
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b90:	637a      	str	r2, [r7, #52]	; 0x34
 8007b92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e5      	bne.n	8007b70 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3308      	adds	r3, #8
 8007baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bc4:	623a      	str	r2, [r7, #32]
 8007bc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	69f9      	ldr	r1, [r7, #28]
 8007bca:	6a3a      	ldr	r2, [r7, #32]
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e5      	bne.n	8007ba4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3758      	adds	r7, #88	; 0x58
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	08007d3f 	.word	0x08007d3f
 8007be8:	08007e6b 	.word	0x08007e6b
 8007bec:	08007ea9 	.word	0x08007ea9

08007bf0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b08f      	sub	sp, #60	; 0x3c
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c18:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e6      	bne.n	8007bf8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3308      	adds	r3, #8
 8007c30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	e853 3f00 	ldrex	r3, [r3]
 8007c38:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c40:	633b      	str	r3, [r7, #48]	; 0x30
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3308      	adds	r3, #8
 8007c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c4a:	61ba      	str	r2, [r7, #24]
 8007c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4e:	6979      	ldr	r1, [r7, #20]
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	e841 2300 	strex	r3, r2, [r1]
 8007c56:	613b      	str	r3, [r7, #16]
   return(result);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1e5      	bne.n	8007c2a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2220      	movs	r2, #32
 8007c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007c66:	bf00      	nop
 8007c68:	373c      	adds	r7, #60	; 0x3c
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b095      	sub	sp, #84	; 0x54
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c82:	e853 3f00 	ldrex	r3, [r3]
 8007c86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	461a      	mov	r2, r3
 8007c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c98:	643b      	str	r3, [r7, #64]	; 0x40
 8007c9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ca0:	e841 2300 	strex	r3, r2, [r1]
 8007ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e6      	bne.n	8007c7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cc2:	f023 0301 	bic.w	r3, r3, #1
 8007cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3308      	adds	r3, #8
 8007cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e3      	bne.n	8007cac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d118      	bne.n	8007d1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f023 0310 	bic.w	r3, r3, #16
 8007d00:	647b      	str	r3, [r7, #68]	; 0x44
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d0a:	61bb      	str	r3, [r7, #24]
 8007d0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6979      	ldr	r1, [r7, #20]
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	613b      	str	r3, [r7, #16]
   return(result);
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e6      	bne.n	8007cec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007d32:	bf00      	nop
 8007d34:	3754      	adds	r7, #84	; 0x54
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b09c      	sub	sp, #112	; 0x70
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0320 	and.w	r3, r3, #32
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d171      	bne.n	8007e3e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d6a:	e853 3f00 	ldrex	r3, [r3]
 8007d6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d76:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d80:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e6      	bne.n	8007d62 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3308      	adds	r3, #8
 8007d9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da6:	f023 0301 	bic.w	r3, r3, #1
 8007daa:	667b      	str	r3, [r7, #100]	; 0x64
 8007dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3308      	adds	r3, #8
 8007db2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007db4:	647a      	str	r2, [r7, #68]	; 0x44
 8007db6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e5      	bne.n	8007d94 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3308      	adds	r3, #8
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	e853 3f00 	ldrex	r3, [r3]
 8007dd6:	623b      	str	r3, [r7, #32]
   return(result);
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dde:	663b      	str	r3, [r7, #96]	; 0x60
 8007de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3308      	adds	r3, #8
 8007de6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007de8:	633a      	str	r2, [r7, #48]	; 0x30
 8007dea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e5      	bne.n	8007dc8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d118      	bne.n	8007e3e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	e853 3f00 	ldrex	r3, [r3]
 8007e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f023 0310 	bic.w	r3, r3, #16
 8007e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e2a:	61fb      	str	r3, [r7, #28]
 8007e2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	69b9      	ldr	r1, [r7, #24]
 8007e30:	69fa      	ldr	r2, [r7, #28]
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	617b      	str	r3, [r7, #20]
   return(result);
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e6      	bne.n	8007e0c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e40:	2200      	movs	r2, #0
 8007e42:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d107      	bne.n	8007e5c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e52:	4619      	mov	r1, r3
 8007e54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e56:	f7ff f963 	bl	8007120 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e5a:	e002      	b.n	8007e62 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007e5c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e5e:	f7f9 fc77 	bl	8001750 <HAL_UART_RxCpltCallback>
}
 8007e62:	bf00      	nop
 8007e64:	3770      	adds	r7, #112	; 0x70
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e76:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d109      	bne.n	8007e9a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e8c:	085b      	lsrs	r3, r3, #1
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	4619      	mov	r1, r3
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7ff f944 	bl	8007120 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e98:	e002      	b.n	8007ea0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7ff f92c 	bl	80070f8 <HAL_UART_RxHalfCpltCallback>
}
 8007ea0:	bf00      	nop
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ebc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ec4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed0:	2b80      	cmp	r3, #128	; 0x80
 8007ed2:	d109      	bne.n	8007ee8 <UART_DMAError+0x40>
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	2b21      	cmp	r3, #33	; 0x21
 8007ed8:	d106      	bne.n	8007ee8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007ee2:	6978      	ldr	r0, [r7, #20]
 8007ee4:	f7ff fe84 	bl	8007bf0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef2:	2b40      	cmp	r3, #64	; 0x40
 8007ef4:	d109      	bne.n	8007f0a <UART_DMAError+0x62>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b22      	cmp	r3, #34	; 0x22
 8007efa:	d106      	bne.n	8007f0a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007f04:	6978      	ldr	r0, [r7, #20]
 8007f06:	f7ff feb4 	bl	8007c72 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f10:	f043 0210 	orr.w	r2, r3, #16
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f1a:	6978      	ldr	r0, [r7, #20]
 8007f1c:	f7ff f8f6 	bl	800710c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f20:	bf00      	nop
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f7ff f8e0 	bl	800710c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f4c:	bf00      	nop
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b088      	sub	sp, #32
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	e853 3f00 	ldrex	r3, [r3]
 8007f68:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f70:	61fb      	str	r3, [r7, #28]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	461a      	mov	r2, r3
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	61bb      	str	r3, [r7, #24]
 8007f7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7e:	6979      	ldr	r1, [r7, #20]
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	e841 2300 	strex	r3, r2, [r1]
 8007f86:	613b      	str	r3, [r7, #16]
   return(result);
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1e6      	bne.n	8007f5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2220      	movs	r2, #32
 8007f92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff f8a1 	bl	80070e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fa2:	bf00      	nop
 8007fa4:	3720      	adds	r7, #32
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fb2:	bf00      	nop
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b083      	sub	sp, #12
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007fda:	bf00      	nop
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b085      	sub	sp, #20
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d101      	bne.n	8007ffc <HAL_UARTEx_DisableFifoMode+0x16>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	e027      	b.n	800804c <HAL_UARTEx_DisableFifoMode+0x66>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2224      	movs	r2, #36	; 0x24
 8008008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0201 	bic.w	r2, r2, #1
 8008022:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800802a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2220      	movs	r2, #32
 800803e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008068:	2b01      	cmp	r3, #1
 800806a:	d101      	bne.n	8008070 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800806c:	2302      	movs	r3, #2
 800806e:	e02d      	b.n	80080cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2224      	movs	r2, #36	; 0x24
 800807c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0201 	bic.w	r2, r2, #1
 8008096:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	430a      	orrs	r2, r1
 80080aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f84f 	bl	8008150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2220      	movs	r2, #32
 80080be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d101      	bne.n	80080ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080e8:	2302      	movs	r3, #2
 80080ea:	e02d      	b.n	8008148 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2224      	movs	r2, #36	; 0x24
 80080f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0201 	bic.w	r2, r2, #1
 8008112:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	430a      	orrs	r2, r1
 8008126:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f811 	bl	8008150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2220      	movs	r2, #32
 800813a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800815c:	2b00      	cmp	r3, #0
 800815e:	d108      	bne.n	8008172 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008170:	e031      	b.n	80081d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008172:	2308      	movs	r3, #8
 8008174:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008176:	2308      	movs	r3, #8
 8008178:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	0e5b      	lsrs	r3, r3, #25
 8008182:	b2db      	uxtb	r3, r3
 8008184:	f003 0307 	and.w	r3, r3, #7
 8008188:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	0f5b      	lsrs	r3, r3, #29
 8008192:	b2db      	uxtb	r3, r3
 8008194:	f003 0307 	and.w	r3, r3, #7
 8008198:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	7b3a      	ldrb	r2, [r7, #12]
 800819e:	4911      	ldr	r1, [pc, #68]	; (80081e4 <UARTEx_SetNbDataToProcess+0x94>)
 80081a0:	5c8a      	ldrb	r2, [r1, r2]
 80081a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081a6:	7b3a      	ldrb	r2, [r7, #12]
 80081a8:	490f      	ldr	r1, [pc, #60]	; (80081e8 <UARTEx_SetNbDataToProcess+0x98>)
 80081aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	7b7a      	ldrb	r2, [r7, #13]
 80081bc:	4909      	ldr	r1, [pc, #36]	; (80081e4 <UARTEx_SetNbDataToProcess+0x94>)
 80081be:	5c8a      	ldrb	r2, [r1, r2]
 80081c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081c4:	7b7a      	ldrb	r2, [r7, #13]
 80081c6:	4908      	ldr	r1, [pc, #32]	; (80081e8 <UARTEx_SetNbDataToProcess+0x98>)
 80081c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80081d6:	bf00      	nop
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	080082f8 	.word	0x080082f8
 80081e8:	08008300 	.word	0x08008300

080081ec <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	ed93 7a06 	vldr	s14, [r3, #24]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8008202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	edd3 7a08 	vldr	s15, [r3, #32]
 800820c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	edd3 7a06 	vldr	s15, [r3, #24]
 800821c:	eeb1 7a67 	vneg.f32	s14, s15
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	edd3 7a08 	vldr	s15, [r3, #32]
 8008226:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800822a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a1a      	ldr	r2, [r3, #32]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d006      	beq.n	8008250 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	330c      	adds	r3, #12
 8008246:	220c      	movs	r2, #12
 8008248:	2100      	movs	r1, #0
 800824a:	4618      	mov	r0, r3
 800824c:	f000 f804 	bl	8008258 <memset>
  }

}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <memset>:
 8008258:	4402      	add	r2, r0
 800825a:	4603      	mov	r3, r0
 800825c:	4293      	cmp	r3, r2
 800825e:	d100      	bne.n	8008262 <memset+0xa>
 8008260:	4770      	bx	lr
 8008262:	f803 1b01 	strb.w	r1, [r3], #1
 8008266:	e7f9      	b.n	800825c <memset+0x4>

08008268 <__libc_init_array>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	4d0d      	ldr	r5, [pc, #52]	; (80082a0 <__libc_init_array+0x38>)
 800826c:	4c0d      	ldr	r4, [pc, #52]	; (80082a4 <__libc_init_array+0x3c>)
 800826e:	1b64      	subs	r4, r4, r5
 8008270:	10a4      	asrs	r4, r4, #2
 8008272:	2600      	movs	r6, #0
 8008274:	42a6      	cmp	r6, r4
 8008276:	d109      	bne.n	800828c <__libc_init_array+0x24>
 8008278:	4d0b      	ldr	r5, [pc, #44]	; (80082a8 <__libc_init_array+0x40>)
 800827a:	4c0c      	ldr	r4, [pc, #48]	; (80082ac <__libc_init_array+0x44>)
 800827c:	f000 f818 	bl	80082b0 <_init>
 8008280:	1b64      	subs	r4, r4, r5
 8008282:	10a4      	asrs	r4, r4, #2
 8008284:	2600      	movs	r6, #0
 8008286:	42a6      	cmp	r6, r4
 8008288:	d105      	bne.n	8008296 <__libc_init_array+0x2e>
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008290:	4798      	blx	r3
 8008292:	3601      	adds	r6, #1
 8008294:	e7ee      	b.n	8008274 <__libc_init_array+0xc>
 8008296:	f855 3b04 	ldr.w	r3, [r5], #4
 800829a:	4798      	blx	r3
 800829c:	3601      	adds	r6, #1
 800829e:	e7f2      	b.n	8008286 <__libc_init_array+0x1e>
 80082a0:	08008310 	.word	0x08008310
 80082a4:	08008310 	.word	0x08008310
 80082a8:	08008310 	.word	0x08008310
 80082ac:	08008314 	.word	0x08008314

080082b0 <_init>:
 80082b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b2:	bf00      	nop
 80082b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b6:	bc08      	pop	{r3}
 80082b8:	469e      	mov	lr, r3
 80082ba:	4770      	bx	lr

080082bc <_fini>:
 80082bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082be:	bf00      	nop
 80082c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082c2:	bc08      	pop	{r3}
 80082c4:	469e      	mov	lr, r3
 80082c6:	4770      	bx	lr
