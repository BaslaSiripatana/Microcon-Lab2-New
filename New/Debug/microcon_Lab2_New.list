
microcon_Lab2_New.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b08  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008ce0  08008ce0  00018ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d20  08008d20  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008d20  08008d20  00018d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d28  08008d28  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d28  08008d28  00018d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d2c  08008d2c  00018d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000010  08008d40  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08008d40  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000185e6  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cd5  00000000  00000000  00038669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  0003b340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ab  00000000  00000000  0003c890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028db5  00000000  00000000  0003d93b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000183ba  00000000  00000000  000666f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001141cd  00000000  00000000  0007eaaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d9c  00000000  00000000  00192c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00198a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008cc8 	.word	0x08008cc8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08008cc8 	.word	0x08008cc8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000aa8:	f000 b970 	b.w	8000d8c <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9e08      	ldr	r6, [sp, #32]
 8000aca:	460d      	mov	r5, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	460f      	mov	r7, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4694      	mov	ip, r2
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0xe2>
 8000ada:	fab2 f382 	clz	r3, r2
 8000ade:	b143      	cbz	r3, 8000af2 <__udivmoddi4+0x2e>
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	f1c3 0220 	rsb	r2, r3, #32
 8000ae8:	409f      	lsls	r7, r3
 8000aea:	fa20 f202 	lsr.w	r2, r0, r2
 8000aee:	4317      	orrs	r7, r2
 8000af0:	409c      	lsls	r4, r3
 8000af2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000af6:	fa1f f58c 	uxth.w	r5, ip
 8000afa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000afe:	0c22      	lsrs	r2, r4, #16
 8000b00:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b04:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b08:	fb01 f005 	mul.w	r0, r1, r5
 8000b0c:	4290      	cmp	r0, r2
 8000b0e:	d90a      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b10:	eb1c 0202 	adds.w	r2, ip, r2
 8000b14:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b18:	f080 811c 	bcs.w	8000d54 <__udivmoddi4+0x290>
 8000b1c:	4290      	cmp	r0, r2
 8000b1e:	f240 8119 	bls.w	8000d54 <__udivmoddi4+0x290>
 8000b22:	3902      	subs	r1, #2
 8000b24:	4462      	add	r2, ip
 8000b26:	1a12      	subs	r2, r2, r0
 8000b28:	b2a4      	uxth	r4, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b36:	fb00 f505 	mul.w	r5, r0, r5
 8000b3a:	42a5      	cmp	r5, r4
 8000b3c:	d90a      	bls.n	8000b54 <__udivmoddi4+0x90>
 8000b3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b42:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b46:	f080 8107 	bcs.w	8000d58 <__udivmoddi4+0x294>
 8000b4a:	42a5      	cmp	r5, r4
 8000b4c:	f240 8104 	bls.w	8000d58 <__udivmoddi4+0x294>
 8000b50:	4464      	add	r4, ip
 8000b52:	3802      	subs	r0, #2
 8000b54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b58:	1b64      	subs	r4, r4, r5
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11e      	cbz	r6, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40dc      	lsrs	r4, r3
 8000b60:	2300      	movs	r3, #0
 8000b62:	e9c6 4300 	strd	r4, r3, [r6]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0xbc>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	f000 80ed 	beq.w	8000d4e <__udivmoddi4+0x28a>
 8000b74:	2100      	movs	r1, #0
 8000b76:	e9c6 0500 	strd	r0, r5, [r6]
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b80:	fab3 f183 	clz	r1, r3
 8000b84:	2900      	cmp	r1, #0
 8000b86:	d149      	bne.n	8000c1c <__udivmoddi4+0x158>
 8000b88:	42ab      	cmp	r3, r5
 8000b8a:	d302      	bcc.n	8000b92 <__udivmoddi4+0xce>
 8000b8c:	4282      	cmp	r2, r0
 8000b8e:	f200 80f8 	bhi.w	8000d82 <__udivmoddi4+0x2be>
 8000b92:	1a84      	subs	r4, r0, r2
 8000b94:	eb65 0203 	sbc.w	r2, r5, r3
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d0e2      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ba4:	e7df      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba6:	b902      	cbnz	r2, 8000baa <__udivmoddi4+0xe6>
 8000ba8:	deff      	udf	#255	; 0xff
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 8090 	bne.w	8000cd4 <__udivmoddi4+0x210>
 8000bb4:	1a8a      	subs	r2, r1, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bc4:	fb07 2015 	mls	r0, r7, r5, r2
 8000bc8:	0c22      	lsrs	r2, r4, #16
 8000bca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bce:	fb0e f005 	mul.w	r0, lr, r5
 8000bd2:	4290      	cmp	r0, r2
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x124>
 8000bd6:	eb1c 0202 	adds.w	r2, ip, r2
 8000bda:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x122>
 8000be0:	4290      	cmp	r0, r2
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2b8>
 8000be6:	4645      	mov	r5, r8
 8000be8:	1a12      	subs	r2, r2, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bf0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bf4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x14e>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x14c>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2c2>
 8000c10:	4610      	mov	r0, r2
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c1a:	e79f      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c1c:	f1c1 0720 	rsb	r7, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c32:	40fd      	lsrs	r5, r7
 8000c34:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c3e:	fa1f fe8c 	uxth.w	lr, ip
 8000c42:	fb09 5518 	mls	r5, r9, r8, r5
 8000c46:	0c1c      	lsrs	r4, r3, #16
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	fa00 f001 	lsl.w	r0, r0, r1
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b0>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2b4>
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2b4>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4464      	add	r4, ip
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	b29d      	uxth	r5, r3
 8000c78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c84:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c88:	45a6      	cmp	lr, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1da>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2ac>
 8000c96:	45a6      	cmp	lr, r4
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2ac>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	4464      	add	r4, ip
 8000c9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ca2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ca6:	eba4 040e 	sub.w	r4, r4, lr
 8000caa:	42ac      	cmp	r4, r5
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46ae      	mov	lr, r5
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x29c>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x298>
 8000cb4:	b156      	cbz	r6, 8000ccc <__udivmoddi4+0x208>
 8000cb6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cba:	eb64 040e 	sbc.w	r4, r4, lr
 8000cbe:	fa04 f707 	lsl.w	r7, r4, r7
 8000cc2:	40ca      	lsrs	r2, r1
 8000cc4:	40cc      	lsrs	r4, r1
 8000cc6:	4317      	orrs	r7, r2
 8000cc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	f1c3 0120 	rsb	r1, r3, #32
 8000cd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cdc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ce0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ce4:	409d      	lsls	r5, r3
 8000ce6:	432a      	orrs	r2, r5
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cf8:	0c11      	lsrs	r1, r2, #16
 8000cfa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cfe:	fb00 f50e 	mul.w	r5, r0, lr
 8000d02:	428d      	cmp	r5, r1
 8000d04:	fa04 f403 	lsl.w	r4, r4, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x258>
 8000d0a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b0>
 8000d14:	428d      	cmp	r5, r1
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b0>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4461      	add	r1, ip
 8000d1c:	1b49      	subs	r1, r1, r5
 8000d1e:	b292      	uxth	r2, r2
 8000d20:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d24:	fb07 1115 	mls	r1, r7, r5, r1
 8000d28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d2c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d30:	4291      	cmp	r1, r2
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x282>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2a8>
 8000d3e:	4291      	cmp	r1, r2
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2a8>
 8000d42:	3d02      	subs	r5, #2
 8000d44:	4462      	add	r2, ip
 8000d46:	1a52      	subs	r2, r2, r1
 8000d48:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0xfc>
 8000d4e:	4631      	mov	r1, r6
 8000d50:	4630      	mov	r0, r6
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000d54:	4639      	mov	r1, r7
 8000d56:	e6e6      	b.n	8000b26 <__udivmoddi4+0x62>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	e6fb      	b.n	8000b54 <__udivmoddi4+0x90>
 8000d5c:	4548      	cmp	r0, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d6c:	4645      	mov	r5, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d70:	462b      	mov	r3, r5
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1da>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x258>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b0>
 8000d7c:	3d02      	subs	r5, #2
 8000d7e:	4462      	add	r2, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x124>
 8000d82:	4608      	mov	r0, r1
 8000d84:	e70a      	b.n	8000b9c <__udivmoddi4+0xd8>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x14e>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d96:	f001 fab6 	bl	8002306 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9a:	f000 f973 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9e:	f000 fd47 	bl	8001830 <MX_GPIO_Init>
  MX_DMA_Init();
 8000da2:	f000 fd0b 	bl	80017bc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000da6:	f000 fa43 	bl	8001230 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000daa:	f000 f9b7 	bl	800111c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000dae:	f000 fb31 	bl	8001414 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000db2:	f000 fb7d 	bl	80014b0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000db6:	f000 fc41 	bl	800163c <MX_TIM8_Init>
  MX_TIM2_Init();
 8000dba:	f000 fadd 	bl	8001378 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000dbe:	f000 fa81 	bl	80012c4 <MX_TIM1_Init>
  MX_TIM5_Init();
 8000dc2:	f000 fbed 	bl	80015a0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

    //Read real_positionM1, set_point with DMA
    HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 2);
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	4997      	ldr	r1, [pc, #604]	; (8001028 <main+0x298>)
 8000dca:	4898      	ldr	r0, [pc, #608]	; (800102c <main+0x29c>)
 8000dcc:	f001 fee6 	bl	8002b9c <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start(&htim3);
 8000dd0:	4897      	ldr	r0, [pc, #604]	; (8001030 <main+0x2a0>)
 8000dd2:	f004 fd03 	bl	80057dc <HAL_TIM_Base_Start>

    //PID Control M1
    PID1.Kp = 1.9;
 8000dd6:	4b97      	ldr	r3, [pc, #604]	; (8001034 <main+0x2a4>)
 8000dd8:	4a97      	ldr	r2, [pc, #604]	; (8001038 <main+0x2a8>)
 8000dda:	619a      	str	r2, [r3, #24]
    PID1.Ki = 0;
 8000ddc:	4b95      	ldr	r3, [pc, #596]	; (8001034 <main+0x2a4>)
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
    PID1.Kd = 0;
 8000de4:	4b93      	ldr	r3, [pc, #588]	; (8001034 <main+0x2a4>)
 8000de6:	f04f 0200 	mov.w	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
    arm_pid_init_f32(&PID1, 0);
 8000dec:	2100      	movs	r1, #0
 8000dee:	4891      	ldr	r0, [pc, #580]	; (8001034 <main+0x2a4>)
 8000df0:	f007 ff08 	bl	8008c04 <arm_pid_init_f32>

    //PID Control M2
    PID2.Kp = 0.5;
 8000df4:	4b91      	ldr	r3, [pc, #580]	; (800103c <main+0x2ac>)
 8000df6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000dfa:	619a      	str	r2, [r3, #24]
    PID2.Ki = 0;
 8000dfc:	4b8f      	ldr	r3, [pc, #572]	; (800103c <main+0x2ac>)
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
    PID2.Kd = 0;
 8000e04:	4b8d      	ldr	r3, [pc, #564]	; (800103c <main+0x2ac>)
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	621a      	str	r2, [r3, #32]
    arm_pid_init_f32(&PID2, 0);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	488b      	ldr	r0, [pc, #556]	; (800103c <main+0x2ac>)
 8000e10:	f007 fef8 	bl	8008c04 <arm_pid_init_f32>

    //Output Compare for PWM Mode1
    HAL_TIM_Base_Start(&htim4);
 8000e14:	488a      	ldr	r0, [pc, #552]	; (8001040 <main+0x2b0>)
 8000e16:	f004 fce1 	bl	80057dc <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4888      	ldr	r0, [pc, #544]	; (8001040 <main+0x2b0>)
 8000e1e:	f004 fe27 	bl	8005a70 <HAL_TIM_PWM_Start>

    //Output Compare for PWM Mode2
    HAL_TIM_Base_Start(&htim8);
 8000e22:	4888      	ldr	r0, [pc, #544]	; (8001044 <main+0x2b4>)
 8000e24:	f004 fcda 	bl	80057dc <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4886      	ldr	r0, [pc, #536]	; (8001044 <main+0x2b4>)
 8000e2c:	f004 fe20 	bl	8005a70 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000e30:	2104      	movs	r1, #4
 8000e32:	4884      	ldr	r0, [pc, #528]	; (8001044 <main+0x2b4>)
 8000e34:	f004 fe1c 	bl	8005a70 <HAL_TIM_PWM_Start>

    //Mode3 send UART (Polling) to simulink
    HAL_TIM_Base_Start_IT(&htim5);
 8000e38:	4883      	ldr	r0, [pc, #524]	; (8001048 <main+0x2b8>)
 8000e3a:	f004 fd3f 	bl	80058bc <HAL_TIM_Base_Start_IT>

    //Receive UART in DMA mode (Vin from simulink)
    HAL_UART_Receive_DMA(&hlpuart1, get_Uart, 2);
 8000e3e:	2202      	movs	r2, #2
 8000e40:	4982      	ldr	r1, [pc, #520]	; (800104c <main+0x2bc>)
 8000e42:	4883      	ldr	r0, [pc, #524]	; (8001050 <main+0x2c0>)
 8000e44:	f006 faea 	bl	800741c <HAL_UART_Receive_DMA>

    //QEI
    HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8000e48:	213c      	movs	r1, #60	; 0x3c
 8000e4a:	4882      	ldr	r0, [pc, #520]	; (8001054 <main+0x2c4>)
 8000e4c:	f004 ffc8 	bl	8005de0 <HAL_TIM_Encoder_Start>

    //Timer interrupt for read position
    HAL_TIM_Base_Start_IT(&htim2);
 8000e50:	4881      	ldr	r0, [pc, #516]	; (8001058 <main+0x2c8>)
 8000e52:	f004 fd33 	bl	80058bc <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  if(mode == 1){ //motor control 12V
 8000e56:	4b81      	ldr	r3, [pc, #516]	; (800105c <main+0x2cc>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d16a      	bne.n	8000f34 <main+0x1a4>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2120      	movs	r1, #32
 8000e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e66:	f003 fbe7 	bl	8004638 <HAL_GPIO_WritePin>
	  		  VfeedbackM1 = arm_pid_f32(&PID1, setpositionM1 - positionM1); //no more than 12V
 8000e6a:	4b7d      	ldr	r3, [pc, #500]	; (8001060 <main+0x2d0>)
 8000e6c:	ed93 7a00 	vldr	s14, [r3]
 8000e70:	4b7c      	ldr	r3, [pc, #496]	; (8001064 <main+0x2d4>)
 8000e72:	edd3 7a00 	vldr	s15, [r3]
 8000e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e7a:	4b6e      	ldr	r3, [pc, #440]	; (8001034 <main+0x2a4>)
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	ed93 7a00 	vldr	s14, [r3]
 8000e88:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e8c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000ea0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	edd3 6a02 	vldr	s13, [r3, #8]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	edd3 7a04 	vldr	s15, [r3, #16]
 8000eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec2:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4a62      	ldr	r2, [pc, #392]	; (8001068 <main+0x2d8>)
 8000ede:	6013      	str	r3, [r2, #0]
	  		  //VfeedbackM1 = -5;
	  		  duty_cycle = fabs(VfeedbackM1) * 100/12; //0->12V to 0->100%
 8000ee0:	4b61      	ldr	r3, [pc, #388]	; (8001068 <main+0x2d8>)
 8000ee2:	edd3 7a00 	vldr	s15, [r3]
 8000ee6:	eef0 7ae7 	vabs.f32	s15, s15
 8000eea:	ee17 0a90 	vmov	r0, s15
 8000eee:	f7ff faf7 	bl	80004e0 <__aeabi_f2d>
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	4b5d      	ldr	r3, [pc, #372]	; (800106c <main+0x2dc>)
 8000ef8:	f7ff fb4a 	bl	8000590 <__aeabi_dmul>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4610      	mov	r0, r2
 8000f02:	4619      	mov	r1, r3
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	4b59      	ldr	r3, [pc, #356]	; (8001070 <main+0x2e0>)
 8000f0a:	f7ff fc6b 	bl	80007e4 <__aeabi_ddiv>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f7ff fd4d 	bl	80009b4 <__aeabi_d2uiz>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	4b55      	ldr	r3, [pc, #340]	; (8001074 <main+0x2e4>)
 8000f20:	801a      	strh	r2, [r3, #0]
	  		  PWM_Mode1(duty_cycle);
 8000f22:	4b54      	ldr	r3, [pc, #336]	; (8001074 <main+0x2e4>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fd28 	bl	800197c <PWM_Mode1>
	  		  PWM_Mode2(0);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 fd5f 	bl	80019f0 <PWM_Mode2>
 8000f32:	e790      	b.n	8000e56 <main+0xc6>
	  	  }
	  	  else if(mode == 2){ //Fualhaber
 8000f34:	4b49      	ldr	r3, [pc, #292]	; (800105c <main+0x2cc>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d16a      	bne.n	8001012 <main+0x282>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2120      	movs	r1, #32
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f003 fb78 	bl	8004638 <HAL_GPIO_WritePin>
	  		  VfeedbackM2 = arm_pid_f32(&PID2, setpositionM1 - positionM2); //no more than 12V
 8000f48:	4b45      	ldr	r3, [pc, #276]	; (8001060 <main+0x2d0>)
 8000f4a:	ed93 7a00 	vldr	s14, [r3]
 8000f4e:	4b4a      	ldr	r3, [pc, #296]	; (8001078 <main+0x2e8>)
 8000f50:	edd3 7a00 	vldr	s15, [r3]
 8000f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f58:	4b38      	ldr	r3, [pc, #224]	; (800103c <main+0x2ac>)
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	edc7 7a01 	vstr	s15, [r7, #4]
    out = (S->A0 * in) +
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	ed93 7a00 	vldr	s14, [r3]
 8000f66:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000f7e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fa0:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	615a      	str	r2, [r3, #20]
    return (out);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	4a30      	ldr	r2, [pc, #192]	; (800107c <main+0x2ec>)
 8000fbc:	6013      	str	r3, [r2, #0]
	  		  //VfeedbackM2 = -5;
	  		  duty_cycle = fabs(VfeedbackM2) * 100/5; //0->5V to 0->100%
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	; (800107c <main+0x2ec>)
 8000fc0:	edd3 7a00 	vldr	s15, [r3]
 8000fc4:	eef0 7ae7 	vabs.f32	s15, s15
 8000fc8:	ee17 0a90 	vmov	r0, s15
 8000fcc:	f7ff fa88 	bl	80004e0 <__aeabi_f2d>
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	4b25      	ldr	r3, [pc, #148]	; (800106c <main+0x2dc>)
 8000fd6:	f7ff fadb 	bl	8000590 <__aeabi_dmul>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <main+0x2f0>)
 8000fe8:	f7ff fbfc 	bl	80007e4 <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fcde 	bl	80009b4 <__aeabi_d2uiz>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <main+0x2e4>)
 8000ffe:	801a      	strh	r2, [r3, #0]
	  		  PWM_Mode1(0);
 8001000:	2000      	movs	r0, #0
 8001002:	f000 fcbb 	bl	800197c <PWM_Mode1>
	  		  PWM_Mode2(duty_cycle);
 8001006:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <main+0x2e4>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fcf0 	bl	80019f0 <PWM_Mode2>
 8001010:	e721      	b.n	8000e56 <main+0xc6>
	  	  }
	  	  else if(mode == 3){
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <main+0x2cc>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b03      	cmp	r3, #3
 8001018:	f47f af1d 	bne.w	8000e56 <main+0xc6>
	  		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800101c:	2120      	movs	r1, #32
 800101e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001022:	f003 fb21 	bl	8004668 <HAL_GPIO_TogglePin>
	  	  if(mode == 1){ //motor control 12V
 8001026:	e716      	b.n	8000e56 <main+0xc6>
 8001028:	20000414 	.word	0x20000414
 800102c:	2000002c 	.word	0x2000002c
 8001030:	200002e4 	.word	0x200002e4
 8001034:	20000418 	.word	0x20000418
 8001038:	3ff33333 	.word	0x3ff33333
 800103c:	2000043c 	.word	0x2000043c
 8001040:	20000330 	.word	0x20000330
 8001044:	200003c8 	.word	0x200003c8
 8001048:	2000037c 	.word	0x2000037c
 800104c:	20000488 	.word	0x20000488
 8001050:	200000f8 	.word	0x200000f8
 8001054:	2000024c 	.word	0x2000024c
 8001058:	20000298 	.word	0x20000298
 800105c:	20000000 	.word	0x20000000
 8001060:	20000464 	.word	0x20000464
 8001064:	20000460 	.word	0x20000460
 8001068:	20000468 	.word	0x20000468
 800106c:	40590000 	.word	0x40590000
 8001070:	40280000 	.word	0x40280000
 8001074:	20000476 	.word	0x20000476
 8001078:	20000470 	.word	0x20000470
 800107c:	2000046c 	.word	0x2000046c
 8001080:	40140000 	.word	0x40140000

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	; 0x50
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	2238      	movs	r2, #56	; 0x38
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f007 fdec 	bl	8008c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010a6:	2000      	movs	r0, #0
 80010a8:	f003 fb10 	bl	80046cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ac:	2302      	movs	r3, #2
 80010ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b6:	2340      	movs	r3, #64	; 0x40
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ba:	2302      	movs	r3, #2
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010be:	2302      	movs	r3, #2
 80010c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010c2:	2304      	movs	r3, #4
 80010c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010c6:	2355      	movs	r3, #85	; 0x55
 80010c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fbaa 	bl	8004834 <HAL_RCC_OscConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010e6:	f000 fddf 	bl	8001ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ea:	230f      	movs	r3, #15
 80010ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ee:	2303      	movs	r3, #3
 80010f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2104      	movs	r1, #4
 8001102:	4618      	mov	r0, r3
 8001104:	f003 fea8 	bl	8004e58 <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800110e:	f000 fdcb 	bl	8001ca8 <Error_Handler>
  }
}
 8001112:	bf00      	nop
 8001114:	3750      	adds	r7, #80	; 0x50
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2220      	movs	r2, #32
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f007 fd9b 	bl	8008c70 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800113a:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <MX_ADC1_Init+0x108>)
 800113c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001140:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <MX_ADC1_Init+0x108>)
 8001144:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001148:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800114a:	4b36      	ldr	r3, [pc, #216]	; (8001224 <MX_ADC1_Init+0x108>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <MX_ADC1_Init+0x108>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001156:	4b33      	ldr	r3, [pc, #204]	; (8001224 <MX_ADC1_Init+0x108>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800115c:	4b31      	ldr	r3, [pc, #196]	; (8001224 <MX_ADC1_Init+0x108>)
 800115e:	2201      	movs	r2, #1
 8001160:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001162:	4b30      	ldr	r3, [pc, #192]	; (8001224 <MX_ADC1_Init+0x108>)
 8001164:	2204      	movs	r2, #4
 8001166:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001168:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <MX_ADC1_Init+0x108>)
 800116a:	2200      	movs	r2, #0
 800116c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <MX_ADC1_Init+0x108>)
 8001170:	2200      	movs	r2, #0
 8001172:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001174:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <MX_ADC1_Init+0x108>)
 8001176:	2202      	movs	r2, #2
 8001178:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <MX_ADC1_Init+0x108>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8001182:	4b28      	ldr	r3, [pc, #160]	; (8001224 <MX_ADC1_Init+0x108>)
 8001184:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <MX_ADC1_Init+0x108>)
 800118c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001190:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001192:	4b24      	ldr	r3, [pc, #144]	; (8001224 <MX_ADC1_Init+0x108>)
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <MX_ADC1_Init+0x108>)
 800119c:	2200      	movs	r2, #0
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <MX_ADC1_Init+0x108>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a8:	481e      	ldr	r0, [pc, #120]	; (8001224 <MX_ADC1_Init+0x108>)
 80011aa:	f001 fb3b 	bl	8002824 <HAL_ADC_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80011b4:	f000 fd78 	bl	8001ca8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <MX_ADC1_Init+0x108>)
 80011c4:	f002 fb6c 	bl	80038a0 <HAL_ADCEx_MultiModeConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80011ce:	f000 fd6b 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_ADC1_Init+0x10c>)
 80011d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d6:	2306      	movs	r3, #6
 80011d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011de:	237f      	movs	r3, #127	; 0x7f
 80011e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e2:	2304      	movs	r3, #4
 80011e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_ADC1_Init+0x108>)
 80011f0:	f001 fdc6 	bl	8002d80 <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80011fa:	f000 fd55 	bl	8001ca8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <MX_ADC1_Init+0x110>)
 8001200:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001202:	230c      	movs	r3, #12
 8001204:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_ADC1_Init+0x108>)
 800120c:	f001 fdb8 	bl	8002d80 <HAL_ADC_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001216:	f000 fd47 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3730      	adds	r7, #48	; 0x30
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000002c 	.word	0x2000002c
 8001228:	04300002 	.word	0x04300002
 800122c:	08600004 	.word	0x08600004

08001230 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <MX_LPUART1_UART_Init+0x8c>)
 8001236:	4a22      	ldr	r2, [pc, #136]	; (80012c0 <MX_LPUART1_UART_Init+0x90>)
 8001238:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MX_LPUART1_UART_Init+0x8c>)
 800123c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001240:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <MX_LPUART1_UART_Init+0x8c>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <MX_LPUART1_UART_Init+0x8c>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MX_LPUART1_UART_Init+0x8c>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <MX_LPUART1_UART_Init+0x8c>)
 8001256:	220c      	movs	r2, #12
 8001258:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_LPUART1_UART_Init+0x8c>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <MX_LPUART1_UART_Init+0x8c>)
 8001262:	2200      	movs	r2, #0
 8001264:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_LPUART1_UART_Init+0x8c>)
 8001268:	2200      	movs	r2, #0
 800126a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <MX_LPUART1_UART_Init+0x8c>)
 800126e:	2200      	movs	r2, #0
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001272:	4812      	ldr	r0, [pc, #72]	; (80012bc <MX_LPUART1_UART_Init+0x8c>)
 8001274:	f005 fff4 	bl	8007260 <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800127e:	f000 fd13 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001282:	2100      	movs	r1, #0
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_LPUART1_UART_Init+0x8c>)
 8001286:	f007 fbf3 	bl	8008a70 <HAL_UARTEx_SetTxFifoThreshold>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001290:	f000 fd0a 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001294:	2100      	movs	r1, #0
 8001296:	4809      	ldr	r0, [pc, #36]	; (80012bc <MX_LPUART1_UART_Init+0x8c>)
 8001298:	f007 fc28 	bl	8008aec <HAL_UARTEx_SetRxFifoThreshold>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80012a2:	f000 fd01 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_LPUART1_UART_Init+0x8c>)
 80012a8:	f007 fba9 	bl	80089fe <HAL_UARTEx_DisableFifoMode>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80012b2:	f000 fcf9 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200000f8 	.word	0x200000f8
 80012c0:	40008000 	.word	0x40008000

080012c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08c      	sub	sp, #48	; 0x30
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	2224      	movs	r2, #36	; 0x24
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f007 fccc 	bl	8008c70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d8:	463b      	mov	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <MX_TIM1_Init+0xac>)
 80012e4:	4a23      	ldr	r2, [pc, #140]	; (8001374 <MX_TIM1_Init+0xb0>)
 80012e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <MX_TIM1_Init+0xac>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_TIM1_Init+0xac>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3071;
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_TIM1_Init+0xac>)
 80012f6:	f640 32ff 	movw	r2, #3071	; 0xbff
 80012fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_TIM1_Init+0xac>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_TIM1_Init+0xac>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_TIM1_Init+0xac>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800130e:	2303      	movs	r3, #3
 8001310:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001316:	2301      	movs	r3, #1
 8001318:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001326:	2301      	movs	r3, #1
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	4619      	mov	r1, r3
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_TIM1_Init+0xac>)
 800133a:	f004 fcab 	bl	8005c94 <HAL_TIM_Encoder_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001344:	f000 fcb0 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_TIM1_Init+0xac>)
 800135a:	f005 fe11 	bl	8006f80 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001364:	f000 fca0 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3730      	adds	r7, #48	; 0x30
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000024c 	.word	0x2000024c
 8001374:	40012c00 	.word	0x40012c00

08001378 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001396:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <MX_TIM2_Init+0x98>)
 8001398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800139c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <MX_TIM2_Init+0x98>)
 80013a0:	22a9      	movs	r2, #169	; 0xa9
 80013a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <MX_TIM2_Init+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <MX_TIM2_Init+0x98>)
 80013ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_TIM2_Init+0x98>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <MX_TIM2_Init+0x98>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013be:	4814      	ldr	r0, [pc, #80]	; (8001410 <MX_TIM2_Init+0x98>)
 80013c0:	f004 f9b4 	bl	800572c <HAL_TIM_Base_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013ca:	f000 fc6d 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	480d      	ldr	r0, [pc, #52]	; (8001410 <MX_TIM2_Init+0x98>)
 80013dc:	f004 fff2 	bl	80063c4 <HAL_TIM_ConfigClockSource>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013e6:	f000 fc5f 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <MX_TIM2_Init+0x98>)
 80013f8:	f005 fdc2 	bl	8006f80 <HAL_TIMEx_MasterConfigSynchronization>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001402:	f000 fc51 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000298 	.word	0x20000298

08001414 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MX_TIM3_Init+0x94>)
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <MX_TIM3_Init+0x98>)
 8001436:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <MX_TIM3_Init+0x94>)
 800143a:	22a9      	movs	r2, #169	; 0xa9
 800143c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_TIM3_Init+0x94>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_TIM3_Init+0x94>)
 8001446:	f240 32e7 	movw	r2, #999	; 0x3e7
 800144a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_TIM3_Init+0x94>)
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_TIM3_Init+0x94>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001458:	4813      	ldr	r0, [pc, #76]	; (80014a8 <MX_TIM3_Init+0x94>)
 800145a:	f004 f967 	bl	800572c <HAL_TIM_Base_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001464:	f000 fc20 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	4619      	mov	r1, r3
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <MX_TIM3_Init+0x94>)
 8001476:	f004 ffa5 	bl	80063c4 <HAL_TIM_ConfigClockSource>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001480:	f000 fc12 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001484:	2320      	movs	r3, #32
 8001486:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_TIM3_Init+0x94>)
 8001492:	f005 fd75 	bl	8006f80 <HAL_TIMEx_MasterConfigSynchronization>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800149c:	f000 fc04 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200002e4 	.word	0x200002e4
 80014ac:	40000400 	.word	0x40000400

080014b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	; 0x38
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d0:	463b      	mov	r3, r7
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014e2:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <MX_TIM4_Init+0xe8>)
 80014e4:	4a2d      	ldr	r2, [pc, #180]	; (800159c <MX_TIM4_Init+0xec>)
 80014e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 80014e8:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <MX_TIM4_Init+0xe8>)
 80014ea:	22a9      	movs	r2, #169	; 0xa9
 80014ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <MX_TIM4_Init+0xe8>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <MX_TIM4_Init+0xe8>)
 80014f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fc:	4b26      	ldr	r3, [pc, #152]	; (8001598 <MX_TIM4_Init+0xe8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b25      	ldr	r3, [pc, #148]	; (8001598 <MX_TIM4_Init+0xe8>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001508:	4823      	ldr	r0, [pc, #140]	; (8001598 <MX_TIM4_Init+0xe8>)
 800150a:	f004 f90f 	bl	800572c <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001514:	f000 fbc8 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800151e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001522:	4619      	mov	r1, r3
 8001524:	481c      	ldr	r0, [pc, #112]	; (8001598 <MX_TIM4_Init+0xe8>)
 8001526:	f004 ff4d 	bl	80063c4 <HAL_TIM_ConfigClockSource>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001530:	f000 fbba 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001534:	4818      	ldr	r0, [pc, #96]	; (8001598 <MX_TIM4_Init+0xe8>)
 8001536:	f004 fa39 	bl	80059ac <HAL_TIM_PWM_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001540:	f000 fbb2 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	4811      	ldr	r0, [pc, #68]	; (8001598 <MX_TIM4_Init+0xe8>)
 8001554:	f005 fd14 	bl	8006f80 <HAL_TIMEx_MasterConfigSynchronization>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800155e:	f000 fba3 	bl	8001ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001562:	2360      	movs	r3, #96	; 0x60
 8001564:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001566:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800156a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	2200      	movs	r2, #0
 8001578:	4619      	mov	r1, r3
 800157a:	4807      	ldr	r0, [pc, #28]	; (8001598 <MX_TIM4_Init+0xe8>)
 800157c:	f004 fe0e 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001586:	f000 fb8f 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <MX_TIM4_Init+0xe8>)
 800158c:	f000 fdb4 	bl	80020f8 <HAL_TIM_MspPostInit>

}
 8001590:	bf00      	nop
 8001592:	3738      	adds	r7, #56	; 0x38
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000330 	.word	0x20000330
 800159c:	40000800 	.word	0x40000800

080015a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015be:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <MX_TIM5_Init+0x94>)
 80015c0:	4a1d      	ldr	r2, [pc, #116]	; (8001638 <MX_TIM5_Init+0x98>)
 80015c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <MX_TIM5_Init+0x94>)
 80015c6:	22a9      	movs	r2, #169	; 0xa9
 80015c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_TIM5_Init+0x94>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4999;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_TIM5_Init+0x94>)
 80015d2:	f241 3287 	movw	r2, #4999	; 0x1387
 80015d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <MX_TIM5_Init+0x94>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_TIM5_Init+0x94>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015e4:	4813      	ldr	r0, [pc, #76]	; (8001634 <MX_TIM5_Init+0x94>)
 80015e6:	f004 f8a1 	bl	800572c <HAL_TIM_Base_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80015f0:	f000 fb5a 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	4619      	mov	r1, r3
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <MX_TIM5_Init+0x94>)
 8001602:	f004 fedf 	bl	80063c4 <HAL_TIM_ConfigClockSource>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800160c:	f000 fb4c 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_TIM5_Init+0x94>)
 800161e:	f005 fcaf 	bl	8006f80 <HAL_TIMEx_MasterConfigSynchronization>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001628:	f000 fb3e 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	3720      	adds	r7, #32
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	2000037c 	.word	0x2000037c
 8001638:	40000c00 	.word	0x40000c00

0800163c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b09c      	sub	sp, #112	; 0x70
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001642:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	615a      	str	r2, [r3, #20]
 800166e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2234      	movs	r2, #52	; 0x34
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f007 fafa 	bl	8008c70 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800167c:	4b4d      	ldr	r3, [pc, #308]	; (80017b4 <MX_TIM8_Init+0x178>)
 800167e:	4a4e      	ldr	r2, [pc, #312]	; (80017b8 <MX_TIM8_Init+0x17c>)
 8001680:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8001682:	4b4c      	ldr	r3, [pc, #304]	; (80017b4 <MX_TIM8_Init+0x178>)
 8001684:	22a9      	movs	r2, #169	; 0xa9
 8001686:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <MX_TIM8_Init+0x178>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 800168e:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <MX_TIM8_Init+0x178>)
 8001690:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001694:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b47      	ldr	r3, [pc, #284]	; (80017b4 <MX_TIM8_Init+0x178>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800169c:	4b45      	ldr	r3, [pc, #276]	; (80017b4 <MX_TIM8_Init+0x178>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <MX_TIM8_Init+0x178>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016a8:	4842      	ldr	r0, [pc, #264]	; (80017b4 <MX_TIM8_Init+0x178>)
 80016aa:	f004 f83f 	bl	800572c <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80016b4:	f000 faf8 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016c2:	4619      	mov	r1, r3
 80016c4:	483b      	ldr	r0, [pc, #236]	; (80017b4 <MX_TIM8_Init+0x178>)
 80016c6:	f004 fe7d 	bl	80063c4 <HAL_TIM_ConfigClockSource>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80016d0:	f000 faea 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016d4:	4837      	ldr	r0, [pc, #220]	; (80017b4 <MX_TIM8_Init+0x178>)
 80016d6:	f004 f969 	bl	80059ac <HAL_TIM_PWM_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80016e0:	f000 fae2 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016f4:	4619      	mov	r1, r3
 80016f6:	482f      	ldr	r0, [pc, #188]	; (80017b4 <MX_TIM8_Init+0x178>)
 80016f8:	f005 fc42 	bl	8006f80 <HAL_TIMEx_MasterConfigSynchronization>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001702:	f000 fad1 	bl	8001ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001706:	2360      	movs	r3, #96	; 0x60
 8001708:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500;
 800170a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800170e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001710:	2300      	movs	r3, #0
 8001712:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001724:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001728:	2200      	movs	r2, #0
 800172a:	4619      	mov	r1, r3
 800172c:	4821      	ldr	r0, [pc, #132]	; (80017b4 <MX_TIM8_Init+0x178>)
 800172e:	f004 fd35 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001738:	f000 fab6 	bl	8001ca8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001740:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001744:	2204      	movs	r2, #4
 8001746:	4619      	mov	r1, r3
 8001748:	481a      	ldr	r0, [pc, #104]	; (80017b4 <MX_TIM8_Init+0x178>)
 800174a:	f004 fd27 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM8_Init+0x11c>
  {
    Error_Handler();
 8001754:	f000 faa8 	bl	8001ca8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800176c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001770:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800177e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001788:	2300      	movs	r3, #0
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	4619      	mov	r1, r3
 8001794:	4807      	ldr	r0, [pc, #28]	; (80017b4 <MX_TIM8_Init+0x178>)
 8001796:	f005 fc89 	bl	80070ac <HAL_TIMEx_ConfigBreakDeadTime>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM8_Init+0x168>
  {
    Error_Handler();
 80017a0:	f000 fa82 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017a4:	4803      	ldr	r0, [pc, #12]	; (80017b4 <MX_TIM8_Init+0x178>)
 80017a6:	f000 fca7 	bl	80020f8 <HAL_TIM_MspPostInit>

}
 80017aa:	bf00      	nop
 80017ac:	3770      	adds	r7, #112	; 0x70
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200003c8 	.word	0x200003c8
 80017b8:	40013400 	.word	0x40013400

080017bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MX_DMA_Init+0x70>)
 80017c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c6:	4a19      	ldr	r2, [pc, #100]	; (800182c <MX_DMA_Init+0x70>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6493      	str	r3, [r2, #72]	; 0x48
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <MX_DMA_Init+0x70>)
 80017d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_DMA_Init+0x70>)
 80017dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017de:	4a13      	ldr	r2, [pc, #76]	; (800182c <MX_DMA_Init+0x70>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6493      	str	r3, [r2, #72]	; 0x48
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_DMA_Init+0x70>)
 80017e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	200b      	movs	r0, #11
 80017f8:	f002 fa35 	bl	8003c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017fc:	200b      	movs	r0, #11
 80017fe:	f002 fa4c 	bl	8003c9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	200c      	movs	r0, #12
 8001808:	f002 fa2d 	bl	8003c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800180c:	200c      	movs	r0, #12
 800180e:	f002 fa44 	bl	8003c9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	200d      	movs	r0, #13
 8001818:	f002 fa25 	bl	8003c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800181c:	200d      	movs	r0, #13
 800181e:	f002 fa3c 	bl	8003c9a <HAL_NVIC_EnableIRQ>

}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000

08001830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <MX_GPIO_Init+0x104>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a3a      	ldr	r2, [pc, #232]	; (8001934 <MX_GPIO_Init+0x104>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b38      	ldr	r3, [pc, #224]	; (8001934 <MX_GPIO_Init+0x104>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800185e:	4b35      	ldr	r3, [pc, #212]	; (8001934 <MX_GPIO_Init+0x104>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a34      	ldr	r2, [pc, #208]	; (8001934 <MX_GPIO_Init+0x104>)
 8001864:	f043 0320 	orr.w	r3, r3, #32
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b32      	ldr	r3, [pc, #200]	; (8001934 <MX_GPIO_Init+0x104>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0320 	and.w	r3, r3, #32
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <MX_GPIO_Init+0x104>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	4a2e      	ldr	r2, [pc, #184]	; (8001934 <MX_GPIO_Init+0x104>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001882:	4b2c      	ldr	r3, [pc, #176]	; (8001934 <MX_GPIO_Init+0x104>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	4b29      	ldr	r3, [pc, #164]	; (8001934 <MX_GPIO_Init+0x104>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	4a28      	ldr	r2, [pc, #160]	; (8001934 <MX_GPIO_Init+0x104>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <MX_GPIO_Init+0x104>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 7190 	mov.w	r1, #288	; 0x120
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b0:	f002 fec2 	bl	8004638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ba:	481f      	ldr	r0, [pc, #124]	; (8001938 <MX_GPIO_Init+0x108>)
 80018bc:	f002 febc 	bl	8004638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	4819      	ldr	r0, [pc, #100]	; (800193c <MX_GPIO_Init+0x10c>)
 80018d8:	f002 fd2c 	bl	8004334 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80018dc:	f44f 7390 	mov.w	r3, #288	; 0x120
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f8:	f002 fd1c 	bl	8004334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	4808      	ldr	r0, [pc, #32]	; (8001938 <MX_GPIO_Init+0x108>)
 8001916:	f002 fd0d 	bl	8004334 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	2028      	movs	r0, #40	; 0x28
 8001920:	f002 f9a1 	bl	8003c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001924:	2028      	movs	r0, #40	; 0x28
 8001926:	f002 f9b8 	bl	8003c9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	48000400 	.word	0x48000400
 800193c:	48000800 	.word	0x48000800

08001940 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001950:	d10c      	bne.n	800196c <HAL_GPIO_EXTI_Callback+0x2c>
	{
		mode += 1;
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_GPIO_EXTI_Callback+0x38>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <HAL_GPIO_EXTI_Callback+0x38>)
 800195c:	701a      	strb	r2, [r3, #0]
		if(mode == 4){
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_GPIO_EXTI_Callback+0x38>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b04      	cmp	r3, #4
 8001964:	d102      	bne.n	800196c <HAL_GPIO_EXTI_Callback+0x2c>
			mode = 1;
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <HAL_GPIO_EXTI_Callback+0x38>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	20000000 	.word	0x20000000

0800197c <PWM_Mode1>:

void PWM_Mode1(int dut){ //Motor Control
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	//PWM to Motor Output Compare
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, dut*10);
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	461a      	mov	r2, r3
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <PWM_Mode1+0x68>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	635a      	str	r2, [r3, #52]	; 0x34

	if(VfeedbackM1 >= 0){   //Motor Rotate Forward (CW) Radiant Increase
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <PWM_Mode1+0x6c>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	db0d      	blt.n	80019c2 <PWM_Mode1+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80019a6:	2201      	movs	r2, #1
 80019a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b0:	f002 fe42 	bl	8004638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ba:	480c      	ldr	r0, [pc, #48]	; (80019ec <PWM_Mode1+0x70>)
 80019bc:	f002 fe3c 	bl	8004638 <HAL_GPIO_WritePin>
	}
	else{ //Motor Rotate Reverse Radiant decrease (CCW)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 80019c0:	e00c      	b.n	80019dc <PWM_Mode1+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019cc:	f002 fe34 	bl	8004638 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <PWM_Mode1+0x70>)
 80019d8:	f002 fe2e 	bl	8004638 <HAL_GPIO_WritePin>
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000330 	.word	0x20000330
 80019e8:	20000468 	.word	0x20000468
 80019ec:	48000400 	.word	0x48000400

080019f0 <PWM_Mode2>:

void PWM_Mode2(int dut){ //Motor Faulhaber
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	//PWM to Motor Output Compare

	if(VfeedbackM2 >= 0){   //Motor Rotate Forward (CW) Radiant Increase
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <PWM_Mode2+0x5c>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	db0d      	blt.n	8001a24 <PWM_Mode2+0x34>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, dut*10);
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <PWM_Mode2+0x60>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <PWM_Mode2+0x60>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else{ //Motor Rotate Reverse Radiant decrease (CCW)
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dut*10);
	}
}
 8001a22:	e00c      	b.n	8001a3e <PWM_Mode2+0x4e>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <PWM_Mode2+0x60>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dut*10);
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <PWM_Mode2+0x60>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	2000046c 	.word	0x2000046c
 8001a50:	200003c8 	.word	0x200003c8
 8001a54:	00000000 	.word	0x00000000

08001a58 <Read_setpoint_positionM1_Mode1>:

void Read_setpoint_positionM1_Mode1(){ //Motor Control
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	//Unwrap positionM1
	if((old_ADC -  ADCBuffer[0])>2048){
 8001a5c:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <Read_setpoint_positionM1_Mode1+0xe0>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <Read_setpoint_positionM1_Mode1+0xe4>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a6c:	dd05      	ble.n	8001a7a <Read_setpoint_positionM1_Mode1+0x22>
		n_round += 1;
 8001a6e:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <Read_setpoint_positionM1_Mode1+0xe8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	4a32      	ldr	r2, [pc, #200]	; (8001b40 <Read_setpoint_positionM1_Mode1+0xe8>)
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	e00d      	b.n	8001a96 <Read_setpoint_positionM1_Mode1+0x3e>
	}
	else if((old_ADC -  ADCBuffer[0])<-2048){
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <Read_setpoint_positionM1_Mode1+0xe0>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <Read_setpoint_positionM1_Mode1+0xe4>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8001a8a:	da04      	bge.n	8001a96 <Read_setpoint_positionM1_Mode1+0x3e>
		n_round -= 1;
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <Read_setpoint_positionM1_Mode1+0xe8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	4a2b      	ldr	r2, [pc, #172]	; (8001b40 <Read_setpoint_positionM1_Mode1+0xe8>)
 8001a94:	6013      	str	r3, [r2, #0]
	}
	old_ADC = ADCBuffer[0];
 8001a96:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <Read_setpoint_positionM1_Mode1+0xe4>)
 8001a98:	881a      	ldrh	r2, [r3, #0]
 8001a9a:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <Read_setpoint_positionM1_Mode1+0xe0>)
 8001a9c:	801a      	strh	r2, [r3, #0]

	setpositionM1 = ADCBuffer[1]*2*3.14/4095; //4095 -> rad
 8001a9e:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <Read_setpoint_positionM1_Mode1+0xe4>)
 8001aa0:	885b      	ldrh	r3, [r3, #2]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd09 	bl	80004bc <__aeabi_i2d>
 8001aaa:	a31f      	add	r3, pc, #124	; (adr r3, 8001b28 <Read_setpoint_positionM1_Mode1+0xd0>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	f7fe fd6e 	bl	8000590 <__aeabi_dmul>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	a31c      	add	r3, pc, #112	; (adr r3, 8001b30 <Read_setpoint_positionM1_Mode1+0xd8>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fe8f 	bl	80007e4 <__aeabi_ddiv>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7fe ff91 	bl	80009f4 <__aeabi_d2f>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <Read_setpoint_positionM1_Mode1+0xec>)
 8001ad6:	6013      	str	r3, [r2, #0]
	positionM1 = (ADCBuffer[0] + 4095*n_round)*2*3.14/4095; //4095 -> rad //feedback from potentionmeter
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <Read_setpoint_positionM1_Mode1+0xe4>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <Read_setpoint_positionM1_Mode1+0xe8>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	031b      	lsls	r3, r3, #12
 8001ae6:	1a9b      	subs	r3, r3, r2
 8001ae8:	440b      	add	r3, r1
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fce5 	bl	80004bc <__aeabi_i2d>
 8001af2:	a30d      	add	r3, pc, #52	; (adr r3, 8001b28 <Read_setpoint_positionM1_Mode1+0xd0>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fd4a 	bl	8000590 <__aeabi_dmul>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	a30a      	add	r3, pc, #40	; (adr r3, 8001b30 <Read_setpoint_positionM1_Mode1+0xd8>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	f7fe fe6b 	bl	80007e4 <__aeabi_ddiv>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7fe ff6d 	bl	80009f4 <__aeabi_d2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <Read_setpoint_positionM1_Mode1+0xf0>)
 8001b1e:	6013      	str	r3, [r2, #0]
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	f3af 8000 	nop.w
 8001b28:	51eb851f 	.word	0x51eb851f
 8001b2c:	40091eb8 	.word	0x40091eb8
 8001b30:	00000000 	.word	0x00000000
 8001b34:	40affe00 	.word	0x40affe00
 8001b38:	2000047c 	.word	0x2000047c
 8001b3c:	20000414 	.word	0x20000414
 8001b40:	20000478 	.word	0x20000478
 8001b44:	20000464 	.word	0x20000464
 8001b48:	20000460 	.word	0x20000460
 8001b4c:	00000000 	.word	0x00000000

08001b50 <Read_setpoint_positionM2_Mode2>:

void Read_setpoint_positionM2_Mode2(){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0

	//read position motor 2
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim1);
 8001b54:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <Read_setpoint_positionM2_Mode2+0xa8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <Read_setpoint_positionM2_Mode2+0xac>)
 8001b5e:	801a      	strh	r2, [r3, #0]

	//Unwrap positionM2
	if((old_QEI_M2 - QEIReadRaw)>1536){
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <Read_setpoint_positionM2_Mode2+0xb0>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b25      	ldr	r3, [pc, #148]	; (8001bfc <Read_setpoint_positionM2_Mode2+0xac>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001b70:	dd05      	ble.n	8001b7e <Read_setpoint_positionM2_Mode2+0x2e>
			n_round_M2 += 1;
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <Read_setpoint_positionM2_Mode2+0xb4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	4a22      	ldr	r2, [pc, #136]	; (8001c04 <Read_setpoint_positionM2_Mode2+0xb4>)
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e00d      	b.n	8001b9a <Read_setpoint_positionM2_Mode2+0x4a>
	}
	else if((old_QEI_M2 - QEIReadRaw)<-1536){
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <Read_setpoint_positionM2_Mode2+0xb0>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <Read_setpoint_positionM2_Mode2+0xac>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f513 6fc0 	cmn.w	r3, #1536	; 0x600
 8001b8e:	da04      	bge.n	8001b9a <Read_setpoint_positionM2_Mode2+0x4a>
			n_round_M2 -= 1;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <Read_setpoint_positionM2_Mode2+0xb4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	4a1b      	ldr	r2, [pc, #108]	; (8001c04 <Read_setpoint_positionM2_Mode2+0xb4>)
 8001b98:	6013      	str	r3, [r2, #0]
	}
	old_QEI_M2 = QEIReadRaw;
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <Read_setpoint_positionM2_Mode2+0xac>)
 8001b9c:	881a      	ldrh	r2, [r3, #0]
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <Read_setpoint_positionM2_Mode2+0xb0>)
 8001ba0:	801a      	strh	r2, [r3, #0]

	positionM2 = (QEIReadRaw + 3072*n_round_M2)*2*3.14/3072;
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <Read_setpoint_positionM2_Mode2+0xac>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <Read_setpoint_positionM2_Mode2+0xb4>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	029b      	lsls	r3, r3, #10
 8001bb4:	440b      	add	r3, r1
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fc7f 	bl	80004bc <__aeabi_i2d>
 8001bbe:	a30c      	add	r3, pc, #48	; (adr r3, 8001bf0 <Read_setpoint_positionM2_Mode2+0xa0>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fce4 	bl	8000590 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <Read_setpoint_positionM2_Mode2+0xb8>)
 8001bd6:	f7fe fe05 	bl	80007e4 <__aeabi_ddiv>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7fe ff07 	bl	80009f4 <__aeabi_d2f>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <Read_setpoint_positionM2_Mode2+0xbc>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	51eb851f 	.word	0x51eb851f
 8001bf4:	40091eb8 	.word	0x40091eb8
 8001bf8:	2000024c 	.word	0x2000024c
 8001bfc:	20000474 	.word	0x20000474
 8001c00:	20000484 	.word	0x20000484
 8001c04:	20000480 	.word	0x20000480
 8001c08:	40a80000 	.word	0x40a80000
 8001c0c:	20000470 	.word	0x20000470

08001c10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	if(htim == &htim5 && mode == 3)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d122      	bne.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x56>
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d11e      	bne.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		uint16_t pos = ADCBuffer[0]; // Your 16-bit number
 8001c28:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	82fb      	strh	r3, [r7, #22]
		uint16_t set_pos = ADCBuffer[1];
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c30:	885b      	ldrh	r3, [r3, #2]
 8001c32:	82bb      	strh	r3, [r7, #20]
		uint8_t header = 69; // ASCII value for 'E'
 8001c34:	2345      	movs	r3, #69	; 0x45
 8001c36:	74fb      	strb	r3, [r7, #19]
		uint8_t terminator = '\n'; // Newline character
 8001c38:	230a      	movs	r3, #10
 8001c3a:	74bb      	strb	r3, [r7, #18]

		// Split 16-bit number into two 8-bit parts
		uint8_t highByte_pos = (pos >> 8) & 0xFF;
 8001c3c:	8afb      	ldrh	r3, [r7, #22]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	747b      	strb	r3, [r7, #17]
		uint8_t lowByte_pos = pos & 0xFF;
 8001c44:	8afb      	ldrh	r3, [r7, #22]
 8001c46:	743b      	strb	r3, [r7, #16]


		// Prepare buffer to hold header, two 8-bit parts, and terminator
		uint8_t buffer[5];
		buffer[0] = header;
 8001c48:	7cfb      	ldrb	r3, [r7, #19]
 8001c4a:	723b      	strb	r3, [r7, #8]
		buffer[1] = highByte_pos;
 8001c4c:	7c7b      	ldrb	r3, [r7, #17]
 8001c4e:	727b      	strb	r3, [r7, #9]
		buffer[2] = lowByte_pos;
 8001c50:	7c3b      	ldrb	r3, [r7, #16]
 8001c52:	72bb      	strb	r3, [r7, #10]
		buffer[3] = terminator;
 8001c54:	7cbb      	ldrb	r3, [r7, #18]
 8001c56:	72fb      	strb	r3, [r7, #11]

		// Transmit data over UART
		HAL_UART_Transmit(&hlpuart1, buffer, sizeof(buffer), 10);
 8001c58:	f107 0108 	add.w	r1, r7, #8
 8001c5c:	230a      	movs	r3, #10
 8001c5e:	2205      	movs	r2, #5
 8001c60:	480a      	ldr	r0, [pc, #40]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001c62:	f005 fb4d 	bl	8007300 <HAL_UART_Transmit>

	}

	if(htim == &htim2)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d103      	bne.n	8001c76 <HAL_TIM_PeriodElapsedCallback+0x66>
	{
		Read_setpoint_positionM1_Mode1();
 8001c6e:	f7ff fef3 	bl	8001a58 <Read_setpoint_positionM1_Mode1>
		Read_setpoint_positionM2_Mode2();
 8001c72:	f7ff ff6d 	bl	8001b50 <Read_setpoint_positionM2_Mode2>
	}
}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000037c 	.word	0x2000037c
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000414 	.word	0x20000414
 8001c8c:	200000f8 	.word	0x200000f8
 8001c90:	20000298 	.word	0x20000298

08001c94 <HAL_UART_RxCpltCallback>:
	//start UART in DMA Mode
	HAL_UART_Receive_DMA(&hlpuart1, get_Uart, 2);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
	{

	}
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cac:	b672      	cpsid	i
}
 8001cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <Error_Handler+0x8>
	...

08001cb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <HAL_MspInit+0x44>)
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbe:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <HAL_MspInit+0x44>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_MspInit+0x44>)
 8001cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_MspInit+0x44>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	4a08      	ldr	r2, [pc, #32]	; (8001cf8 <HAL_MspInit+0x44>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_MspInit+0x44>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001cea:	f002 fd93 	bl	8004814 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000

08001cfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b09e      	sub	sp, #120	; 0x78
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	2254      	movs	r2, #84	; 0x54
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f006 ffa7 	bl	8008c70 <memset>
  if(hadc->Instance==ADC1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d2a:	d15f      	bne.n	8001dec <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001d2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d30:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001d32:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d36:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 faa7 	bl	8005290 <HAL_RCCEx_PeriphCLKConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001d48:	f7ff ffae 	bl	8001ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d4c:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <HAL_ADC_MspInit+0xf8>)
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d50:	4a28      	ldr	r2, [pc, #160]	; (8001df4 <HAL_ADC_MspInit+0xf8>)
 8001d52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d58:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <HAL_ADC_MspInit+0xf8>)
 8001d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_ADC_MspInit+0xf8>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	4a22      	ldr	r2, [pc, #136]	; (8001df4 <HAL_ADC_MspInit+0xf8>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_ADC_MspInit+0xf8>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d80:	2303      	movs	r3, #3
 8001d82:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d92:	f002 facf 	bl	8004334 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d96:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <HAL_ADC_MspInit+0xfc>)
 8001d98:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <HAL_ADC_MspInit+0x100>)
 8001d9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <HAL_ADC_MspInit+0xfc>)
 8001d9e:	2205      	movs	r2, #5
 8001da0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_ADC_MspInit+0xfc>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_ADC_MspInit+0xfc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_ADC_MspInit+0xfc>)
 8001db0:	2280      	movs	r2, #128	; 0x80
 8001db2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_ADC_MspInit+0xfc>)
 8001db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_ADC_MspInit+0xfc>)
 8001dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_ADC_MspInit+0xfc>)
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_ADC_MspInit+0xfc>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001dd0:	4809      	ldr	r0, [pc, #36]	; (8001df8 <HAL_ADC_MspInit+0xfc>)
 8001dd2:	f001 ff7d 	bl	8003cd0 <HAL_DMA_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001ddc:	f7ff ff64 	bl	8001ca8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <HAL_ADC_MspInit+0xfc>)
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54
 8001de6:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <HAL_ADC_MspInit+0xfc>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dec:	bf00      	nop
 8001dee:	3778      	adds	r7, #120	; 0x78
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	20000098 	.word	0x20000098
 8001dfc:	40020008 	.word	0x40020008

08001e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b09e      	sub	sp, #120	; 0x78
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	2254      	movs	r2, #84	; 0x54
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f006 ff25 	bl	8008c70 <memset>
  if(huart->Instance==LPUART1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a4d      	ldr	r2, [pc, #308]	; (8001f60 <HAL_UART_MspInit+0x160>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	f040 8092 	bne.w	8001f56 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e32:	2320      	movs	r3, #32
 8001e34:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fa26 	bl	8005290 <HAL_RCCEx_PeriphCLKConfig>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e4a:	f7ff ff2d 	bl	8001ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e4e:	4b45      	ldr	r3, [pc, #276]	; (8001f64 <HAL_UART_MspInit+0x164>)
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	4a44      	ldr	r2, [pc, #272]	; (8001f64 <HAL_UART_MspInit+0x164>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001e5a:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <HAL_UART_MspInit+0x164>)
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <HAL_UART_MspInit+0x164>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	4a3e      	ldr	r2, [pc, #248]	; (8001f64 <HAL_UART_MspInit+0x164>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e72:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <HAL_UART_MspInit+0x164>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001e7e:	230c      	movs	r3, #12
 8001e80:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001e8e:	230c      	movs	r3, #12
 8001e90:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9c:	f002 fa4a 	bl	8004334 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8001ea0:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <HAL_UART_MspInit+0x168>)
 8001ea2:	4a32      	ldr	r2, [pc, #200]	; (8001f6c <HAL_UART_MspInit+0x16c>)
 8001ea4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001ea6:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <HAL_UART_MspInit+0x168>)
 8001ea8:	2222      	movs	r2, #34	; 0x22
 8001eaa:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eac:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_UART_MspInit+0x168>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb2:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_UART_MspInit+0x168>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <HAL_UART_MspInit+0x168>)
 8001eba:	2280      	movs	r2, #128	; 0x80
 8001ebc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <HAL_UART_MspInit+0x168>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ec4:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <HAL_UART_MspInit+0x168>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001eca:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <HAL_UART_MspInit+0x168>)
 8001ecc:	2220      	movs	r2, #32
 8001ece:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <HAL_UART_MspInit+0x168>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001ed6:	4824      	ldr	r0, [pc, #144]	; (8001f68 <HAL_UART_MspInit+0x168>)
 8001ed8:	f001 fefa 	bl	8003cd0 <HAL_DMA_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001ee2:	f7ff fee1 	bl	8001ca8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1f      	ldr	r2, [pc, #124]	; (8001f68 <HAL_UART_MspInit+0x168>)
 8001eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001eee:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <HAL_UART_MspInit+0x168>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_UART_MspInit+0x170>)
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <HAL_UART_MspInit+0x174>)
 8001ef8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HAL_UART_MspInit+0x170>)
 8001efc:	2223      	movs	r2, #35	; 0x23
 8001efe:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_UART_MspInit+0x170>)
 8001f02:	2210      	movs	r2, #16
 8001f04:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <HAL_UART_MspInit+0x170>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_UART_MspInit+0x170>)
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_UART_MspInit+0x170>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f18:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_UART_MspInit+0x170>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_UART_MspInit+0x170>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_UART_MspInit+0x170>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001f2a:	4811      	ldr	r0, [pc, #68]	; (8001f70 <HAL_UART_MspInit+0x170>)
 8001f2c:	f001 fed0 	bl	8003cd0 <HAL_DMA_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001f36:	f7ff feb7 	bl	8001ca8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <HAL_UART_MspInit+0x170>)
 8001f3e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001f40:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <HAL_UART_MspInit+0x170>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	205b      	movs	r0, #91	; 0x5b
 8001f4c:	f001 fe8b 	bl	8003c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001f50:	205b      	movs	r0, #91	; 0x5b
 8001f52:	f001 fea2 	bl	8003c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001f56:	bf00      	nop
 8001f58:	3778      	adds	r7, #120	; 0x78
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40008000 	.word	0x40008000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	2000018c 	.word	0x2000018c
 8001f6c:	4002001c 	.word	0x4002001c
 8001f70:	200001ec 	.word	0x200001ec
 8001f74:	40020030 	.word	0x40020030

08001f78 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d127      	bne.n	8001fea <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9e:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fa4:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4805      	ldr	r0, [pc, #20]	; (8001ffc <HAL_TIM_Encoder_MspInit+0x84>)
 8001fe6:	f002 f9a5 	bl	8004334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	3728      	adds	r7, #40	; 0x28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40012c00 	.word	0x40012c00
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	48000800 	.word	0x48000800

08002000 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002010:	d114      	bne.n	800203c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002012:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	4a33      	ldr	r2, [pc, #204]	; (80020e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6593      	str	r3, [r2, #88]	; 0x58
 800201e:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	201c      	movs	r0, #28
 8002030:	f001 fe19 	bl	8003c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002034:	201c      	movs	r0, #28
 8002036:	f001 fe30 	bl	8003c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800203a:	e04e      	b.n	80020da <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a29      	ldr	r2, [pc, #164]	; (80020e8 <HAL_TIM_Base_MspInit+0xe8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10c      	bne.n	8002060 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002046:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	4a26      	ldr	r2, [pc, #152]	; (80020e4 <HAL_TIM_Base_MspInit+0xe4>)
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	6593      	str	r3, [r2, #88]	; 0x58
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	69bb      	ldr	r3, [r7, #24]
}
 800205e:	e03c      	b.n	80020da <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a21      	ldr	r2, [pc, #132]	; (80020ec <HAL_TIM_Base_MspInit+0xec>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10c      	bne.n	8002084 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_TIM_Base_MspInit+0xe4>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206e:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	6593      	str	r3, [r2, #88]	; 0x58
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	697b      	ldr	r3, [r7, #20]
}
 8002082:	e02a      	b.n	80020da <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM5)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a19      	ldr	r2, [pc, #100]	; (80020f0 <HAL_TIM_Base_MspInit+0xf0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d114      	bne.n	80020b8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <HAL_TIM_Base_MspInit+0xe4>)
 8002094:	f043 0308 	orr.w	r3, r3, #8
 8002098:	6593      	str	r3, [r2, #88]	; 0x58
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_TIM_Base_MspInit+0xe4>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	2032      	movs	r0, #50	; 0x32
 80020ac:	f001 fddb 	bl	8003c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020b0:	2032      	movs	r0, #50	; 0x32
 80020b2:	f001 fdf2 	bl	8003c9a <HAL_NVIC_EnableIRQ>
}
 80020b6:	e010      	b.n	80020da <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM8)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <HAL_TIM_Base_MspInit+0xf4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d10b      	bne.n	80020da <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_TIM_Base_MspInit+0xe4>)
 80020c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c6:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <HAL_TIM_Base_MspInit+0xe4>)
 80020c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020cc:	6613      	str	r3, [r2, #96]	; 0x60
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_TIM_Base_MspInit+0xe4>)
 80020d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
}
 80020da:	bf00      	nop
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40000400 	.word	0x40000400
 80020ec:	40000800 	.word	0x40000800
 80020f0:	40000c00 	.word	0x40000c00
 80020f4:	40013400 	.word	0x40013400

080020f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a23      	ldr	r2, [pc, #140]	; (80021a4 <HAL_TIM_MspPostInit+0xac>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d11e      	bne.n	8002158 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_TIM_MspPostInit+0xb0>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <HAL_TIM_MspPostInit+0xb0>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_TIM_MspPostInit+0xb0>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002144:	230a      	movs	r3, #10
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4619      	mov	r1, r3
 800214e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002152:	f002 f8ef 	bl	8004334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002156:	e020      	b.n	800219a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM8)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a13      	ldr	r2, [pc, #76]	; (80021ac <HAL_TIM_MspPostInit+0xb4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d11b      	bne.n	800219a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_TIM_MspPostInit+0xb0>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002166:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <HAL_TIM_MspPostInit+0xb0>)
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_TIM_MspPostInit+0xb0>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800217a:	23c0      	movs	r3, #192	; 0xc0
 800217c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800218a:	2304      	movs	r3, #4
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	4619      	mov	r1, r3
 8002194:	4806      	ldr	r0, [pc, #24]	; (80021b0 <HAL_TIM_MspPostInit+0xb8>)
 8002196:	f002 f8cd 	bl	8004334 <HAL_GPIO_Init>
}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	; 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40000800 	.word	0x40000800
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40013400 	.word	0x40013400
 80021b0:	48000800 	.word	0x48000800

080021b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021b8:	e7fe      	b.n	80021b8 <NMI_Handler+0x4>

080021ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <HardFault_Handler+0x4>

080021c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <MemManage_Handler+0x4>

080021c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ca:	e7fe      	b.n	80021ca <BusFault_Handler+0x4>

080021cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <UsageFault_Handler+0x4>

080021d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002200:	f000 f8d4 	bl	80023ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}

08002208 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <DMA1_Channel1_IRQHandler+0x10>)
 800220e:	f001 ff42 	bl	8004096 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000098 	.word	0x20000098

0800221c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <DMA1_Channel2_IRQHandler+0x10>)
 8002222:	f001 ff38 	bl	8004096 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2000018c 	.word	0x2000018c

08002230 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <DMA1_Channel3_IRQHandler+0x10>)
 8002236:	f001 ff2e 	bl	8004096 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200001ec 	.word	0x200001ec

08002244 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <TIM2_IRQHandler+0x10>)
 800224a:	f003 fe57 	bl	8005efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000298 	.word	0x20000298

08002258 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800225c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002260:	f002 fa1c 	bl	800469c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}

08002268 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <TIM5_IRQHandler+0x10>)
 800226e:	f003 fe45 	bl	8005efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000037c 	.word	0x2000037c

0800227c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <LPUART1_IRQHandler+0x10>)
 8002282:	f005 f917 	bl	80074b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200000f8 	.word	0x200000f8

08002290 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <SystemInit+0x20>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229a:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <SystemInit+0x20>)
 800229c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022b4:	480d      	ldr	r0, [pc, #52]	; (80022ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022b8:	f7ff ffea 	bl	8002290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022bc:	480c      	ldr	r0, [pc, #48]	; (80022f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80022be:	490d      	ldr	r1, [pc, #52]	; (80022f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022c0:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <LoopForever+0xe>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022c4:	e002      	b.n	80022cc <LoopCopyDataInit>

080022c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ca:	3304      	adds	r3, #4

080022cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d0:	d3f9      	bcc.n	80022c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80022d4:	4c0a      	ldr	r4, [pc, #40]	; (8002300 <LoopForever+0x16>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d8:	e001      	b.n	80022de <LoopFillZerobss>

080022da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022dc:	3204      	adds	r2, #4

080022de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e0:	d3fb      	bcc.n	80022da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022e2:	f006 fccd 	bl	8008c80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022e6:	f7fe fd53 	bl	8000d90 <main>

080022ea <LoopForever>:

LoopForever:
    b LoopForever
 80022ea:	e7fe      	b.n	80022ea <LoopForever>
  ldr   r0, =_estack
 80022ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80022f8:	08008d30 	.word	0x08008d30
  ldr r2, =_sbss
 80022fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002300:	20000490 	.word	0x20000490

08002304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002304:	e7fe      	b.n	8002304 <ADC1_2_IRQHandler>

08002306 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002310:	2003      	movs	r0, #3
 8002312:	f001 fc9d 	bl	8003c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002316:	2000      	movs	r0, #0
 8002318:	f000 f80e 	bl	8002338 <HAL_InitTick>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	71fb      	strb	r3, [r7, #7]
 8002326:	e001      	b.n	800232c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002328:	f7ff fcc4 	bl	8001cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800232c:	79fb      	ldrb	r3, [r7, #7]

}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002344:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_InitTick+0x68>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d022      	beq.n	8002392 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800234c:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_InitTick+0x6c>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_InitTick+0x68>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002358:	fbb1 f3f3 	udiv	r3, r1, r3
 800235c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002360:	4618      	mov	r0, r3
 8002362:	f001 fca8 	bl	8003cb6 <HAL_SYSTICK_Config>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10f      	bne.n	800238c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b0f      	cmp	r3, #15
 8002370:	d809      	bhi.n	8002386 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002372:	2200      	movs	r2, #0
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800237a:	f001 fc74 	bl	8003c66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <HAL_InitTick+0x70>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e007      	b.n	8002396 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	e004      	b.n	8002396 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
 8002390:	e001      	b.n	8002396 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	2000000c 	.word	0x2000000c
 80023a4:	20000004 	.word	0x20000004
 80023a8:	20000008 	.word	0x20000008

080023ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_IncTick+0x1c>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_IncTick+0x20>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a03      	ldr	r2, [pc, #12]	; (80023c8 <HAL_IncTick+0x1c>)
 80023bc:	6013      	str	r3, [r2, #0]
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	2000048c 	.word	0x2000048c
 80023cc:	2000000c 	.word	0x2000000c

080023d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return uwTick;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_GetTick+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	2000048c 	.word	0x2000048c

080023e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	609a      	str	r2, [r3, #8]
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	609a      	str	r2, [r3, #8]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3360      	adds	r3, #96	; 0x60
 8002462:	461a      	mov	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <LL_ADC_SetOffset+0x44>)
 8002472:	4013      	ands	r3, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	4313      	orrs	r3, r2
 8002480:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002488:	bf00      	nop
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	03fff000 	.word	0x03fff000

08002498 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3360      	adds	r3, #96	; 0x60
 80024a6:	461a      	mov	r2, r3
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	3360      	adds	r3, #96	; 0x60
 80024d4:	461a      	mov	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	431a      	orrs	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024ee:	bf00      	nop
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b087      	sub	sp, #28
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	3360      	adds	r3, #96	; 0x60
 800250a:	461a      	mov	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	431a      	orrs	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3360      	adds	r3, #96	; 0x60
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	431a      	orrs	r2, r3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800255a:	bf00      	nop
 800255c:	371c      	adds	r7, #28
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	615a      	str	r2, [r3, #20]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b087      	sub	sp, #28
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3330      	adds	r3, #48	; 0x30
 80025c2:	461a      	mov	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	4413      	add	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	211f      	movs	r1, #31
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	401a      	ands	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	0e9b      	lsrs	r3, r3, #26
 80025ea:	f003 011f 	and.w	r1, r3, #31
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	431a      	orrs	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025fe:	bf00      	nop
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800260a:	b480      	push	{r7}
 800260c:	b087      	sub	sp, #28
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3314      	adds	r3, #20
 800261a:	461a      	mov	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	0e5b      	lsrs	r3, r3, #25
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	4413      	add	r3, r2
 8002628:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	0d1b      	lsrs	r3, r3, #20
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	2107      	movs	r1, #7
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	401a      	ands	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	0d1b      	lsrs	r3, r3, #20
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	431a      	orrs	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002654:	bf00      	nop
 8002656:	371c      	adds	r7, #28
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002678:	43db      	mvns	r3, r3
 800267a:	401a      	ands	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0318 	and.w	r3, r3, #24
 8002682:	4908      	ldr	r1, [pc, #32]	; (80026a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002684:	40d9      	lsrs	r1, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	400b      	ands	r3, r1
 800268a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268e:	431a      	orrs	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	0007ffff 	.word	0x0007ffff

080026a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 031f 	and.w	r3, r3, #31
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6093      	str	r3, [r2, #8]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026fc:	d101      	bne.n	8002702 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002720:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002724:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800274c:	d101      	bne.n	8002752 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002770:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <LL_ADC_IsEnabled+0x18>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <LL_ADC_IsEnabled+0x1a>
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027c2:	f043 0204 	orr.w	r2, r3, #4
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d101      	bne.n	80027ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b08      	cmp	r3, #8
 800280e:	d101      	bne.n	8002814 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b089      	sub	sp, #36	; 0x24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e1a9      	b.n	8002b92 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff fa55 	bl	8001cfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff3f 	bl	80026e8 <LL_ADC_IsDeepPowerDownEnabled>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d004      	beq.n	800287a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff ff25 	bl	80026c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff ff5a 	bl	8002738 <LL_ADC_IsInternalRegulatorEnabled>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d115      	bne.n	80028b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff3e 	bl	8002710 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002894:	4b9c      	ldr	r3, [pc, #624]	; (8002b08 <HAL_ADC_Init+0x2e4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	4a9c      	ldr	r2, [pc, #624]	; (8002b0c <HAL_ADC_Init+0x2e8>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	099b      	lsrs	r3, r3, #6
 80028a2:	3301      	adds	r3, #1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028a8:	e002      	b.n	80028b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f9      	bne.n	80028aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff ff3c 	bl	8002738 <LL_ADC_IsInternalRegulatorEnabled>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10d      	bne.n	80028e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ca:	f043 0210 	orr.w	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d6:	f043 0201 	orr.w	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff75 	bl	80027d6 <LL_ADC_REG_IsConversionOngoing>
 80028ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 8142 	bne.w	8002b80 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f040 813e 	bne.w	8002b80 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002908:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800290c:	f043 0202 	orr.w	r2, r3, #2
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff35 	bl	8002788 <LL_ADC_IsEnabled>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d141      	bne.n	80029a8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800292c:	d004      	beq.n	8002938 <HAL_ADC_Init+0x114>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a77      	ldr	r2, [pc, #476]	; (8002b10 <HAL_ADC_Init+0x2ec>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d10f      	bne.n	8002958 <HAL_ADC_Init+0x134>
 8002938:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800293c:	f7ff ff24 	bl	8002788 <LL_ADC_IsEnabled>
 8002940:	4604      	mov	r4, r0
 8002942:	4873      	ldr	r0, [pc, #460]	; (8002b10 <HAL_ADC_Init+0x2ec>)
 8002944:	f7ff ff20 	bl	8002788 <LL_ADC_IsEnabled>
 8002948:	4603      	mov	r3, r0
 800294a:	4323      	orrs	r3, r4
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	e012      	b.n	800297e <HAL_ADC_Init+0x15a>
 8002958:	486e      	ldr	r0, [pc, #440]	; (8002b14 <HAL_ADC_Init+0x2f0>)
 800295a:	f7ff ff15 	bl	8002788 <LL_ADC_IsEnabled>
 800295e:	4604      	mov	r4, r0
 8002960:	486d      	ldr	r0, [pc, #436]	; (8002b18 <HAL_ADC_Init+0x2f4>)
 8002962:	f7ff ff11 	bl	8002788 <LL_ADC_IsEnabled>
 8002966:	4603      	mov	r3, r0
 8002968:	431c      	orrs	r4, r3
 800296a:	486c      	ldr	r0, [pc, #432]	; (8002b1c <HAL_ADC_Init+0x2f8>)
 800296c:	f7ff ff0c 	bl	8002788 <LL_ADC_IsEnabled>
 8002970:	4603      	mov	r3, r0
 8002972:	4323      	orrs	r3, r4
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d012      	beq.n	80029a8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800298a:	d004      	beq.n	8002996 <HAL_ADC_Init+0x172>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a5f      	ldr	r2, [pc, #380]	; (8002b10 <HAL_ADC_Init+0x2ec>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_ADC_Init+0x176>
 8002996:	4a62      	ldr	r2, [pc, #392]	; (8002b20 <HAL_ADC_Init+0x2fc>)
 8002998:	e000      	b.n	800299c <HAL_ADC_Init+0x178>
 800299a:	4a62      	ldr	r2, [pc, #392]	; (8002b24 <HAL_ADC_Init+0x300>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f7ff fd20 	bl	80023e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7f5b      	ldrb	r3, [r3, #29]
 80029ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80029b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80029be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d106      	bne.n	80029e4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029da:	3b01      	subs	r3, #1
 80029dc:	045b      	lsls	r3, r3, #17
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d009      	beq.n	8002a00 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_ADC_Init+0x304>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	69b9      	ldr	r1, [r7, #24]
 8002a10:	430b      	orrs	r3, r1
 8002a12:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fee4 	bl	80027fc <LL_ADC_INJ_IsConversionOngoing>
 8002a34:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d17f      	bne.n	8002b3c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d17c      	bne.n	8002b3c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a46:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a4e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a5e:	f023 0302 	bic.w	r3, r3, #2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	69b9      	ldr	r1, [r7, #24]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d017      	beq.n	8002aa4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a8c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6911      	ldr	r1, [r2, #16]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002aa2:	e013      	b.n	8002acc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ab2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ac4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ac8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d12a      	bne.n	8002b2c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ae0:	f023 0304 	bic.w	r3, r3, #4
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002aec:	4311      	orrs	r1, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002af2:	4311      	orrs	r1, r2
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002af8:	430a      	orrs	r2, r1
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0201 	orr.w	r2, r2, #1
 8002b04:	611a      	str	r2, [r3, #16]
 8002b06:	e019      	b.n	8002b3c <HAL_ADC_Init+0x318>
 8002b08:	20000004 	.word	0x20000004
 8002b0c:	053e2d63 	.word	0x053e2d63
 8002b10:	50000100 	.word	0x50000100
 8002b14:	50000400 	.word	0x50000400
 8002b18:	50000500 	.word	0x50000500
 8002b1c:	50000600 	.word	0x50000600
 8002b20:	50000300 	.word	0x50000300
 8002b24:	50000700 	.word	0x50000700
 8002b28:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d10c      	bne.n	8002b5e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f023 010f 	bic.w	r1, r3, #15
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	1e5a      	subs	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b5c:	e007      	b.n	8002b6e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 020f 	bic.w	r2, r2, #15
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	f023 0303 	bic.w	r3, r3, #3
 8002b76:	f043 0201 	orr.w	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b7e:	e007      	b.n	8002b90 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	f043 0210 	orr.w	r2, r3, #16
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b90:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3724      	adds	r7, #36	; 0x24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd90      	pop	{r4, r7, pc}
 8002b9a:	bf00      	nop

08002b9c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb0:	d004      	beq.n	8002bbc <HAL_ADC_Start_DMA+0x20>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a5a      	ldr	r2, [pc, #360]	; (8002d20 <HAL_ADC_Start_DMA+0x184>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_Start_DMA+0x24>
 8002bbc:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <HAL_ADC_Start_DMA+0x188>)
 8002bbe:	e000      	b.n	8002bc2 <HAL_ADC_Start_DMA+0x26>
 8002bc0:	4b59      	ldr	r3, [pc, #356]	; (8002d28 <HAL_ADC_Start_DMA+0x18c>)
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fd70 	bl	80026a8 <LL_ADC_GetMultimode>
 8002bc8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fe01 	bl	80027d6 <LL_ADC_REG_IsConversionOngoing>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 809b 	bne.w	8002d12 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_Start_DMA+0x4e>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e096      	b.n	8002d18 <HAL_ADC_Start_DMA+0x17c>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a4d      	ldr	r2, [pc, #308]	; (8002d2c <HAL_ADC_Start_DMA+0x190>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d008      	beq.n	8002c0e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d002      	beq.n	8002c0e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b09      	cmp	r3, #9
 8002c0c:	d17a      	bne.n	8002d04 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fcf6 	bl	8003600 <ADC_Enable>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d16d      	bne.n	8002cfa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a3a      	ldr	r2, [pc, #232]	; (8002d20 <HAL_ADC_Start_DMA+0x184>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d009      	beq.n	8002c50 <HAL_ADC_Start_DMA+0xb4>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a3b      	ldr	r2, [pc, #236]	; (8002d30 <HAL_ADC_Start_DMA+0x194>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d002      	beq.n	8002c4c <HAL_ADC_Start_DMA+0xb0>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	e003      	b.n	8002c54 <HAL_ADC_Start_DMA+0xb8>
 8002c4c:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <HAL_ADC_Start_DMA+0x198>)
 8002c4e:	e001      	b.n	8002c54 <HAL_ADC_Start_DMA+0xb8>
 8002c50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d002      	beq.n	8002c62 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d006      	beq.n	8002c88 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7e:	f023 0206 	bic.w	r2, r3, #6
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	661a      	str	r2, [r3, #96]	; 0x60
 8002c86:	e002      	b.n	8002c8e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	4a29      	ldr	r2, [pc, #164]	; (8002d38 <HAL_ADC_Start_DMA+0x19c>)
 8002c94:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	4a28      	ldr	r2, [pc, #160]	; (8002d3c <HAL_ADC_Start_DMA+0x1a0>)
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	4a27      	ldr	r2, [pc, #156]	; (8002d40 <HAL_ADC_Start_DMA+0x1a4>)
 8002ca4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	221c      	movs	r2, #28
 8002cac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0210 	orr.w	r2, r2, #16
 8002cc4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3340      	adds	r3, #64	; 0x40
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f001 f89b 	bl	8003e20 <HAL_DMA_Start_IT>
 8002cea:	4603      	mov	r3, r0
 8002cec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fd5b 	bl	80027ae <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002cf8:	e00d      	b.n	8002d16 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002d02:	e008      	b.n	8002d16 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002d10:	e001      	b.n	8002d16 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d12:	2302      	movs	r3, #2
 8002d14:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	50000100 	.word	0x50000100
 8002d24:	50000300 	.word	0x50000300
 8002d28:	50000700 	.word	0x50000700
 8002d2c:	50000600 	.word	0x50000600
 8002d30:	50000500 	.word	0x50000500
 8002d34:	50000400 	.word	0x50000400
 8002d38:	0800372d 	.word	0x0800372d
 8002d3c:	08003805 	.word	0x08003805
 8002d40:	08003821 	.word	0x08003821

08002d44 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b0b6      	sub	sp, #216	; 0xd8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x24>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	f000 bc13 	b.w	80035ca <HAL_ADC_ConfigChannel+0x84a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fd10 	bl	80027d6 <LL_ADC_REG_IsConversionOngoing>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 83f3 	bne.w	80035a4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f7ff fbf1 	bl	80025b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fcfe 	bl	80027d6 <LL_ADC_REG_IsConversionOngoing>
 8002dda:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fd0a 	bl	80027fc <LL_ADC_INJ_IsConversionOngoing>
 8002de8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f040 81d9 	bne.w	80031a8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002df6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f040 81d4 	bne.w	80031a8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e08:	d10f      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2200      	movs	r2, #0
 8002e14:	4619      	mov	r1, r3
 8002e16:	f7ff fbf8 	bl	800260a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fb9f 	bl	8002566 <LL_ADC_SetSamplingTimeCommonConfig>
 8002e28:	e00e      	b.n	8002e48 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	461a      	mov	r2, r3
 8002e38:	f7ff fbe7 	bl	800260a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fb8f 	bl	8002566 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	08db      	lsrs	r3, r3, #3
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d022      	beq.n	8002eb0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6919      	ldr	r1, [r3, #16]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e7a:	f7ff fae9 	bl	8002450 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6919      	ldr	r1, [r3, #16]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f7ff fb35 	bl	80024fa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d102      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x126>
 8002ea0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ea4:	e000      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x128>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f7ff fb41 	bl	8002530 <LL_ADC_SetOffsetSaturation>
 8002eae:	e17b      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff faee 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x15c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fae3 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	0e9b      	lsrs	r3, r3, #26
 8002ed6:	f003 021f 	and.w	r2, r3, #31
 8002eda:	e01e      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x19a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fad8 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002efa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002efe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	e004      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002f0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x1b2>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	0e9b      	lsrs	r3, r3, #26
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	e018      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x1e4>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002f4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002f56:	2320      	movs	r3, #32
 8002f58:	e004      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002f5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d106      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff faa7 	bl	80024c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fa8b 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x222>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2101      	movs	r1, #1
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fa80 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	0e9b      	lsrs	r3, r3, #26
 8002f9c:	f003 021f 	and.w	r2, r3, #31
 8002fa0:	e01e      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x260>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fa75 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002fc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002fc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	e004      	b.n	8002fde <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002fd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d105      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x278>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	0e9b      	lsrs	r3, r3, #26
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	e018      	b.n	800302a <HAL_ADC_ConfigChannel+0x2aa>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800300c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003010:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003014:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800301c:	2320      	movs	r3, #32
 800301e:	e004      	b.n	800302a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003020:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800302a:	429a      	cmp	r2, r3
 800302c:	d106      	bne.n	800303c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2200      	movs	r2, #0
 8003034:	2101      	movs	r1, #1
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fa44 	bl	80024c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2102      	movs	r1, #2
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fa28 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8003048:	4603      	mov	r3, r0
 800304a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x2e8>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2102      	movs	r1, #2
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fa1d 	bl	8002498 <LL_ADC_GetOffsetChannel>
 800305e:	4603      	mov	r3, r0
 8003060:	0e9b      	lsrs	r3, r3, #26
 8003062:	f003 021f 	and.w	r2, r3, #31
 8003066:	e01e      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x326>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2102      	movs	r1, #2
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fa12 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8003074:	4603      	mov	r3, r0
 8003076:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003086:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800308a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800308e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003096:	2320      	movs	r3, #32
 8003098:	e004      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800309a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <HAL_ADC_ConfigChannel+0x33e>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	0e9b      	lsrs	r3, r3, #26
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	e016      	b.n	80030ec <HAL_ADC_ConfigChannel+0x36c>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80030d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80030d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80030de:	2320      	movs	r3, #32
 80030e0:	e004      	b.n	80030ec <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80030e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d106      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2200      	movs	r2, #0
 80030f6:	2102      	movs	r1, #2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff f9e3 	bl	80024c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2103      	movs	r1, #3
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff f9c7 	bl	8002498 <LL_ADC_GetOffsetChannel>
 800310a:	4603      	mov	r3, r0
 800310c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <HAL_ADC_ConfigChannel+0x3aa>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2103      	movs	r1, #3
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff f9bc 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	0e9b      	lsrs	r3, r3, #26
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	e017      	b.n	800315a <HAL_ADC_ConfigChannel+0x3da>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2103      	movs	r1, #3
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff f9b1 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003142:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003144:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800314c:	2320      	movs	r3, #32
 800314e:	e003      	b.n	8003158 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003162:	2b00      	cmp	r3, #0
 8003164:	d105      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x3f2>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0e9b      	lsrs	r3, r3, #26
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	e011      	b.n	8003196 <HAL_ADC_ConfigChannel+0x416>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003182:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800318a:	2320      	movs	r3, #32
 800318c:	e003      	b.n	8003196 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800318e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003190:	fab3 f383 	clz	r3, r3
 8003194:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003196:	429a      	cmp	r2, r3
 8003198:	d106      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2200      	movs	r2, #0
 80031a0:	2103      	movs	r1, #3
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff f98e 	bl	80024c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff faeb 	bl	8002788 <LL_ADC_IsEnabled>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f040 813d 	bne.w	8003434 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f7ff fa4a 	bl	8002660 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4aa2      	ldr	r2, [pc, #648]	; (800345c <HAL_ADC_ConfigChannel+0x6dc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	f040 812e 	bne.w	8003434 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10b      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x480>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	0e9b      	lsrs	r3, r3, #26
 80031ee:	3301      	adds	r3, #1
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	2b09      	cmp	r3, #9
 80031f6:	bf94      	ite	ls
 80031f8:	2301      	movls	r3, #1
 80031fa:	2300      	movhi	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e019      	b.n	8003234 <HAL_ADC_ConfigChannel+0x4b4>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800320e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003210:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003218:	2320      	movs	r3, #32
 800321a:	e003      	b.n	8003224 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800321c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	3301      	adds	r3, #1
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2b09      	cmp	r3, #9
 800322c:	bf94      	ite	ls
 800322e:	2301      	movls	r3, #1
 8003230:	2300      	movhi	r3, #0
 8003232:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003234:	2b00      	cmp	r3, #0
 8003236:	d079      	beq.n	800332c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x4d4>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	0e9b      	lsrs	r3, r3, #26
 800324a:	3301      	adds	r3, #1
 800324c:	069b      	lsls	r3, r3, #26
 800324e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003252:	e015      	b.n	8003280 <HAL_ADC_ConfigChannel+0x500>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003264:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800326c:	2320      	movs	r3, #32
 800326e:	e003      	b.n	8003278 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	3301      	adds	r3, #1
 800327a:	069b      	lsls	r3, r3, #26
 800327c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003288:	2b00      	cmp	r3, #0
 800328a:	d109      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x520>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	0e9b      	lsrs	r3, r3, #26
 8003292:	3301      	adds	r3, #1
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2101      	movs	r1, #1
 800329a:	fa01 f303 	lsl.w	r3, r1, r3
 800329e:	e017      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x550>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80032ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80032b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80032b8:	2320      	movs	r3, #32
 80032ba:	e003      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80032bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	2101      	movs	r1, #1
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	ea42 0103 	orr.w	r1, r2, r3
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x576>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	0e9b      	lsrs	r3, r3, #26
 80032e6:	3301      	adds	r3, #1
 80032e8:	f003 021f 	and.w	r2, r3, #31
 80032ec:	4613      	mov	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	4413      	add	r3, r2
 80032f2:	051b      	lsls	r3, r3, #20
 80032f4:	e018      	b.n	8003328 <HAL_ADC_ConfigChannel+0x5a8>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003306:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800330e:	2320      	movs	r3, #32
 8003310:	e003      	b.n	800331a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	3301      	adds	r3, #1
 800331c:	f003 021f 	and.w	r2, r3, #31
 8003320:	4613      	mov	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003328:	430b      	orrs	r3, r1
 800332a:	e07e      	b.n	800342a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003334:	2b00      	cmp	r3, #0
 8003336:	d107      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x5c8>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	0e9b      	lsrs	r3, r3, #26
 800333e:	3301      	adds	r3, #1
 8003340:	069b      	lsls	r3, r3, #26
 8003342:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003346:	e015      	b.n	8003374 <HAL_ADC_ConfigChannel+0x5f4>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003360:	2320      	movs	r3, #32
 8003362:	e003      	b.n	800336c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	3301      	adds	r3, #1
 800336e:	069b      	lsls	r3, r3, #26
 8003370:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337c:	2b00      	cmp	r3, #0
 800337e:	d109      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x614>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0e9b      	lsrs	r3, r3, #26
 8003386:	3301      	adds	r3, #1
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	e017      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x644>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	fa93 f3a3 	rbit	r3, r3
 80033a0:	61fb      	str	r3, [r7, #28]
  return result;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80033ac:	2320      	movs	r3, #32
 80033ae:	e003      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	3301      	adds	r3, #1
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2101      	movs	r1, #1
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	ea42 0103 	orr.w	r1, r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10d      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x670>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	0e9b      	lsrs	r3, r3, #26
 80033da:	3301      	adds	r3, #1
 80033dc:	f003 021f 	and.w	r2, r3, #31
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	3b1e      	subs	r3, #30
 80033e8:	051b      	lsls	r3, r3, #20
 80033ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033ee:	e01b      	b.n	8003428 <HAL_ADC_ConfigChannel+0x6a8>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	613b      	str	r3, [r7, #16]
  return result;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003408:	2320      	movs	r3, #32
 800340a:	e003      	b.n	8003414 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	3301      	adds	r3, #1
 8003416:	f003 021f 	and.w	r2, r3, #31
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	3b1e      	subs	r3, #30
 8003422:	051b      	lsls	r3, r3, #20
 8003424:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003428:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800342e:	4619      	mov	r1, r3
 8003430:	f7ff f8eb 	bl	800260a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4b09      	ldr	r3, [pc, #36]	; (8003460 <HAL_ADC_ConfigChannel+0x6e0>)
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80be 	beq.w	80035be <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800344a:	d004      	beq.n	8003456 <HAL_ADC_ConfigChannel+0x6d6>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a04      	ldr	r2, [pc, #16]	; (8003464 <HAL_ADC_ConfigChannel+0x6e4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d10a      	bne.n	800346c <HAL_ADC_ConfigChannel+0x6ec>
 8003456:	4b04      	ldr	r3, [pc, #16]	; (8003468 <HAL_ADC_ConfigChannel+0x6e8>)
 8003458:	e009      	b.n	800346e <HAL_ADC_ConfigChannel+0x6ee>
 800345a:	bf00      	nop
 800345c:	407f0000 	.word	0x407f0000
 8003460:	80080000 	.word	0x80080000
 8003464:	50000100 	.word	0x50000100
 8003468:	50000300 	.word	0x50000300
 800346c:	4b59      	ldr	r3, [pc, #356]	; (80035d4 <HAL_ADC_ConfigChannel+0x854>)
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe ffe0 	bl	8002434 <LL_ADC_GetCommonPathInternalCh>
 8003474:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a56      	ldr	r2, [pc, #344]	; (80035d8 <HAL_ADC_ConfigChannel+0x858>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_ADC_ConfigChannel+0x70c>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a55      	ldr	r2, [pc, #340]	; (80035dc <HAL_ADC_ConfigChannel+0x85c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d13a      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800348c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d134      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034a0:	d005      	beq.n	80034ae <HAL_ADC_ConfigChannel+0x72e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a4e      	ldr	r2, [pc, #312]	; (80035e0 <HAL_ADC_ConfigChannel+0x860>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	f040 8085 	bne.w	80035b8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034b6:	d004      	beq.n	80034c2 <HAL_ADC_ConfigChannel+0x742>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a49      	ldr	r2, [pc, #292]	; (80035e4 <HAL_ADC_ConfigChannel+0x864>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x746>
 80034c2:	4a49      	ldr	r2, [pc, #292]	; (80035e8 <HAL_ADC_ConfigChannel+0x868>)
 80034c4:	e000      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x748>
 80034c6:	4a43      	ldr	r2, [pc, #268]	; (80035d4 <HAL_ADC_ConfigChannel+0x854>)
 80034c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034d0:	4619      	mov	r1, r3
 80034d2:	4610      	mov	r0, r2
 80034d4:	f7fe ff9b 	bl	800240e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034d8:	4b44      	ldr	r3, [pc, #272]	; (80035ec <HAL_ADC_ConfigChannel+0x86c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	099b      	lsrs	r3, r3, #6
 80034de:	4a44      	ldr	r2, [pc, #272]	; (80035f0 <HAL_ADC_ConfigChannel+0x870>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	099b      	lsrs	r3, r3, #6
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034f2:	e002      	b.n	80034fa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f9      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003500:	e05a      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a3b      	ldr	r2, [pc, #236]	; (80035f4 <HAL_ADC_ConfigChannel+0x874>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d125      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800350c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d11f      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a31      	ldr	r2, [pc, #196]	; (80035e4 <HAL_ADC_ConfigChannel+0x864>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d104      	bne.n	800352c <HAL_ADC_ConfigChannel+0x7ac>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a34      	ldr	r2, [pc, #208]	; (80035f8 <HAL_ADC_ConfigChannel+0x878>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d047      	beq.n	80035bc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003534:	d004      	beq.n	8003540 <HAL_ADC_ConfigChannel+0x7c0>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2a      	ldr	r2, [pc, #168]	; (80035e4 <HAL_ADC_ConfigChannel+0x864>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d101      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x7c4>
 8003540:	4a29      	ldr	r2, [pc, #164]	; (80035e8 <HAL_ADC_ConfigChannel+0x868>)
 8003542:	e000      	b.n	8003546 <HAL_ADC_ConfigChannel+0x7c6>
 8003544:	4a23      	ldr	r2, [pc, #140]	; (80035d4 <HAL_ADC_ConfigChannel+0x854>)
 8003546:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800354a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354e:	4619      	mov	r1, r3
 8003550:	4610      	mov	r0, r2
 8003552:	f7fe ff5c 	bl	800240e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003556:	e031      	b.n	80035bc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a27      	ldr	r2, [pc, #156]	; (80035fc <HAL_ADC_ConfigChannel+0x87c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d12d      	bne.n	80035be <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003562:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d127      	bne.n	80035be <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1c      	ldr	r2, [pc, #112]	; (80035e4 <HAL_ADC_ConfigChannel+0x864>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d022      	beq.n	80035be <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003580:	d004      	beq.n	800358c <HAL_ADC_ConfigChannel+0x80c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a17      	ldr	r2, [pc, #92]	; (80035e4 <HAL_ADC_ConfigChannel+0x864>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d101      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x810>
 800358c:	4a16      	ldr	r2, [pc, #88]	; (80035e8 <HAL_ADC_ConfigChannel+0x868>)
 800358e:	e000      	b.n	8003592 <HAL_ADC_ConfigChannel+0x812>
 8003590:	4a10      	ldr	r2, [pc, #64]	; (80035d4 <HAL_ADC_ConfigChannel+0x854>)
 8003592:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003596:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800359a:	4619      	mov	r1, r3
 800359c:	4610      	mov	r0, r2
 800359e:	f7fe ff36 	bl	800240e <LL_ADC_SetCommonPathInternalCh>
 80035a2:	e00c      	b.n	80035be <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a8:	f043 0220 	orr.w	r2, r3, #32
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80035b6:	e002      	b.n	80035be <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b8:	bf00      	nop
 80035ba:	e000      	b.n	80035be <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80035c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	37d8      	adds	r7, #216	; 0xd8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	50000700 	.word	0x50000700
 80035d8:	c3210000 	.word	0xc3210000
 80035dc:	90c00010 	.word	0x90c00010
 80035e0:	50000600 	.word	0x50000600
 80035e4:	50000100 	.word	0x50000100
 80035e8:	50000300 	.word	0x50000300
 80035ec:	20000004 	.word	0x20000004
 80035f0:	053e2d63 	.word	0x053e2d63
 80035f4:	c7520000 	.word	0xc7520000
 80035f8:	50000500 	.word	0x50000500
 80035fc:	cb840000 	.word	0xcb840000

08003600 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003608:	2300      	movs	r3, #0
 800360a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff f8b9 	bl	8002788 <LL_ADC_IsEnabled>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d176      	bne.n	800370a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	4b3c      	ldr	r3, [pc, #240]	; (8003714 <ADC_Enable+0x114>)
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	f043 0210 	orr.w	r2, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363a:	f043 0201 	orr.w	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e062      	b.n	800370c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff f888 	bl	8002760 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003658:	d004      	beq.n	8003664 <ADC_Enable+0x64>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a2e      	ldr	r2, [pc, #184]	; (8003718 <ADC_Enable+0x118>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d101      	bne.n	8003668 <ADC_Enable+0x68>
 8003664:	4b2d      	ldr	r3, [pc, #180]	; (800371c <ADC_Enable+0x11c>)
 8003666:	e000      	b.n	800366a <ADC_Enable+0x6a>
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <ADC_Enable+0x120>)
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fee2 	bl	8002434 <LL_ADC_GetCommonPathInternalCh>
 8003670:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003676:	2b00      	cmp	r3, #0
 8003678:	d013      	beq.n	80036a2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800367a:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <ADC_Enable+0x124>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	099b      	lsrs	r3, r3, #6
 8003680:	4a29      	ldr	r2, [pc, #164]	; (8003728 <ADC_Enable+0x128>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	099b      	lsrs	r3, r3, #6
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003694:	e002      	b.n	800369c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	3b01      	subs	r3, #1
 800369a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f9      	bne.n	8003696 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036a2:	f7fe fe95 	bl	80023d0 <HAL_GetTick>
 80036a6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036a8:	e028      	b.n	80036fc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff f86a 	bl	8002788 <LL_ADC_IsEnabled>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff f84e 	bl	8002760 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036c4:	f7fe fe84 	bl	80023d0 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d914      	bls.n	80036fc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d00d      	beq.n	80036fc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e4:	f043 0210 	orr.w	r2, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f0:	f043 0201 	orr.w	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e007      	b.n	800370c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	d1cf      	bne.n	80036aa <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	8000003f 	.word	0x8000003f
 8003718:	50000100 	.word	0x50000100
 800371c:	50000300 	.word	0x50000300
 8003720:	50000700 	.word	0x50000700
 8003724:	20000004 	.word	0x20000004
 8003728:	053e2d63 	.word	0x053e2d63

0800372c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003742:	2b00      	cmp	r3, #0
 8003744:	d14b      	bne.n	80037de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d021      	beq.n	80037a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe ff11 	bl	800258c <LL_ADC_REG_IsTriggerSourceSWStart>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d032      	beq.n	80037d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d12b      	bne.n	80037d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003782:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d11f      	bne.n	80037d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379a:	f043 0201 	orr.w	r2, r3, #1
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80037a2:	e018      	b.n	80037d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d111      	bne.n	80037d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d105      	bne.n	80037d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	f043 0201 	orr.w	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f7ff fab4 	bl	8002d44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037dc:	e00e      	b.n	80037fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff fabe 	bl	8002d6c <HAL_ADC_ErrorCallback>
}
 80037f0:	e004      	b.n	80037fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4798      	blx	r3
}
 80037fc:	bf00      	nop
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f7ff faa0 	bl	8002d58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003832:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383e:	f043 0204 	orr.w	r2, r3, #4
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7ff fa90 	bl	8002d6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800384c:	bf00      	nop
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <LL_ADC_IsEnabled>:
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <LL_ADC_IsEnabled+0x18>
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <LL_ADC_IsEnabled+0x1a>
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <LL_ADC_REG_IsConversionOngoing>:
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b04      	cmp	r3, #4
 800388c:	d101      	bne.n	8003892 <LL_ADC_REG_IsConversionOngoing+0x18>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80038a0:	b590      	push	{r4, r7, lr}
 80038a2:	b0a1      	sub	sp, #132	; 0x84
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e0e7      	b.n	8003a8e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80038c6:	2300      	movs	r3, #0
 80038c8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80038ca:	2300      	movs	r3, #0
 80038cc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d6:	d102      	bne.n	80038de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038d8:	4b6f      	ldr	r3, [pc, #444]	; (8003a98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	e009      	b.n	80038f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a6e      	ldr	r2, [pc, #440]	; (8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d102      	bne.n	80038ee <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80038e8:	4b6d      	ldr	r3, [pc, #436]	; (8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	e001      	b.n	80038f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10b      	bne.n	8003910 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	f043 0220 	orr.w	r2, r3, #32
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0be      	b.n	8003a8e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff ffb1 	bl	800387a <LL_ADC_REG_IsConversionOngoing>
 8003918:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff ffab 	bl	800387a <LL_ADC_REG_IsConversionOngoing>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 80a0 	bne.w	8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800392c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800392e:	2b00      	cmp	r3, #0
 8003930:	f040 809c 	bne.w	8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800393c:	d004      	beq.n	8003948 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a55      	ldr	r2, [pc, #340]	; (8003a98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d101      	bne.n	800394c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003948:	4b56      	ldr	r3, [pc, #344]	; (8003aa4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800394a:	e000      	b.n	800394e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800394c:	4b56      	ldr	r3, [pc, #344]	; (8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800394e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d04b      	beq.n	80039f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	6859      	ldr	r1, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800396a:	035b      	lsls	r3, r3, #13
 800396c:	430b      	orrs	r3, r1
 800396e:	431a      	orrs	r2, r3
 8003970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003972:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800397c:	d004      	beq.n	8003988 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a45      	ldr	r2, [pc, #276]	; (8003a98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d10f      	bne.n	80039a8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003988:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800398c:	f7ff ff62 	bl	8003854 <LL_ADC_IsEnabled>
 8003990:	4604      	mov	r4, r0
 8003992:	4841      	ldr	r0, [pc, #260]	; (8003a98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003994:	f7ff ff5e 	bl	8003854 <LL_ADC_IsEnabled>
 8003998:	4603      	mov	r3, r0
 800399a:	4323      	orrs	r3, r4
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e012      	b.n	80039ce <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80039a8:	483c      	ldr	r0, [pc, #240]	; (8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039aa:	f7ff ff53 	bl	8003854 <LL_ADC_IsEnabled>
 80039ae:	4604      	mov	r4, r0
 80039b0:	483b      	ldr	r0, [pc, #236]	; (8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039b2:	f7ff ff4f 	bl	8003854 <LL_ADC_IsEnabled>
 80039b6:	4603      	mov	r3, r0
 80039b8:	431c      	orrs	r4, r3
 80039ba:	483c      	ldr	r0, [pc, #240]	; (8003aac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80039bc:	f7ff ff4a 	bl	8003854 <LL_ADC_IsEnabled>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4323      	orrs	r3, r4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bf0c      	ite	eq
 80039c8:	2301      	moveq	r3, #1
 80039ca:	2300      	movne	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d056      	beq.n	8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80039da:	f023 030f 	bic.w	r3, r3, #15
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	6811      	ldr	r1, [r2, #0]
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	6892      	ldr	r2, [r2, #8]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	431a      	orrs	r2, r3
 80039ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ec:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039ee:	e047      	b.n	8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039fa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a04:	d004      	beq.n	8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a23      	ldr	r2, [pc, #140]	; (8003a98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d10f      	bne.n	8003a30 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003a10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a14:	f7ff ff1e 	bl	8003854 <LL_ADC_IsEnabled>
 8003a18:	4604      	mov	r4, r0
 8003a1a:	481f      	ldr	r0, [pc, #124]	; (8003a98 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a1c:	f7ff ff1a 	bl	8003854 <LL_ADC_IsEnabled>
 8003a20:	4603      	mov	r3, r0
 8003a22:	4323      	orrs	r3, r4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e012      	b.n	8003a56 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003a30:	481a      	ldr	r0, [pc, #104]	; (8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a32:	f7ff ff0f 	bl	8003854 <LL_ADC_IsEnabled>
 8003a36:	4604      	mov	r4, r0
 8003a38:	4819      	ldr	r0, [pc, #100]	; (8003aa0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a3a:	f7ff ff0b 	bl	8003854 <LL_ADC_IsEnabled>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	431c      	orrs	r4, r3
 8003a42:	481a      	ldr	r0, [pc, #104]	; (8003aac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a44:	f7ff ff06 	bl	8003854 <LL_ADC_IsEnabled>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	4323      	orrs	r3, r4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d012      	beq.n	8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a62:	f023 030f 	bic.w	r3, r3, #15
 8003a66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a68:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a6a:	e009      	b.n	8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a7e:	e000      	b.n	8003a82 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3784      	adds	r7, #132	; 0x84
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd90      	pop	{r4, r7, pc}
 8003a96:	bf00      	nop
 8003a98:	50000100 	.word	0x50000100
 8003a9c:	50000400 	.word	0x50000400
 8003aa0:	50000500 	.word	0x50000500
 8003aa4:	50000300 	.word	0x50000300
 8003aa8:	50000700 	.word	0x50000700
 8003aac:	50000600 	.word	0x50000600

08003ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003acc:	4013      	ands	r3, r2
 8003ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ae2:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	60d3      	str	r3, [r2, #12]
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	e000ed00 	.word	0xe000ed00

08003af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003afc:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <__NVIC_GetPriorityGrouping+0x18>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	0a1b      	lsrs	r3, r3, #8
 8003b02:	f003 0307 	and.w	r3, r3, #7
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	db0b      	blt.n	8003b3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	f003 021f 	and.w	r2, r3, #31
 8003b2c:	4907      	ldr	r1, [pc, #28]	; (8003b4c <__NVIC_EnableIRQ+0x38>)
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	2001      	movs	r0, #1
 8003b36:	fa00 f202 	lsl.w	r2, r0, r2
 8003b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	e000e100 	.word	0xe000e100

08003b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	6039      	str	r1, [r7, #0]
 8003b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	db0a      	blt.n	8003b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	490c      	ldr	r1, [pc, #48]	; (8003b9c <__NVIC_SetPriority+0x4c>)
 8003b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6e:	0112      	lsls	r2, r2, #4
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	440b      	add	r3, r1
 8003b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b78:	e00a      	b.n	8003b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	4908      	ldr	r1, [pc, #32]	; (8003ba0 <__NVIC_SetPriority+0x50>)
 8003b80:	79fb      	ldrb	r3, [r7, #7]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	3b04      	subs	r3, #4
 8003b88:	0112      	lsls	r2, r2, #4
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	761a      	strb	r2, [r3, #24]
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	e000e100 	.word	0xe000e100
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b089      	sub	sp, #36	; 0x24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f1c3 0307 	rsb	r3, r3, #7
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	bf28      	it	cs
 8003bc2:	2304      	movcs	r3, #4
 8003bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	2b06      	cmp	r3, #6
 8003bcc:	d902      	bls.n	8003bd4 <NVIC_EncodePriority+0x30>
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	3b03      	subs	r3, #3
 8003bd2:	e000      	b.n	8003bd6 <NVIC_EncodePriority+0x32>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	43da      	mvns	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	401a      	ands	r2, r3
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf6:	43d9      	mvns	r1, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bfc:	4313      	orrs	r3, r2
         );
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3724      	adds	r7, #36	; 0x24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c1c:	d301      	bcc.n	8003c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e00f      	b.n	8003c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c22:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <SysTick_Config+0x40>)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c2a:	210f      	movs	r1, #15
 8003c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c30:	f7ff ff8e 	bl	8003b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c34:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <SysTick_Config+0x40>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c3a:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <SysTick_Config+0x40>)
 8003c3c:	2207      	movs	r2, #7
 8003c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	e000e010 	.word	0xe000e010

08003c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff ff29 	bl	8003ab0 <__NVIC_SetPriorityGrouping>
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b086      	sub	sp, #24
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
 8003c72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c74:	f7ff ff40 	bl	8003af8 <__NVIC_GetPriorityGrouping>
 8003c78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	6978      	ldr	r0, [r7, #20]
 8003c80:	f7ff ff90 	bl	8003ba4 <NVIC_EncodePriority>
 8003c84:	4602      	mov	r2, r0
 8003c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ff5f 	bl	8003b50 <__NVIC_SetPriority>
}
 8003c92:	bf00      	nop
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff ff33 	bl	8003b14 <__NVIC_EnableIRQ>
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff ffa4 	bl	8003c0c <SysTick_Config>
 8003cc4:	4603      	mov	r3, r0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e08d      	b.n	8003dfe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4b47      	ldr	r3, [pc, #284]	; (8003e08 <HAL_DMA_Init+0x138>)
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d80f      	bhi.n	8003d0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4b45      	ldr	r3, [pc, #276]	; (8003e0c <HAL_DMA_Init+0x13c>)
 8003cf6:	4413      	add	r3, r2
 8003cf8:	4a45      	ldr	r2, [pc, #276]	; (8003e10 <HAL_DMA_Init+0x140>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	009a      	lsls	r2, r3, #2
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a42      	ldr	r2, [pc, #264]	; (8003e14 <HAL_DMA_Init+0x144>)
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40
 8003d0c:	e00e      	b.n	8003d2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	4b40      	ldr	r3, [pc, #256]	; (8003e18 <HAL_DMA_Init+0x148>)
 8003d16:	4413      	add	r3, r2
 8003d18:	4a3d      	ldr	r2, [pc, #244]	; (8003e10 <HAL_DMA_Init+0x140>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	009a      	lsls	r2, r3, #2
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a3c      	ldr	r2, [pc, #240]	; (8003e1c <HAL_DMA_Init+0x14c>)
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fa76 	bl	8004270 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d8c:	d102      	bne.n	8003d94 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003da8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d010      	beq.n	8003dd4 <HAL_DMA_Init+0x104>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d80c      	bhi.n	8003dd4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fa96 	bl	80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	e008      	b.n	8003de6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40020407 	.word	0x40020407
 8003e0c:	bffdfff8 	.word	0xbffdfff8
 8003e10:	cccccccd 	.word	0xcccccccd
 8003e14:	40020000 	.word	0x40020000
 8003e18:	bffdfbf8 	.word	0xbffdfbf8
 8003e1c:	40020400 	.word	0x40020400

08003e20 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_DMA_Start_IT+0x20>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e066      	b.n	8003f0e <HAL_DMA_Start_IT+0xee>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d155      	bne.n	8003f00 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f9bb 	bl	80041f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 020e 	orr.w	r2, r2, #14
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	e00f      	b.n	8003eb8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0204 	bic.w	r2, r2, #4
 8003ea6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 020a 	orr.w	r2, r2, #10
 8003eb6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0201 	orr.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e005      	b.n	8003f0c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b085      	sub	sp, #20
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d005      	beq.n	8003f3a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2204      	movs	r2, #4
 8003f32:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
 8003f38:	e037      	b.n	8003faa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 020e 	bic.w	r2, r2, #14
 8003f48:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f58:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0201 	bic.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	f003 021f 	and.w	r2, r3, #31
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2101      	movs	r1, #1
 8003f78:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f86:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00c      	beq.n	8003faa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f9e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fa8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d00d      	beq.n	8003ffc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
 8003ffa:	e047      	b.n	800408c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 020e 	bic.w	r2, r2, #14
 800400a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004026:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800402a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004030:	f003 021f 	and.w	r2, r3, #31
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f202 	lsl.w	r2, r1, r2
 800403e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004048:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004060:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800406a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	4798      	blx	r3
    }
  }
  return status;
 800408c:	7bfb      	ldrb	r3, [r7, #15]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	2204      	movs	r2, #4
 80040b8:	409a      	lsls	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4013      	ands	r3, r2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d026      	beq.n	8004110 <HAL_DMA_IRQHandler+0x7a>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d021      	beq.n	8004110 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d107      	bne.n	80040ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0204 	bic.w	r2, r2, #4
 80040e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	f003 021f 	and.w	r2, r3, #31
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	2104      	movs	r1, #4
 80040f8:	fa01 f202 	lsl.w	r2, r1, r2
 80040fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	2b00      	cmp	r3, #0
 8004104:	d071      	beq.n	80041ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800410e:	e06c      	b.n	80041ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2202      	movs	r2, #2
 800411a:	409a      	lsls	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d02e      	beq.n	8004182 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d029      	beq.n	8004182 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10b      	bne.n	8004154 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 020a 	bic.w	r2, r2, #10
 800414a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004158:	f003 021f 	and.w	r2, r3, #31
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	2102      	movs	r1, #2
 8004162:	fa01 f202 	lsl.w	r2, r1, r2
 8004166:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d038      	beq.n	80041ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004180:	e033      	b.n	80041ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	2208      	movs	r2, #8
 800418c:	409a      	lsls	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4013      	ands	r3, r2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d02a      	beq.n	80041ec <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d025      	beq.n	80041ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 020e 	bic.w	r2, r2, #14
 80041ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b4:	f003 021f 	and.w	r2, r3, #31
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	2101      	movs	r1, #1
 80041be:	fa01 f202 	lsl.w	r2, r1, r2
 80041c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d004      	beq.n	80041ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041ea:	bf00      	nop
 80041ec:	bf00      	nop
}
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800420a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800421c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	f003 021f 	and.w	r2, r3, #31
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	2101      	movs	r1, #1
 800422c:	fa01 f202 	lsl.w	r2, r1, r2
 8004230:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b10      	cmp	r3, #16
 8004240:	d108      	bne.n	8004254 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004252:	e007      	b.n	8004264 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	60da      	str	r2, [r3, #12]
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004280:	429a      	cmp	r2, r3
 8004282:	d802      	bhi.n	800428a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004284:	4b15      	ldr	r3, [pc, #84]	; (80042dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	e001      	b.n	800428e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800428c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	3b08      	subs	r3, #8
 800429a:	4a12      	ldr	r2, [pc, #72]	; (80042e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800429c:	fba2 2303 	umull	r2, r3, r2, r3
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a8:	089b      	lsrs	r3, r3, #2
 80042aa:	009a      	lsls	r2, r3, #2
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4413      	add	r3, r2
 80042b0:	461a      	mov	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a0b      	ldr	r2, [pc, #44]	; (80042e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80042ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	2201      	movs	r2, #1
 80042c4:	409a      	lsls	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40020407 	.word	0x40020407
 80042dc:	40020800 	.word	0x40020800
 80042e0:	40020820 	.word	0x40020820
 80042e4:	cccccccd 	.word	0xcccccccd
 80042e8:	40020880 	.word	0x40020880

080042ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4b0b      	ldr	r3, [pc, #44]	; (800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	461a      	mov	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a08      	ldr	r2, [pc, #32]	; (8004330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800430e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3b01      	subs	r3, #1
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	2201      	movs	r2, #1
 800431a:	409a      	lsls	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	1000823f 	.word	0x1000823f
 8004330:	40020940 	.word	0x40020940

08004334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004342:	e15a      	b.n	80045fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	2101      	movs	r1, #1
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	4013      	ands	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 814c 	beq.w	80045f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	2b01      	cmp	r3, #1
 8004366:	d005      	beq.n	8004374 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004370:	2b02      	cmp	r3, #2
 8004372:	d130      	bne.n	80043d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	2203      	movs	r2, #3
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	43db      	mvns	r3, r3
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4013      	ands	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043aa:	2201      	movs	r2, #1
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4013      	ands	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	091b      	lsrs	r3, r3, #4
 80043c0:	f003 0201 	and.w	r2, r3, #1
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d017      	beq.n	8004412 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	2203      	movs	r2, #3
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	43db      	mvns	r3, r3
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4013      	ands	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d123      	bne.n	8004466 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	08da      	lsrs	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3208      	adds	r2, #8
 8004426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800442a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	220f      	movs	r2, #15
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	43db      	mvns	r3, r3
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4013      	ands	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	08da      	lsrs	r2, r3, #3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3208      	adds	r2, #8
 8004460:	6939      	ldr	r1, [r7, #16]
 8004462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	2203      	movs	r2, #3
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4013      	ands	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 0203 	and.w	r2, r3, #3
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 80a6 	beq.w	80045f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a8:	4b5b      	ldr	r3, [pc, #364]	; (8004618 <HAL_GPIO_Init+0x2e4>)
 80044aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ac:	4a5a      	ldr	r2, [pc, #360]	; (8004618 <HAL_GPIO_Init+0x2e4>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	6613      	str	r3, [r2, #96]	; 0x60
 80044b4:	4b58      	ldr	r3, [pc, #352]	; (8004618 <HAL_GPIO_Init+0x2e4>)
 80044b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044c0:	4a56      	ldr	r2, [pc, #344]	; (800461c <HAL_GPIO_Init+0x2e8>)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	089b      	lsrs	r3, r3, #2
 80044c6:	3302      	adds	r3, #2
 80044c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	220f      	movs	r2, #15
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	43db      	mvns	r3, r3
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4013      	ands	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044ea:	d01f      	beq.n	800452c <HAL_GPIO_Init+0x1f8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a4c      	ldr	r2, [pc, #304]	; (8004620 <HAL_GPIO_Init+0x2ec>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d019      	beq.n	8004528 <HAL_GPIO_Init+0x1f4>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a4b      	ldr	r2, [pc, #300]	; (8004624 <HAL_GPIO_Init+0x2f0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d013      	beq.n	8004524 <HAL_GPIO_Init+0x1f0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a4a      	ldr	r2, [pc, #296]	; (8004628 <HAL_GPIO_Init+0x2f4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00d      	beq.n	8004520 <HAL_GPIO_Init+0x1ec>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a49      	ldr	r2, [pc, #292]	; (800462c <HAL_GPIO_Init+0x2f8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <HAL_GPIO_Init+0x1e8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a48      	ldr	r2, [pc, #288]	; (8004630 <HAL_GPIO_Init+0x2fc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d101      	bne.n	8004518 <HAL_GPIO_Init+0x1e4>
 8004514:	2305      	movs	r3, #5
 8004516:	e00a      	b.n	800452e <HAL_GPIO_Init+0x1fa>
 8004518:	2306      	movs	r3, #6
 800451a:	e008      	b.n	800452e <HAL_GPIO_Init+0x1fa>
 800451c:	2304      	movs	r3, #4
 800451e:	e006      	b.n	800452e <HAL_GPIO_Init+0x1fa>
 8004520:	2303      	movs	r3, #3
 8004522:	e004      	b.n	800452e <HAL_GPIO_Init+0x1fa>
 8004524:	2302      	movs	r3, #2
 8004526:	e002      	b.n	800452e <HAL_GPIO_Init+0x1fa>
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <HAL_GPIO_Init+0x1fa>
 800452c:	2300      	movs	r3, #0
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	f002 0203 	and.w	r2, r2, #3
 8004534:	0092      	lsls	r2, r2, #2
 8004536:	4093      	lsls	r3, r2
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800453e:	4937      	ldr	r1, [pc, #220]	; (800461c <HAL_GPIO_Init+0x2e8>)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	089b      	lsrs	r3, r3, #2
 8004544:	3302      	adds	r3, #2
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800454c:	4b39      	ldr	r3, [pc, #228]	; (8004634 <HAL_GPIO_Init+0x300>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	43db      	mvns	r3, r3
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4013      	ands	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004570:	4a30      	ldr	r2, [pc, #192]	; (8004634 <HAL_GPIO_Init+0x300>)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004576:	4b2f      	ldr	r3, [pc, #188]	; (8004634 <HAL_GPIO_Init+0x300>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	43db      	mvns	r3, r3
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4013      	ands	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800459a:	4a26      	ldr	r2, [pc, #152]	; (8004634 <HAL_GPIO_Init+0x300>)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80045a0:	4b24      	ldr	r3, [pc, #144]	; (8004634 <HAL_GPIO_Init+0x300>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	43db      	mvns	r3, r3
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4013      	ands	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045c4:	4a1b      	ldr	r2, [pc, #108]	; (8004634 <HAL_GPIO_Init+0x300>)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80045ca:	4b1a      	ldr	r3, [pc, #104]	; (8004634 <HAL_GPIO_Init+0x300>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	43db      	mvns	r3, r3
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4013      	ands	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045ee:	4a11      	ldr	r2, [pc, #68]	; (8004634 <HAL_GPIO_Init+0x300>)
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	3301      	adds	r3, #1
 80045f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	f47f ae9d 	bne.w	8004344 <HAL_GPIO_Init+0x10>
  }
}
 800460a:	bf00      	nop
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40021000 	.word	0x40021000
 800461c:	40010000 	.word	0x40010000
 8004620:	48000400 	.word	0x48000400
 8004624:	48000800 	.word	0x48000800
 8004628:	48000c00 	.word	0x48000c00
 800462c:	48001000 	.word	0x48001000
 8004630:	48001400 	.word	0x48001400
 8004634:	40010400 	.word	0x40010400

08004638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	807b      	strh	r3, [r7, #2]
 8004644:	4613      	mov	r3, r2
 8004646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004648:	787b      	ldrb	r3, [r7, #1]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800464e:	887a      	ldrh	r2, [r7, #2]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004654:	e002      	b.n	800465c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004656:	887a      	ldrh	r2, [r7, #2]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800467a:	887a      	ldrh	r2, [r7, #2]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4013      	ands	r3, r2
 8004680:	041a      	lsls	r2, r3, #16
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	43d9      	mvns	r1, r3
 8004686:	887b      	ldrh	r3, [r7, #2]
 8004688:	400b      	ands	r3, r1
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	619a      	str	r2, [r3, #24]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046a6:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d006      	beq.n	80046c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046b2:	4a05      	ldr	r2, [pc, #20]	; (80046c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fd f940 	bl	8001940 <HAL_GPIO_EXTI_Callback>
  }
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40010400 	.word	0x40010400

080046cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d141      	bne.n	800475e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046da:	4b4b      	ldr	r3, [pc, #300]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e6:	d131      	bne.n	800474c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046e8:	4b47      	ldr	r3, [pc, #284]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ee:	4a46      	ldr	r2, [pc, #280]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046f8:	4b43      	ldr	r3, [pc, #268]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004700:	4a41      	ldr	r2, [pc, #260]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004706:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004708:	4b40      	ldr	r3, [pc, #256]	; (800480c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2232      	movs	r2, #50	; 0x32
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	4a3f      	ldr	r2, [pc, #252]	; (8004810 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	0c9b      	lsrs	r3, r3, #18
 800471a:	3301      	adds	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800471e:	e002      	b.n	8004726 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3b01      	subs	r3, #1
 8004724:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004726:	4b38      	ldr	r3, [pc, #224]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004732:	d102      	bne.n	800473a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f2      	bne.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800473a:	4b33      	ldr	r3, [pc, #204]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004746:	d158      	bne.n	80047fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e057      	b.n	80047fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800474c:	4b2e      	ldr	r3, [pc, #184]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004752:	4a2d      	ldr	r2, [pc, #180]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004758:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800475c:	e04d      	b.n	80047fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004764:	d141      	bne.n	80047ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004766:	4b28      	ldr	r3, [pc, #160]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800476e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004772:	d131      	bne.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004774:	4b24      	ldr	r3, [pc, #144]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800477a:	4a23      	ldr	r2, [pc, #140]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004780:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004784:	4b20      	ldr	r3, [pc, #128]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800478c:	4a1e      	ldr	r2, [pc, #120]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800478e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004792:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004794:	4b1d      	ldr	r3, [pc, #116]	; (800480c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2232      	movs	r2, #50	; 0x32
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	4a1c      	ldr	r2, [pc, #112]	; (8004810 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	0c9b      	lsrs	r3, r3, #18
 80047a6:	3301      	adds	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047aa:	e002      	b.n	80047b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047be:	d102      	bne.n	80047c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f2      	bne.n	80047ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047c6:	4b10      	ldr	r3, [pc, #64]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d2:	d112      	bne.n	80047fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e011      	b.n	80047fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047de:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047e8:	e007      	b.n	80047fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047ea:	4b07      	ldr	r3, [pc, #28]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047f2:	4a05      	ldr	r2, [pc, #20]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	40007000 	.word	0x40007000
 800480c:	20000004 	.word	0x20000004
 8004810:	431bde83 	.word	0x431bde83

08004814 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004818:	4b05      	ldr	r3, [pc, #20]	; (8004830 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4a04      	ldr	r2, [pc, #16]	; (8004830 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800481e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004822:	6093      	str	r3, [r2, #8]
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40007000 	.word	0x40007000

08004834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e2fe      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d075      	beq.n	800493e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004852:	4b97      	ldr	r3, [pc, #604]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 030c 	and.w	r3, r3, #12
 800485a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800485c:	4b94      	ldr	r3, [pc, #592]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b0c      	cmp	r3, #12
 800486a:	d102      	bne.n	8004872 <HAL_RCC_OscConfig+0x3e>
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2b03      	cmp	r3, #3
 8004870:	d002      	beq.n	8004878 <HAL_RCC_OscConfig+0x44>
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2b08      	cmp	r3, #8
 8004876:	d10b      	bne.n	8004890 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004878:	4b8d      	ldr	r3, [pc, #564]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d05b      	beq.n	800493c <HAL_RCC_OscConfig+0x108>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d157      	bne.n	800493c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e2d9      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004898:	d106      	bne.n	80048a8 <HAL_RCC_OscConfig+0x74>
 800489a:	4b85      	ldr	r3, [pc, #532]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a84      	ldr	r2, [pc, #528]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 80048a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	e01d      	b.n	80048e4 <HAL_RCC_OscConfig+0xb0>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048b0:	d10c      	bne.n	80048cc <HAL_RCC_OscConfig+0x98>
 80048b2:	4b7f      	ldr	r3, [pc, #508]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a7e      	ldr	r2, [pc, #504]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 80048b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	4b7c      	ldr	r3, [pc, #496]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a7b      	ldr	r2, [pc, #492]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 80048c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	e00b      	b.n	80048e4 <HAL_RCC_OscConfig+0xb0>
 80048cc:	4b78      	ldr	r3, [pc, #480]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a77      	ldr	r2, [pc, #476]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 80048d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	4b75      	ldr	r3, [pc, #468]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a74      	ldr	r2, [pc, #464]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 80048de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d013      	beq.n	8004914 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ec:	f7fd fd70 	bl	80023d0 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048f4:	f7fd fd6c 	bl	80023d0 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b64      	cmp	r3, #100	; 0x64
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e29e      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004906:	4b6a      	ldr	r3, [pc, #424]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0xc0>
 8004912:	e014      	b.n	800493e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004914:	f7fd fd5c 	bl	80023d0 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800491c:	f7fd fd58 	bl	80023d0 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b64      	cmp	r3, #100	; 0x64
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e28a      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800492e:	4b60      	ldr	r3, [pc, #384]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1f0      	bne.n	800491c <HAL_RCC_OscConfig+0xe8>
 800493a:	e000      	b.n	800493e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800493c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d075      	beq.n	8004a36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800494a:	4b59      	ldr	r3, [pc, #356]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 030c 	and.w	r3, r3, #12
 8004952:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004954:	4b56      	ldr	r3, [pc, #344]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b0c      	cmp	r3, #12
 8004962:	d102      	bne.n	800496a <HAL_RCC_OscConfig+0x136>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d002      	beq.n	8004970 <HAL_RCC_OscConfig+0x13c>
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b04      	cmp	r3, #4
 800496e:	d11f      	bne.n	80049b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004970:	4b4f      	ldr	r3, [pc, #316]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <HAL_RCC_OscConfig+0x154>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e25d      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004988:	4b49      	ldr	r3, [pc, #292]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	061b      	lsls	r3, r3, #24
 8004996:	4946      	ldr	r1, [pc, #280]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 8004998:	4313      	orrs	r3, r2
 800499a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800499c:	4b45      	ldr	r3, [pc, #276]	; (8004ab4 <HAL_RCC_OscConfig+0x280>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fd fcc9 	bl	8002338 <HAL_InitTick>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d043      	beq.n	8004a34 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e249      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d023      	beq.n	8004a00 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049b8:	4b3d      	ldr	r3, [pc, #244]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a3c      	ldr	r2, [pc, #240]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 80049be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fd fd04 	bl	80023d0 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049cc:	f7fd fd00 	bl	80023d0 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e232      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049de:	4b34      	ldr	r3, [pc, #208]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ea:	4b31      	ldr	r3, [pc, #196]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	061b      	lsls	r3, r3, #24
 80049f8:	492d      	ldr	r1, [pc, #180]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	604b      	str	r3, [r1, #4]
 80049fe:	e01a      	b.n	8004a36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a00:	4b2b      	ldr	r3, [pc, #172]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a2a      	ldr	r2, [pc, #168]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 8004a06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fd fce0 	bl	80023d0 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a14:	f7fd fcdc 	bl	80023d0 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e20e      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a26:	4b22      	ldr	r3, [pc, #136]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x1e0>
 8004a32:	e000      	b.n	8004a36 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d041      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01c      	beq.n	8004a84 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a4a:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 8004a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a50:	4a17      	ldr	r2, [pc, #92]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5a:	f7fd fcb9 	bl	80023d0 <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a62:	f7fd fcb5 	bl	80023d0 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e1e7      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a74:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 8004a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0ef      	beq.n	8004a62 <HAL_RCC_OscConfig+0x22e>
 8004a82:	e020      	b.n	8004ac6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a84:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 8004a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a8a:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <HAL_RCC_OscConfig+0x27c>)
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a94:	f7fd fc9c 	bl	80023d0 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a9a:	e00d      	b.n	8004ab8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a9c:	f7fd fc98 	bl	80023d0 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d906      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e1ca      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ab8:	4b8c      	ldr	r3, [pc, #560]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1ea      	bne.n	8004a9c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 80a6 	beq.w	8004c20 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ad8:	4b84      	ldr	r3, [pc, #528]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x2b4>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e000      	b.n	8004aea <HAL_RCC_OscConfig+0x2b6>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00d      	beq.n	8004b0a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aee:	4b7f      	ldr	r3, [pc, #508]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af2:	4a7e      	ldr	r2, [pc, #504]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af8:	6593      	str	r3, [r2, #88]	; 0x58
 8004afa:	4b7c      	ldr	r3, [pc, #496]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b06:	2301      	movs	r3, #1
 8004b08:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b0a:	4b79      	ldr	r3, [pc, #484]	; (8004cf0 <HAL_RCC_OscConfig+0x4bc>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d118      	bne.n	8004b48 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b16:	4b76      	ldr	r3, [pc, #472]	; (8004cf0 <HAL_RCC_OscConfig+0x4bc>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a75      	ldr	r2, [pc, #468]	; (8004cf0 <HAL_RCC_OscConfig+0x4bc>)
 8004b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b22:	f7fd fc55 	bl	80023d0 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b2a:	f7fd fc51 	bl	80023d0 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e183      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b3c:	4b6c      	ldr	r3, [pc, #432]	; (8004cf0 <HAL_RCC_OscConfig+0x4bc>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d108      	bne.n	8004b62 <HAL_RCC_OscConfig+0x32e>
 8004b50:	4b66      	ldr	r3, [pc, #408]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	4a65      	ldr	r2, [pc, #404]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b60:	e024      	b.n	8004bac <HAL_RCC_OscConfig+0x378>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	2b05      	cmp	r3, #5
 8004b68:	d110      	bne.n	8004b8c <HAL_RCC_OscConfig+0x358>
 8004b6a:	4b60      	ldr	r3, [pc, #384]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b70:	4a5e      	ldr	r2, [pc, #376]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004b72:	f043 0304 	orr.w	r3, r3, #4
 8004b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b7a:	4b5c      	ldr	r3, [pc, #368]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b80:	4a5a      	ldr	r2, [pc, #360]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b8a:	e00f      	b.n	8004bac <HAL_RCC_OscConfig+0x378>
 8004b8c:	4b57      	ldr	r3, [pc, #348]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b92:	4a56      	ldr	r2, [pc, #344]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004b94:	f023 0301 	bic.w	r3, r3, #1
 8004b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b9c:	4b53      	ldr	r3, [pc, #332]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba2:	4a52      	ldr	r2, [pc, #328]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004ba4:	f023 0304 	bic.w	r3, r3, #4
 8004ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d016      	beq.n	8004be2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb4:	f7fd fc0c 	bl	80023d0 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bba:	e00a      	b.n	8004bd2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bbc:	f7fd fc08 	bl	80023d0 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e138      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bd2:	4b46      	ldr	r3, [pc, #280]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0ed      	beq.n	8004bbc <HAL_RCC_OscConfig+0x388>
 8004be0:	e015      	b.n	8004c0e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be2:	f7fd fbf5 	bl	80023d0 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004be8:	e00a      	b.n	8004c00 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bea:	f7fd fbf1 	bl	80023d0 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e121      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c00:	4b3a      	ldr	r3, [pc, #232]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1ed      	bne.n	8004bea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c0e:	7ffb      	ldrb	r3, [r7, #31]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d105      	bne.n	8004c20 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c14:	4b35      	ldr	r3, [pc, #212]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c18:	4a34      	ldr	r2, [pc, #208]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0320 	and.w	r3, r3, #32
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d03c      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01c      	beq.n	8004c6e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c34:	4b2d      	ldr	r3, [pc, #180]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c3a:	4a2c      	ldr	r2, [pc, #176]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c44:	f7fd fbc4 	bl	80023d0 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c4c:	f7fd fbc0 	bl	80023d0 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e0f2      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c5e:	4b23      	ldr	r3, [pc, #140]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0ef      	beq.n	8004c4c <HAL_RCC_OscConfig+0x418>
 8004c6c:	e01b      	b.n	8004ca6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c6e:	4b1f      	ldr	r3, [pc, #124]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c74:	4a1d      	ldr	r2, [pc, #116]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004c76:	f023 0301 	bic.w	r3, r3, #1
 8004c7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7e:	f7fd fba7 	bl	80023d0 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c86:	f7fd fba3 	bl	80023d0 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e0d5      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c98:	4b14      	ldr	r3, [pc, #80]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1ef      	bne.n	8004c86 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 80c9 	beq.w	8004e42 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cb0:	4b0e      	ldr	r3, [pc, #56]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 030c 	and.w	r3, r3, #12
 8004cb8:	2b0c      	cmp	r3, #12
 8004cba:	f000 8083 	beq.w	8004dc4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d15e      	bne.n	8004d84 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc6:	4b09      	ldr	r3, [pc, #36]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a08      	ldr	r2, [pc, #32]	; (8004cec <HAL_RCC_OscConfig+0x4b8>)
 8004ccc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd2:	f7fd fb7d 	bl	80023d0 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd8:	e00c      	b.n	8004cf4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cda:	f7fd fb79 	bl	80023d0 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d905      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e0ab      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cf4:	4b55      	ldr	r3, [pc, #340]	; (8004e4c <HAL_RCC_OscConfig+0x618>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1ec      	bne.n	8004cda <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d00:	4b52      	ldr	r3, [pc, #328]	; (8004e4c <HAL_RCC_OscConfig+0x618>)
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	4b52      	ldr	r3, [pc, #328]	; (8004e50 <HAL_RCC_OscConfig+0x61c>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6a11      	ldr	r1, [r2, #32]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d10:	3a01      	subs	r2, #1
 8004d12:	0112      	lsls	r2, r2, #4
 8004d14:	4311      	orrs	r1, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004d1a:	0212      	lsls	r2, r2, #8
 8004d1c:	4311      	orrs	r1, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d22:	0852      	lsrs	r2, r2, #1
 8004d24:	3a01      	subs	r2, #1
 8004d26:	0552      	lsls	r2, r2, #21
 8004d28:	4311      	orrs	r1, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d2e:	0852      	lsrs	r2, r2, #1
 8004d30:	3a01      	subs	r2, #1
 8004d32:	0652      	lsls	r2, r2, #25
 8004d34:	4311      	orrs	r1, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d3a:	06d2      	lsls	r2, r2, #27
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	4943      	ldr	r1, [pc, #268]	; (8004e4c <HAL_RCC_OscConfig+0x618>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d44:	4b41      	ldr	r3, [pc, #260]	; (8004e4c <HAL_RCC_OscConfig+0x618>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a40      	ldr	r2, [pc, #256]	; (8004e4c <HAL_RCC_OscConfig+0x618>)
 8004d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d4e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d50:	4b3e      	ldr	r3, [pc, #248]	; (8004e4c <HAL_RCC_OscConfig+0x618>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4a3d      	ldr	r2, [pc, #244]	; (8004e4c <HAL_RCC_OscConfig+0x618>)
 8004d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5c:	f7fd fb38 	bl	80023d0 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d64:	f7fd fb34 	bl	80023d0 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e066      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d76:	4b35      	ldr	r3, [pc, #212]	; (8004e4c <HAL_RCC_OscConfig+0x618>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0x530>
 8004d82:	e05e      	b.n	8004e42 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d84:	4b31      	ldr	r3, [pc, #196]	; (8004e4c <HAL_RCC_OscConfig+0x618>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a30      	ldr	r2, [pc, #192]	; (8004e4c <HAL_RCC_OscConfig+0x618>)
 8004d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d90:	f7fd fb1e 	bl	80023d0 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d98:	f7fd fb1a 	bl	80023d0 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e04c      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004daa:	4b28      	ldr	r3, [pc, #160]	; (8004e4c <HAL_RCC_OscConfig+0x618>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1f0      	bne.n	8004d98 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004db6:	4b25      	ldr	r3, [pc, #148]	; (8004e4c <HAL_RCC_OscConfig+0x618>)
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	4924      	ldr	r1, [pc, #144]	; (8004e4c <HAL_RCC_OscConfig+0x618>)
 8004dbc:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <HAL_RCC_OscConfig+0x620>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	60cb      	str	r3, [r1, #12]
 8004dc2:	e03e      	b.n	8004e42 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e039      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004dd0:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <HAL_RCC_OscConfig+0x618>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 0203 	and.w	r2, r3, #3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d12c      	bne.n	8004e3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	3b01      	subs	r3, #1
 8004df0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d123      	bne.n	8004e3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d11b      	bne.n	8004e3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d113      	bne.n	8004e3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	085b      	lsrs	r3, r3, #1
 8004e22:	3b01      	subs	r3, #1
 8004e24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d109      	bne.n	8004e3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e34:	085b      	lsrs	r3, r3, #1
 8004e36:	3b01      	subs	r3, #1
 8004e38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d001      	beq.n	8004e42 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3720      	adds	r7, #32
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	019f800c 	.word	0x019f800c
 8004e54:	feeefffc 	.word	0xfeeefffc

08004e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e62:	2300      	movs	r3, #0
 8004e64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e11e      	b.n	80050ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e70:	4b91      	ldr	r3, [pc, #580]	; (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d910      	bls.n	8004ea0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7e:	4b8e      	ldr	r3, [pc, #568]	; (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 020f 	bic.w	r2, r3, #15
 8004e86:	498c      	ldr	r1, [pc, #560]	; (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b8a      	ldr	r3, [pc, #552]	; (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e106      	b.n	80050ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d073      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d129      	bne.n	8004f08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eb4:	4b81      	ldr	r3, [pc, #516]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0f4      	b.n	80050ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ec4:	f000 f99e 	bl	8005204 <RCC_GetSysClockFreqFromPLLSource>
 8004ec8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4a7c      	ldr	r2, [pc, #496]	; (80050c0 <HAL_RCC_ClockConfig+0x268>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d93f      	bls.n	8004f52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ed2:	4b7a      	ldr	r3, [pc, #488]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d033      	beq.n	8004f52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d12f      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ef2:	4b72      	ldr	r3, [pc, #456]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004efa:	4a70      	ldr	r2, [pc, #448]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f02:	2380      	movs	r3, #128	; 0x80
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e024      	b.n	8004f52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d107      	bne.n	8004f20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f10:	4b6a      	ldr	r3, [pc, #424]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d109      	bne.n	8004f30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e0c6      	b.n	80050ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f20:	4b66      	ldr	r3, [pc, #408]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0be      	b.n	80050ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f30:	f000 f8ce 	bl	80050d0 <HAL_RCC_GetSysClockFreq>
 8004f34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4a61      	ldr	r2, [pc, #388]	; (80050c0 <HAL_RCC_ClockConfig+0x268>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d909      	bls.n	8004f52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f3e:	4b5f      	ldr	r3, [pc, #380]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f46:	4a5d      	ldr	r2, [pc, #372]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f4e:	2380      	movs	r3, #128	; 0x80
 8004f50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f52:	4b5a      	ldr	r3, [pc, #360]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f023 0203 	bic.w	r2, r3, #3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	4957      	ldr	r1, [pc, #348]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f64:	f7fd fa34 	bl	80023d0 <HAL_GetTick>
 8004f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6a:	e00a      	b.n	8004f82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f6c:	f7fd fa30 	bl	80023d0 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e095      	b.n	80050ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f82:	4b4e      	ldr	r3, [pc, #312]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 020c 	and.w	r2, r3, #12
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d1eb      	bne.n	8004f6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d023      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fac:	4b43      	ldr	r3, [pc, #268]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	4a42      	ldr	r2, [pc, #264]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004fb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d007      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004fc4:	4b3d      	ldr	r3, [pc, #244]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004fcc:	4a3b      	ldr	r2, [pc, #236]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004fce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd4:	4b39      	ldr	r3, [pc, #228]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	4936      	ldr	r1, [pc, #216]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	608b      	str	r3, [r1, #8]
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2b80      	cmp	r3, #128	; 0x80
 8004fec:	d105      	bne.n	8004ffa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004fee:	4b33      	ldr	r3, [pc, #204]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	4a32      	ldr	r2, [pc, #200]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8004ff4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ff8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ffa:	4b2f      	ldr	r3, [pc, #188]	; (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d21d      	bcs.n	8005044 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005008:	4b2b      	ldr	r3, [pc, #172]	; (80050b8 <HAL_RCC_ClockConfig+0x260>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f023 020f 	bic.w	r2, r3, #15
 8005010:	4929      	ldr	r1, [pc, #164]	; (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	4313      	orrs	r3, r2
 8005016:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005018:	f7fd f9da 	bl	80023d0 <HAL_GetTick>
 800501c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800501e:	e00a      	b.n	8005036 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005020:	f7fd f9d6 	bl	80023d0 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	f241 3288 	movw	r2, #5000	; 0x1388
 800502e:	4293      	cmp	r3, r2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e03b      	b.n	80050ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005036:	4b20      	ldr	r3, [pc, #128]	; (80050b8 <HAL_RCC_ClockConfig+0x260>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d1ed      	bne.n	8005020 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d008      	beq.n	8005062 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4917      	ldr	r1, [pc, #92]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 800505e:	4313      	orrs	r3, r2
 8005060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800506e:	4b13      	ldr	r3, [pc, #76]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	490f      	ldr	r1, [pc, #60]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 800507e:	4313      	orrs	r3, r2
 8005080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005082:	f000 f825 	bl	80050d0 <HAL_RCC_GetSysClockFreq>
 8005086:	4602      	mov	r2, r0
 8005088:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <HAL_RCC_ClockConfig+0x264>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	490c      	ldr	r1, [pc, #48]	; (80050c4 <HAL_RCC_ClockConfig+0x26c>)
 8005094:	5ccb      	ldrb	r3, [r1, r3]
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	fa22 f303 	lsr.w	r3, r2, r3
 800509e:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <HAL_RCC_ClockConfig+0x270>)
 80050a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050a2:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <HAL_RCC_ClockConfig+0x274>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fd f946 	bl	8002338 <HAL_InitTick>
 80050ac:	4603      	mov	r3, r0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40022000 	.word	0x40022000
 80050bc:	40021000 	.word	0x40021000
 80050c0:	04c4b400 	.word	0x04c4b400
 80050c4:	08008ce0 	.word	0x08008ce0
 80050c8:	20000004 	.word	0x20000004
 80050cc:	20000008 	.word	0x20000008

080050d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80050d6:	4b2c      	ldr	r3, [pc, #176]	; (8005188 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 030c 	and.w	r3, r3, #12
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d102      	bne.n	80050e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050e2:	4b2a      	ldr	r3, [pc, #168]	; (800518c <HAL_RCC_GetSysClockFreq+0xbc>)
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	e047      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80050e8:	4b27      	ldr	r3, [pc, #156]	; (8005188 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 030c 	and.w	r3, r3, #12
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d102      	bne.n	80050fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050f4:	4b26      	ldr	r3, [pc, #152]	; (8005190 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	e03e      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80050fa:	4b23      	ldr	r3, [pc, #140]	; (8005188 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	2b0c      	cmp	r3, #12
 8005104:	d136      	bne.n	8005174 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005106:	4b20      	ldr	r3, [pc, #128]	; (8005188 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005110:	4b1d      	ldr	r3, [pc, #116]	; (8005188 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	091b      	lsrs	r3, r3, #4
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	3301      	adds	r3, #1
 800511c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b03      	cmp	r3, #3
 8005122:	d10c      	bne.n	800513e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005124:	4a1a      	ldr	r2, [pc, #104]	; (8005190 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	4a16      	ldr	r2, [pc, #88]	; (8005188 <HAL_RCC_GetSysClockFreq+0xb8>)
 800512e:	68d2      	ldr	r2, [r2, #12]
 8005130:	0a12      	lsrs	r2, r2, #8
 8005132:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005136:	fb02 f303 	mul.w	r3, r2, r3
 800513a:	617b      	str	r3, [r7, #20]
      break;
 800513c:	e00c      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800513e:	4a13      	ldr	r2, [pc, #76]	; (800518c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	fbb2 f3f3 	udiv	r3, r2, r3
 8005146:	4a10      	ldr	r2, [pc, #64]	; (8005188 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005148:	68d2      	ldr	r2, [r2, #12]
 800514a:	0a12      	lsrs	r2, r2, #8
 800514c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005150:	fb02 f303 	mul.w	r3, r2, r3
 8005154:	617b      	str	r3, [r7, #20]
      break;
 8005156:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <HAL_RCC_GetSysClockFreq+0xb8>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	0e5b      	lsrs	r3, r3, #25
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	3301      	adds	r3, #1
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	e001      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005178:	693b      	ldr	r3, [r7, #16]
}
 800517a:	4618      	mov	r0, r3
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40021000 	.word	0x40021000
 800518c:	00f42400 	.word	0x00f42400
 8005190:	016e3600 	.word	0x016e3600

08005194 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005198:	4b03      	ldr	r3, [pc, #12]	; (80051a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800519a:	681b      	ldr	r3, [r3, #0]
}
 800519c:	4618      	mov	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20000004 	.word	0x20000004

080051ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051b0:	f7ff fff0 	bl	8005194 <HAL_RCC_GetHCLKFreq>
 80051b4:	4602      	mov	r2, r0
 80051b6:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	0a1b      	lsrs	r3, r3, #8
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	4904      	ldr	r1, [pc, #16]	; (80051d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051c2:	5ccb      	ldrb	r3, [r1, r3]
 80051c4:	f003 031f 	and.w	r3, r3, #31
 80051c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40021000 	.word	0x40021000
 80051d4:	08008cf0 	.word	0x08008cf0

080051d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051dc:	f7ff ffda 	bl	8005194 <HAL_RCC_GetHCLKFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b06      	ldr	r3, [pc, #24]	; (80051fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	0adb      	lsrs	r3, r3, #11
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	4904      	ldr	r1, [pc, #16]	; (8005200 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40021000 	.word	0x40021000
 8005200:	08008cf0 	.word	0x08008cf0

08005204 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800520a:	4b1e      	ldr	r3, [pc, #120]	; (8005284 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005214:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	3301      	adds	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d10c      	bne.n	8005242 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005228:	4a17      	ldr	r2, [pc, #92]	; (8005288 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005230:	4a14      	ldr	r2, [pc, #80]	; (8005284 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005232:	68d2      	ldr	r2, [r2, #12]
 8005234:	0a12      	lsrs	r2, r2, #8
 8005236:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800523a:	fb02 f303 	mul.w	r3, r2, r3
 800523e:	617b      	str	r3, [r7, #20]
    break;
 8005240:	e00c      	b.n	800525c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005242:	4a12      	ldr	r2, [pc, #72]	; (800528c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	fbb2 f3f3 	udiv	r3, r2, r3
 800524a:	4a0e      	ldr	r2, [pc, #56]	; (8005284 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800524c:	68d2      	ldr	r2, [r2, #12]
 800524e:	0a12      	lsrs	r2, r2, #8
 8005250:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005254:	fb02 f303 	mul.w	r3, r2, r3
 8005258:	617b      	str	r3, [r7, #20]
    break;
 800525a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800525c:	4b09      	ldr	r3, [pc, #36]	; (8005284 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	0e5b      	lsrs	r3, r3, #25
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	3301      	adds	r3, #1
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	fbb2 f3f3 	udiv	r3, r2, r3
 8005274:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005276:	687b      	ldr	r3, [r7, #4]
}
 8005278:	4618      	mov	r0, r3
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	40021000 	.word	0x40021000
 8005288:	016e3600 	.word	0x016e3600
 800528c:	00f42400 	.word	0x00f42400

08005290 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005298:	2300      	movs	r3, #0
 800529a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800529c:	2300      	movs	r3, #0
 800529e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8098 	beq.w	80053de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ae:	2300      	movs	r3, #0
 80052b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052b2:	4b43      	ldr	r3, [pc, #268]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10d      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052be:	4b40      	ldr	r3, [pc, #256]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c2:	4a3f      	ldr	r2, [pc, #252]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c8:	6593      	str	r3, [r2, #88]	; 0x58
 80052ca:	4b3d      	ldr	r3, [pc, #244]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d2:	60bb      	str	r3, [r7, #8]
 80052d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052d6:	2301      	movs	r3, #1
 80052d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052da:	4b3a      	ldr	r3, [pc, #232]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a39      	ldr	r2, [pc, #228]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052e6:	f7fd f873 	bl	80023d0 <HAL_GetTick>
 80052ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ec:	e009      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ee:	f7fd f86f 	bl	80023d0 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d902      	bls.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	74fb      	strb	r3, [r7, #19]
        break;
 8005300:	e005      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005302:	4b30      	ldr	r3, [pc, #192]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0ef      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800530e:	7cfb      	ldrb	r3, [r7, #19]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d159      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005314:	4b2a      	ldr	r3, [pc, #168]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01e      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	429a      	cmp	r2, r3
 800532e:	d019      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005330:	4b23      	ldr	r3, [pc, #140]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800533c:	4b20      	ldr	r3, [pc, #128]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005342:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800534c:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	4a1b      	ldr	r2, [pc, #108]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800535c:	4a18      	ldr	r2, [pc, #96]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d016      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536e:	f7fd f82f 	bl	80023d0 <HAL_GetTick>
 8005372:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005374:	e00b      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005376:	f7fd f82b 	bl	80023d0 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f241 3288 	movw	r2, #5000	; 0x1388
 8005384:	4293      	cmp	r3, r2
 8005386:	d902      	bls.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	74fb      	strb	r3, [r7, #19]
            break;
 800538c:	e006      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800538e:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0ec      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800539c:	7cfb      	ldrb	r3, [r7, #19]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10b      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b0:	4903      	ldr	r1, [pc, #12]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053b8:	e008      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053ba:	7cfb      	ldrb	r3, [r7, #19]
 80053bc:	74bb      	strb	r3, [r7, #18]
 80053be:	e005      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80053c0:	40021000 	.word	0x40021000
 80053c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c8:	7cfb      	ldrb	r3, [r7, #19]
 80053ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053cc:	7c7b      	ldrb	r3, [r7, #17]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d105      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d2:	4ba7      	ldr	r3, [pc, #668]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d6:	4aa6      	ldr	r2, [pc, #664]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053ea:	4ba1      	ldr	r3, [pc, #644]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f0:	f023 0203 	bic.w	r2, r3, #3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	499d      	ldr	r1, [pc, #628]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00a      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800540c:	4b98      	ldr	r3, [pc, #608]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f023 020c 	bic.w	r2, r3, #12
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	4995      	ldr	r1, [pc, #596]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800542e:	4b90      	ldr	r3, [pc, #576]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005434:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	498c      	ldr	r1, [pc, #560]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005450:	4b87      	ldr	r3, [pc, #540]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005456:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	4984      	ldr	r1, [pc, #528]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0310 	and.w	r3, r3, #16
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005472:	4b7f      	ldr	r3, [pc, #508]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	497b      	ldr	r1, [pc, #492]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005494:	4b76      	ldr	r3, [pc, #472]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	4973      	ldr	r1, [pc, #460]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054b6:	4b6e      	ldr	r3, [pc, #440]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	496a      	ldr	r1, [pc, #424]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054d8:	4b65      	ldr	r3, [pc, #404]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	4962      	ldr	r1, [pc, #392]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054fa:	4b5d      	ldr	r3, [pc, #372]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005500:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	4959      	ldr	r1, [pc, #356]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550a:	4313      	orrs	r3, r2
 800550c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800551c:	4b54      	ldr	r3, [pc, #336]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800551e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005522:	f023 0203 	bic.w	r2, r3, #3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	4951      	ldr	r1, [pc, #324]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800553e:	4b4c      	ldr	r3, [pc, #304]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005544:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	4948      	ldr	r1, [pc, #288]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800555c:	2b00      	cmp	r3, #0
 800555e:	d015      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005560:	4b43      	ldr	r3, [pc, #268]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005566:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	4940      	ldr	r1, [pc, #256]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800557e:	d105      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005580:	4b3b      	ldr	r3, [pc, #236]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	4a3a      	ldr	r2, [pc, #232]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800558a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005594:	2b00      	cmp	r3, #0
 8005596:	d015      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005598:	4b35      	ldr	r3, [pc, #212]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a6:	4932      	ldr	r1, [pc, #200]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055b6:	d105      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b8:	4b2d      	ldr	r3, [pc, #180]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4a2c      	ldr	r2, [pc, #176]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055c2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d015      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055d0:	4b27      	ldr	r3, [pc, #156]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	4924      	ldr	r1, [pc, #144]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055ee:	d105      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055f0:	4b1f      	ldr	r3, [pc, #124]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	4a1e      	ldr	r2, [pc, #120]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d015      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005608:	4b19      	ldr	r3, [pc, #100]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	4916      	ldr	r1, [pc, #88]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005626:	d105      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005628:	4b11      	ldr	r3, [pc, #68]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4a10      	ldr	r2, [pc, #64]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005632:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d019      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005646:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	4908      	ldr	r1, [pc, #32]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800565e:	d109      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005660:	4b03      	ldr	r3, [pc, #12]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	4a02      	ldr	r2, [pc, #8]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800566a:	60d3      	str	r3, [r2, #12]
 800566c:	e002      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800566e:	bf00      	nop
 8005670:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d015      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005680:	4b29      	ldr	r3, [pc, #164]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005686:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568e:	4926      	ldr	r1, [pc, #152]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800569e:	d105      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056a0:	4b21      	ldr	r3, [pc, #132]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4a20      	ldr	r2, [pc, #128]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056aa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d015      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80056b8:	4b1b      	ldr	r3, [pc, #108]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056be:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c6:	4918      	ldr	r1, [pc, #96]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d6:	d105      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056d8:	4b13      	ldr	r3, [pc, #76]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	4a12      	ldr	r2, [pc, #72]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d015      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80056f0:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fe:	490a      	ldr	r1, [pc, #40]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800570e:	d105      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4a04      	ldr	r2, [pc, #16]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800571a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800571c:	7cbb      	ldrb	r3, [r7, #18]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	40021000 	.word	0x40021000

0800572c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e049      	b.n	80057d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fc fc54 	bl	8002000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	4619      	mov	r1, r3
 800576a:	4610      	mov	r0, r2
 800576c:	f000 ff68 	bl	8006640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d001      	beq.n	80057f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e04c      	b.n	800588e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a26      	ldr	r2, [pc, #152]	; (800589c <HAL_TIM_Base_Start+0xc0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d022      	beq.n	800584c <HAL_TIM_Base_Start+0x70>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580e:	d01d      	beq.n	800584c <HAL_TIM_Base_Start+0x70>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a22      	ldr	r2, [pc, #136]	; (80058a0 <HAL_TIM_Base_Start+0xc4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d018      	beq.n	800584c <HAL_TIM_Base_Start+0x70>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <HAL_TIM_Base_Start+0xc8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d013      	beq.n	800584c <HAL_TIM_Base_Start+0x70>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1f      	ldr	r2, [pc, #124]	; (80058a8 <HAL_TIM_Base_Start+0xcc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00e      	beq.n	800584c <HAL_TIM_Base_Start+0x70>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1e      	ldr	r2, [pc, #120]	; (80058ac <HAL_TIM_Base_Start+0xd0>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d009      	beq.n	800584c <HAL_TIM_Base_Start+0x70>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a1c      	ldr	r2, [pc, #112]	; (80058b0 <HAL_TIM_Base_Start+0xd4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <HAL_TIM_Base_Start+0x70>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1b      	ldr	r2, [pc, #108]	; (80058b4 <HAL_TIM_Base_Start+0xd8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d115      	bne.n	8005878 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <HAL_TIM_Base_Start+0xdc>)
 8005854:	4013      	ands	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b06      	cmp	r3, #6
 800585c:	d015      	beq.n	800588a <HAL_TIM_Base_Start+0xae>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005864:	d011      	beq.n	800588a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0201 	orr.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005876:	e008      	b.n	800588a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	e000      	b.n	800588c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40012c00 	.word	0x40012c00
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800
 80058a8:	40000c00 	.word	0x40000c00
 80058ac:	40013400 	.word	0x40013400
 80058b0:	40014000 	.word	0x40014000
 80058b4:	40015000 	.word	0x40015000
 80058b8:	00010007 	.word	0x00010007

080058bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d001      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e054      	b.n	800597e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0201 	orr.w	r2, r2, #1
 80058ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a26      	ldr	r2, [pc, #152]	; (800598c <HAL_TIM_Base_Start_IT+0xd0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d022      	beq.n	800593c <HAL_TIM_Base_Start_IT+0x80>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fe:	d01d      	beq.n	800593c <HAL_TIM_Base_Start_IT+0x80>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a22      	ldr	r2, [pc, #136]	; (8005990 <HAL_TIM_Base_Start_IT+0xd4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d018      	beq.n	800593c <HAL_TIM_Base_Start_IT+0x80>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a21      	ldr	r2, [pc, #132]	; (8005994 <HAL_TIM_Base_Start_IT+0xd8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d013      	beq.n	800593c <HAL_TIM_Base_Start_IT+0x80>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1f      	ldr	r2, [pc, #124]	; (8005998 <HAL_TIM_Base_Start_IT+0xdc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00e      	beq.n	800593c <HAL_TIM_Base_Start_IT+0x80>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a1e      	ldr	r2, [pc, #120]	; (800599c <HAL_TIM_Base_Start_IT+0xe0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d009      	beq.n	800593c <HAL_TIM_Base_Start_IT+0x80>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1c      	ldr	r2, [pc, #112]	; (80059a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d004      	beq.n	800593c <HAL_TIM_Base_Start_IT+0x80>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d115      	bne.n	8005968 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	4b19      	ldr	r3, [pc, #100]	; (80059a8 <HAL_TIM_Base_Start_IT+0xec>)
 8005944:	4013      	ands	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b06      	cmp	r3, #6
 800594c:	d015      	beq.n	800597a <HAL_TIM_Base_Start_IT+0xbe>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005954:	d011      	beq.n	800597a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005966:	e008      	b.n	800597a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e000      	b.n	800597c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40012c00 	.word	0x40012c00
 8005990:	40000400 	.word	0x40000400
 8005994:	40000800 	.word	0x40000800
 8005998:	40000c00 	.word	0x40000c00
 800599c:	40013400 	.word	0x40013400
 80059a0:	40014000 	.word	0x40014000
 80059a4:	40015000 	.word	0x40015000
 80059a8:	00010007 	.word	0x00010007

080059ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e049      	b.n	8005a52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d106      	bne.n	80059d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f841 	bl	8005a5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3304      	adds	r3, #4
 80059e8:	4619      	mov	r1, r3
 80059ea:	4610      	mov	r0, r2
 80059ec:	f000 fe28 	bl	8006640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d109      	bne.n	8005a94 <HAL_TIM_PWM_Start+0x24>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	e03c      	b.n	8005b0e <HAL_TIM_PWM_Start+0x9e>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d109      	bne.n	8005aae <HAL_TIM_PWM_Start+0x3e>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	bf14      	ite	ne
 8005aa6:	2301      	movne	r3, #1
 8005aa8:	2300      	moveq	r3, #0
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	e02f      	b.n	8005b0e <HAL_TIM_PWM_Start+0x9e>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d109      	bne.n	8005ac8 <HAL_TIM_PWM_Start+0x58>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	bf14      	ite	ne
 8005ac0:	2301      	movne	r3, #1
 8005ac2:	2300      	moveq	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	e022      	b.n	8005b0e <HAL_TIM_PWM_Start+0x9e>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b0c      	cmp	r3, #12
 8005acc:	d109      	bne.n	8005ae2 <HAL_TIM_PWM_Start+0x72>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	bf14      	ite	ne
 8005ada:	2301      	movne	r3, #1
 8005adc:	2300      	moveq	r3, #0
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	e015      	b.n	8005b0e <HAL_TIM_PWM_Start+0x9e>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b10      	cmp	r3, #16
 8005ae6:	d109      	bne.n	8005afc <HAL_TIM_PWM_Start+0x8c>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	bf14      	ite	ne
 8005af4:	2301      	movne	r3, #1
 8005af6:	2300      	moveq	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	e008      	b.n	8005b0e <HAL_TIM_PWM_Start+0x9e>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	bf14      	ite	ne
 8005b08:	2301      	movne	r3, #1
 8005b0a:	2300      	moveq	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e0a6      	b.n	8005c64 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d104      	bne.n	8005b26 <HAL_TIM_PWM_Start+0xb6>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b24:	e023      	b.n	8005b6e <HAL_TIM_PWM_Start+0xfe>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d104      	bne.n	8005b36 <HAL_TIM_PWM_Start+0xc6>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b34:	e01b      	b.n	8005b6e <HAL_TIM_PWM_Start+0xfe>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d104      	bne.n	8005b46 <HAL_TIM_PWM_Start+0xd6>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b44:	e013      	b.n	8005b6e <HAL_TIM_PWM_Start+0xfe>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b0c      	cmp	r3, #12
 8005b4a:	d104      	bne.n	8005b56 <HAL_TIM_PWM_Start+0xe6>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b54:	e00b      	b.n	8005b6e <HAL_TIM_PWM_Start+0xfe>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d104      	bne.n	8005b66 <HAL_TIM_PWM_Start+0xf6>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b64:	e003      	b.n	8005b6e <HAL_TIM_PWM_Start+0xfe>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2201      	movs	r2, #1
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 f9dc 	bl	8006f34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a3a      	ldr	r2, [pc, #232]	; (8005c6c <HAL_TIM_PWM_Start+0x1fc>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d018      	beq.n	8005bb8 <HAL_TIM_PWM_Start+0x148>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a39      	ldr	r2, [pc, #228]	; (8005c70 <HAL_TIM_PWM_Start+0x200>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <HAL_TIM_PWM_Start+0x148>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a37      	ldr	r2, [pc, #220]	; (8005c74 <HAL_TIM_PWM_Start+0x204>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00e      	beq.n	8005bb8 <HAL_TIM_PWM_Start+0x148>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a36      	ldr	r2, [pc, #216]	; (8005c78 <HAL_TIM_PWM_Start+0x208>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d009      	beq.n	8005bb8 <HAL_TIM_PWM_Start+0x148>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a34      	ldr	r2, [pc, #208]	; (8005c7c <HAL_TIM_PWM_Start+0x20c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_TIM_PWM_Start+0x148>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a33      	ldr	r2, [pc, #204]	; (8005c80 <HAL_TIM_PWM_Start+0x210>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d101      	bne.n	8005bbc <HAL_TIM_PWM_Start+0x14c>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e000      	b.n	8005bbe <HAL_TIM_PWM_Start+0x14e>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d007      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <HAL_TIM_PWM_Start+0x1fc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d022      	beq.n	8005c22 <HAL_TIM_PWM_Start+0x1b2>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be4:	d01d      	beq.n	8005c22 <HAL_TIM_PWM_Start+0x1b2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a26      	ldr	r2, [pc, #152]	; (8005c84 <HAL_TIM_PWM_Start+0x214>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d018      	beq.n	8005c22 <HAL_TIM_PWM_Start+0x1b2>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a24      	ldr	r2, [pc, #144]	; (8005c88 <HAL_TIM_PWM_Start+0x218>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <HAL_TIM_PWM_Start+0x1b2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a23      	ldr	r2, [pc, #140]	; (8005c8c <HAL_TIM_PWM_Start+0x21c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00e      	beq.n	8005c22 <HAL_TIM_PWM_Start+0x1b2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a19      	ldr	r2, [pc, #100]	; (8005c70 <HAL_TIM_PWM_Start+0x200>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d009      	beq.n	8005c22 <HAL_TIM_PWM_Start+0x1b2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a18      	ldr	r2, [pc, #96]	; (8005c74 <HAL_TIM_PWM_Start+0x204>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d004      	beq.n	8005c22 <HAL_TIM_PWM_Start+0x1b2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a18      	ldr	r2, [pc, #96]	; (8005c80 <HAL_TIM_PWM_Start+0x210>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d115      	bne.n	8005c4e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	4b19      	ldr	r3, [pc, #100]	; (8005c90 <HAL_TIM_PWM_Start+0x220>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b06      	cmp	r3, #6
 8005c32:	d015      	beq.n	8005c60 <HAL_TIM_PWM_Start+0x1f0>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3a:	d011      	beq.n	8005c60 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4c:	e008      	b.n	8005c60 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f042 0201 	orr.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	e000      	b.n	8005c62 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	40013400 	.word	0x40013400
 8005c74:	40014000 	.word	0x40014000
 8005c78:	40014400 	.word	0x40014400
 8005c7c:	40014800 	.word	0x40014800
 8005c80:	40015000 	.word	0x40015000
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800
 8005c8c:	40000c00 	.word	0x40000c00
 8005c90:	00010007 	.word	0x00010007

08005c94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e097      	b.n	8005dd8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d106      	bne.n	8005cc2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7fc f95b 	bl	8001f78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6812      	ldr	r2, [r2, #0]
 8005cd4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005cd8:	f023 0307 	bic.w	r3, r3, #7
 8005cdc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4610      	mov	r0, r2
 8005cea:	f000 fca9 	bl	8006640 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d16:	f023 0303 	bic.w	r3, r3, #3
 8005d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	021b      	lsls	r3, r3, #8
 8005d26:	4313      	orrs	r3, r2
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005d34:	f023 030c 	bic.w	r3, r3, #12
 8005d38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	021b      	lsls	r3, r3, #8
 8005d50:	4313      	orrs	r3, r2
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	011a      	lsls	r2, r3, #4
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	031b      	lsls	r3, r3, #12
 8005d64:	4313      	orrs	r3, r2
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d72:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d7a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	4313      	orrs	r3, r2
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005df0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005df8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e00:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e08:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d110      	bne.n	8005e32 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d102      	bne.n	8005e1c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e16:	7b7b      	ldrb	r3, [r7, #13]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d001      	beq.n	8005e20 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e069      	b.n	8005ef4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e30:	e031      	b.n	8005e96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	d110      	bne.n	8005e5a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e38:	7bbb      	ldrb	r3, [r7, #14]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d102      	bne.n	8005e44 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e3e:	7b3b      	ldrb	r3, [r7, #12]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d001      	beq.n	8005e48 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e055      	b.n	8005ef4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e58:	e01d      	b.n	8005e96 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d108      	bne.n	8005e72 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e60:	7bbb      	ldrb	r3, [r7, #14]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d105      	bne.n	8005e72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e66:	7b7b      	ldrb	r3, [r7, #13]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d102      	bne.n	8005e72 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e6c:	7b3b      	ldrb	r3, [r7, #12]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d001      	beq.n	8005e76 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e03e      	b.n	8005ef4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2202      	movs	r2, #2
 8005e82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_TIM_Encoder_Start+0xc4>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d008      	beq.n	8005eb4 <HAL_TIM_Encoder_Start+0xd4>
 8005ea2:	e00f      	b.n	8005ec4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	2100      	movs	r1, #0
 8005eac:	4618      	mov	r0, r3
 8005eae:	f001 f841 	bl	8006f34 <TIM_CCxChannelCmd>
      break;
 8005eb2:	e016      	b.n	8005ee2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	2104      	movs	r1, #4
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 f839 	bl	8006f34 <TIM_CCxChannelCmd>
      break;
 8005ec2:	e00e      	b.n	8005ee2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	2100      	movs	r1, #0
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f001 f831 	bl	8006f34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	2104      	movs	r1, #4
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 f82a 	bl	8006f34 <TIM_CCxChannelCmd>
      break;
 8005ee0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 0201 	orr.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d020      	beq.n	8005f60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01b      	beq.n	8005f60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0202 	mvn.w	r2, #2
 8005f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fb5c 	bl	8006604 <HAL_TIM_IC_CaptureCallback>
 8005f4c:	e005      	b.n	8005f5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fb4e 	bl	80065f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fb5f 	bl	8006618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d020      	beq.n	8005fac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01b      	beq.n	8005fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0204 	mvn.w	r2, #4
 8005f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2202      	movs	r2, #2
 8005f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fb36 	bl	8006604 <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fb28 	bl	80065f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fb39 	bl	8006618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d020      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01b      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0208 	mvn.w	r2, #8
 8005fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2204      	movs	r2, #4
 8005fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fb10 	bl	8006604 <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e005      	b.n	8005ff2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fb02 	bl	80065f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fb13 	bl	8006618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f003 0310 	and.w	r3, r3, #16
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d020      	beq.n	8006044 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01b      	beq.n	8006044 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0210 	mvn.w	r2, #16
 8006014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2208      	movs	r2, #8
 800601a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 faea 	bl	8006604 <HAL_TIM_IC_CaptureCallback>
 8006030:	e005      	b.n	800603e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fadc 	bl	80065f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 faed 	bl	8006618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00c      	beq.n	8006068 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0201 	mvn.w	r2, #1
 8006060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fb fdd4 	bl	8001c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606e:	2b00      	cmp	r3, #0
 8006070:	d104      	bne.n	800607c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00c      	beq.n	8006096 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	2b00      	cmp	r3, #0
 8006084:	d007      	beq.n	8006096 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800608e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f001 f8a9 	bl	80071e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00c      	beq.n	80060ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d007      	beq.n	80060ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f001 f8a1 	bl	80071fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00c      	beq.n	80060de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d007      	beq.n	80060de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 faa7 	bl	800662c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00c      	beq.n	8006102 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f06f 0220 	mvn.w	r2, #32
 80060fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f001 f869 	bl	80071d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00c      	beq.n	8006126 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800611e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f001 f875 	bl	8007210 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00c      	beq.n	800614a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 f86d 	bl	8007224 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00c      	beq.n	800616e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d007      	beq.n	800616e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f001 f865 	bl	8007238 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00c      	beq.n	8006192 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800618a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 f85d 	bl	800724c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e0ff      	b.n	80063ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b14      	cmp	r3, #20
 80061c6:	f200 80f0 	bhi.w	80063aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80061ca:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d0:	08006225 	.word	0x08006225
 80061d4:	080063ab 	.word	0x080063ab
 80061d8:	080063ab 	.word	0x080063ab
 80061dc:	080063ab 	.word	0x080063ab
 80061e0:	08006265 	.word	0x08006265
 80061e4:	080063ab 	.word	0x080063ab
 80061e8:	080063ab 	.word	0x080063ab
 80061ec:	080063ab 	.word	0x080063ab
 80061f0:	080062a7 	.word	0x080062a7
 80061f4:	080063ab 	.word	0x080063ab
 80061f8:	080063ab 	.word	0x080063ab
 80061fc:	080063ab 	.word	0x080063ab
 8006200:	080062e7 	.word	0x080062e7
 8006204:	080063ab 	.word	0x080063ab
 8006208:	080063ab 	.word	0x080063ab
 800620c:	080063ab 	.word	0x080063ab
 8006210:	08006329 	.word	0x08006329
 8006214:	080063ab 	.word	0x080063ab
 8006218:	080063ab 	.word	0x080063ab
 800621c:	080063ab 	.word	0x080063ab
 8006220:	08006369 	.word	0x08006369
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fabc 	bl	80067a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699a      	ldr	r2, [r3, #24]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0208 	orr.w	r2, r2, #8
 800623e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0204 	bic.w	r2, r2, #4
 800624e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6999      	ldr	r1, [r3, #24]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	619a      	str	r2, [r3, #24]
      break;
 8006262:	e0a5      	b.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fb36 	bl	80068dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800627e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800628e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6999      	ldr	r1, [r3, #24]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	021a      	lsls	r2, r3, #8
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	619a      	str	r2, [r3, #24]
      break;
 80062a4:	e084      	b.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 fba9 	bl	8006a04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69da      	ldr	r2, [r3, #28]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0208 	orr.w	r2, r2, #8
 80062c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69da      	ldr	r2, [r3, #28]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0204 	bic.w	r2, r2, #4
 80062d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69d9      	ldr	r1, [r3, #28]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	61da      	str	r2, [r3, #28]
      break;
 80062e4:	e064      	b.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68b9      	ldr	r1, [r7, #8]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f000 fc1b 	bl	8006b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69da      	ldr	r2, [r3, #28]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69da      	ldr	r2, [r3, #28]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69d9      	ldr	r1, [r3, #28]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	021a      	lsls	r2, r3, #8
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	61da      	str	r2, [r3, #28]
      break;
 8006326:	e043      	b.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68b9      	ldr	r1, [r7, #8]
 800632e:	4618      	mov	r0, r3
 8006330:	f000 fc8e 	bl	8006c50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0208 	orr.w	r2, r2, #8
 8006342:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0204 	bic.w	r2, r2, #4
 8006352:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	691a      	ldr	r2, [r3, #16]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006366:	e023      	b.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68b9      	ldr	r1, [r7, #8]
 800636e:	4618      	mov	r0, r3
 8006370:	f000 fcd8 	bl	8006d24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006382:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006392:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	021a      	lsls	r2, r3, #8
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80063a8:	e002      	b.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	75fb      	strb	r3, [r7, #23]
      break;
 80063ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop

080063c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_TIM_ConfigClockSource+0x1c>
 80063dc:	2302      	movs	r3, #2
 80063de:	e0f6      	b.n	80065ce <HAL_TIM_ConfigClockSource+0x20a>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80063fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800640a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a6f      	ldr	r2, [pc, #444]	; (80065d8 <HAL_TIM_ConfigClockSource+0x214>)
 800641a:	4293      	cmp	r3, r2
 800641c:	f000 80c1 	beq.w	80065a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006420:	4a6d      	ldr	r2, [pc, #436]	; (80065d8 <HAL_TIM_ConfigClockSource+0x214>)
 8006422:	4293      	cmp	r3, r2
 8006424:	f200 80c6 	bhi.w	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006428:	4a6c      	ldr	r2, [pc, #432]	; (80065dc <HAL_TIM_ConfigClockSource+0x218>)
 800642a:	4293      	cmp	r3, r2
 800642c:	f000 80b9 	beq.w	80065a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006430:	4a6a      	ldr	r2, [pc, #424]	; (80065dc <HAL_TIM_ConfigClockSource+0x218>)
 8006432:	4293      	cmp	r3, r2
 8006434:	f200 80be 	bhi.w	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006438:	4a69      	ldr	r2, [pc, #420]	; (80065e0 <HAL_TIM_ConfigClockSource+0x21c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	f000 80b1 	beq.w	80065a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006440:	4a67      	ldr	r2, [pc, #412]	; (80065e0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	f200 80b6 	bhi.w	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006448:	4a66      	ldr	r2, [pc, #408]	; (80065e4 <HAL_TIM_ConfigClockSource+0x220>)
 800644a:	4293      	cmp	r3, r2
 800644c:	f000 80a9 	beq.w	80065a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006450:	4a64      	ldr	r2, [pc, #400]	; (80065e4 <HAL_TIM_ConfigClockSource+0x220>)
 8006452:	4293      	cmp	r3, r2
 8006454:	f200 80ae 	bhi.w	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006458:	4a63      	ldr	r2, [pc, #396]	; (80065e8 <HAL_TIM_ConfigClockSource+0x224>)
 800645a:	4293      	cmp	r3, r2
 800645c:	f000 80a1 	beq.w	80065a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006460:	4a61      	ldr	r2, [pc, #388]	; (80065e8 <HAL_TIM_ConfigClockSource+0x224>)
 8006462:	4293      	cmp	r3, r2
 8006464:	f200 80a6 	bhi.w	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006468:	4a60      	ldr	r2, [pc, #384]	; (80065ec <HAL_TIM_ConfigClockSource+0x228>)
 800646a:	4293      	cmp	r3, r2
 800646c:	f000 8099 	beq.w	80065a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006470:	4a5e      	ldr	r2, [pc, #376]	; (80065ec <HAL_TIM_ConfigClockSource+0x228>)
 8006472:	4293      	cmp	r3, r2
 8006474:	f200 809e 	bhi.w	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006478:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800647c:	f000 8091 	beq.w	80065a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006480:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006484:	f200 8096 	bhi.w	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800648c:	f000 8089 	beq.w	80065a2 <HAL_TIM_ConfigClockSource+0x1de>
 8006490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006494:	f200 808e 	bhi.w	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649c:	d03e      	beq.n	800651c <HAL_TIM_ConfigClockSource+0x158>
 800649e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064a2:	f200 8087 	bhi.w	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80064a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064aa:	f000 8086 	beq.w	80065ba <HAL_TIM_ConfigClockSource+0x1f6>
 80064ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b2:	d87f      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80064b4:	2b70      	cmp	r3, #112	; 0x70
 80064b6:	d01a      	beq.n	80064ee <HAL_TIM_ConfigClockSource+0x12a>
 80064b8:	2b70      	cmp	r3, #112	; 0x70
 80064ba:	d87b      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80064bc:	2b60      	cmp	r3, #96	; 0x60
 80064be:	d050      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0x19e>
 80064c0:	2b60      	cmp	r3, #96	; 0x60
 80064c2:	d877      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80064c4:	2b50      	cmp	r3, #80	; 0x50
 80064c6:	d03c      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x17e>
 80064c8:	2b50      	cmp	r3, #80	; 0x50
 80064ca:	d873      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80064cc:	2b40      	cmp	r3, #64	; 0x40
 80064ce:	d058      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x1be>
 80064d0:	2b40      	cmp	r3, #64	; 0x40
 80064d2:	d86f      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80064d4:	2b30      	cmp	r3, #48	; 0x30
 80064d6:	d064      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x1de>
 80064d8:	2b30      	cmp	r3, #48	; 0x30
 80064da:	d86b      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80064dc:	2b20      	cmp	r3, #32
 80064de:	d060      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x1de>
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	d867      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d05c      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x1de>
 80064e8:	2b10      	cmp	r3, #16
 80064ea:	d05a      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x1de>
 80064ec:	e062      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064fe:	f000 fcf9 	bl	8006ef4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006510:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	609a      	str	r2, [r3, #8]
      break;
 800651a:	e04f      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800652c:	f000 fce2 	bl	8006ef4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800653e:	609a      	str	r2, [r3, #8]
      break;
 8006540:	e03c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800654e:	461a      	mov	r2, r3
 8006550:	f000 fc54 	bl	8006dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2150      	movs	r1, #80	; 0x50
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fcad 	bl	8006eba <TIM_ITRx_SetConfig>
      break;
 8006560:	e02c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800656e:	461a      	mov	r2, r3
 8006570:	f000 fc73 	bl	8006e5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2160      	movs	r1, #96	; 0x60
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fc9d 	bl	8006eba <TIM_ITRx_SetConfig>
      break;
 8006580:	e01c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800658e:	461a      	mov	r2, r3
 8006590:	f000 fc34 	bl	8006dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2140      	movs	r1, #64	; 0x40
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fc8d 	bl	8006eba <TIM_ITRx_SetConfig>
      break;
 80065a0:	e00c      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f000 fc84 	bl	8006eba <TIM_ITRx_SetConfig>
      break;
 80065b2:	e003      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]
      break;
 80065b8:	e000      	b.n	80065bc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80065ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	00100070 	.word	0x00100070
 80065dc:	00100060 	.word	0x00100060
 80065e0:	00100050 	.word	0x00100050
 80065e4:	00100040 	.word	0x00100040
 80065e8:	00100030 	.word	0x00100030
 80065ec:	00100020 	.word	0x00100020

080065f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a4c      	ldr	r2, [pc, #304]	; (8006784 <TIM_Base_SetConfig+0x144>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d017      	beq.n	8006688 <TIM_Base_SetConfig+0x48>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800665e:	d013      	beq.n	8006688 <TIM_Base_SetConfig+0x48>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a49      	ldr	r2, [pc, #292]	; (8006788 <TIM_Base_SetConfig+0x148>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00f      	beq.n	8006688 <TIM_Base_SetConfig+0x48>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a48      	ldr	r2, [pc, #288]	; (800678c <TIM_Base_SetConfig+0x14c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00b      	beq.n	8006688 <TIM_Base_SetConfig+0x48>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a47      	ldr	r2, [pc, #284]	; (8006790 <TIM_Base_SetConfig+0x150>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d007      	beq.n	8006688 <TIM_Base_SetConfig+0x48>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a46      	ldr	r2, [pc, #280]	; (8006794 <TIM_Base_SetConfig+0x154>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d003      	beq.n	8006688 <TIM_Base_SetConfig+0x48>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a45      	ldr	r2, [pc, #276]	; (8006798 <TIM_Base_SetConfig+0x158>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d108      	bne.n	800669a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a39      	ldr	r2, [pc, #228]	; (8006784 <TIM_Base_SetConfig+0x144>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d023      	beq.n	80066ea <TIM_Base_SetConfig+0xaa>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a8:	d01f      	beq.n	80066ea <TIM_Base_SetConfig+0xaa>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a36      	ldr	r2, [pc, #216]	; (8006788 <TIM_Base_SetConfig+0x148>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d01b      	beq.n	80066ea <TIM_Base_SetConfig+0xaa>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a35      	ldr	r2, [pc, #212]	; (800678c <TIM_Base_SetConfig+0x14c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d017      	beq.n	80066ea <TIM_Base_SetConfig+0xaa>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a34      	ldr	r2, [pc, #208]	; (8006790 <TIM_Base_SetConfig+0x150>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d013      	beq.n	80066ea <TIM_Base_SetConfig+0xaa>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a33      	ldr	r2, [pc, #204]	; (8006794 <TIM_Base_SetConfig+0x154>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00f      	beq.n	80066ea <TIM_Base_SetConfig+0xaa>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a33      	ldr	r2, [pc, #204]	; (800679c <TIM_Base_SetConfig+0x15c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00b      	beq.n	80066ea <TIM_Base_SetConfig+0xaa>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a32      	ldr	r2, [pc, #200]	; (80067a0 <TIM_Base_SetConfig+0x160>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d007      	beq.n	80066ea <TIM_Base_SetConfig+0xaa>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a31      	ldr	r2, [pc, #196]	; (80067a4 <TIM_Base_SetConfig+0x164>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d003      	beq.n	80066ea <TIM_Base_SetConfig+0xaa>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a2c      	ldr	r2, [pc, #176]	; (8006798 <TIM_Base_SetConfig+0x158>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d108      	bne.n	80066fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a18      	ldr	r2, [pc, #96]	; (8006784 <TIM_Base_SetConfig+0x144>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d013      	beq.n	8006750 <TIM_Base_SetConfig+0x110>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a1a      	ldr	r2, [pc, #104]	; (8006794 <TIM_Base_SetConfig+0x154>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00f      	beq.n	8006750 <TIM_Base_SetConfig+0x110>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a1a      	ldr	r2, [pc, #104]	; (800679c <TIM_Base_SetConfig+0x15c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00b      	beq.n	8006750 <TIM_Base_SetConfig+0x110>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a19      	ldr	r2, [pc, #100]	; (80067a0 <TIM_Base_SetConfig+0x160>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d007      	beq.n	8006750 <TIM_Base_SetConfig+0x110>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a18      	ldr	r2, [pc, #96]	; (80067a4 <TIM_Base_SetConfig+0x164>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_Base_SetConfig+0x110>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a13      	ldr	r2, [pc, #76]	; (8006798 <TIM_Base_SetConfig+0x158>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d103      	bne.n	8006758 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b01      	cmp	r3, #1
 8006768:	d105      	bne.n	8006776 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f023 0201 	bic.w	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	611a      	str	r2, [r3, #16]
  }
}
 8006776:	bf00      	nop
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40012c00 	.word	0x40012c00
 8006788:	40000400 	.word	0x40000400
 800678c:	40000800 	.word	0x40000800
 8006790:	40000c00 	.word	0x40000c00
 8006794:	40013400 	.word	0x40013400
 8006798:	40015000 	.word	0x40015000
 800679c:	40014000 	.word	0x40014000
 80067a0:	40014400 	.word	0x40014400
 80067a4:	40014800 	.word	0x40014800

080067a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	f023 0201 	bic.w	r2, r3, #1
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0303 	bic.w	r3, r3, #3
 80067e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f023 0302 	bic.w	r3, r3, #2
 80067f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a30      	ldr	r2, [pc, #192]	; (80068c4 <TIM_OC1_SetConfig+0x11c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d013      	beq.n	8006830 <TIM_OC1_SetConfig+0x88>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a2f      	ldr	r2, [pc, #188]	; (80068c8 <TIM_OC1_SetConfig+0x120>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00f      	beq.n	8006830 <TIM_OC1_SetConfig+0x88>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a2e      	ldr	r2, [pc, #184]	; (80068cc <TIM_OC1_SetConfig+0x124>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00b      	beq.n	8006830 <TIM_OC1_SetConfig+0x88>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a2d      	ldr	r2, [pc, #180]	; (80068d0 <TIM_OC1_SetConfig+0x128>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d007      	beq.n	8006830 <TIM_OC1_SetConfig+0x88>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a2c      	ldr	r2, [pc, #176]	; (80068d4 <TIM_OC1_SetConfig+0x12c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d003      	beq.n	8006830 <TIM_OC1_SetConfig+0x88>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a2b      	ldr	r2, [pc, #172]	; (80068d8 <TIM_OC1_SetConfig+0x130>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d10c      	bne.n	800684a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f023 0308 	bic.w	r3, r3, #8
 8006836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f023 0304 	bic.w	r3, r3, #4
 8006848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a1d      	ldr	r2, [pc, #116]	; (80068c4 <TIM_OC1_SetConfig+0x11c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <TIM_OC1_SetConfig+0xd2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a1c      	ldr	r2, [pc, #112]	; (80068c8 <TIM_OC1_SetConfig+0x120>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d00f      	beq.n	800687a <TIM_OC1_SetConfig+0xd2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a1b      	ldr	r2, [pc, #108]	; (80068cc <TIM_OC1_SetConfig+0x124>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d00b      	beq.n	800687a <TIM_OC1_SetConfig+0xd2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a1a      	ldr	r2, [pc, #104]	; (80068d0 <TIM_OC1_SetConfig+0x128>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d007      	beq.n	800687a <TIM_OC1_SetConfig+0xd2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a19      	ldr	r2, [pc, #100]	; (80068d4 <TIM_OC1_SetConfig+0x12c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d003      	beq.n	800687a <TIM_OC1_SetConfig+0xd2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a18      	ldr	r2, [pc, #96]	; (80068d8 <TIM_OC1_SetConfig+0x130>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d111      	bne.n	800689e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	621a      	str	r2, [r3, #32]
}
 80068b8:	bf00      	nop
 80068ba:	371c      	adds	r7, #28
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	40012c00 	.word	0x40012c00
 80068c8:	40013400 	.word	0x40013400
 80068cc:	40014000 	.word	0x40014000
 80068d0:	40014400 	.word	0x40014400
 80068d4:	40014800 	.word	0x40014800
 80068d8:	40015000 	.word	0x40015000

080068dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	f023 0210 	bic.w	r2, r3, #16
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800690a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800690e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	021b      	lsls	r3, r3, #8
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4313      	orrs	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f023 0320 	bic.w	r3, r3, #32
 800692a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	4313      	orrs	r3, r2
 8006936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a2c      	ldr	r2, [pc, #176]	; (80069ec <TIM_OC2_SetConfig+0x110>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d007      	beq.n	8006950 <TIM_OC2_SetConfig+0x74>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a2b      	ldr	r2, [pc, #172]	; (80069f0 <TIM_OC2_SetConfig+0x114>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d003      	beq.n	8006950 <TIM_OC2_SetConfig+0x74>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a2a      	ldr	r2, [pc, #168]	; (80069f4 <TIM_OC2_SetConfig+0x118>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d10d      	bne.n	800696c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	4313      	orrs	r3, r2
 8006962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800696a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a1f      	ldr	r2, [pc, #124]	; (80069ec <TIM_OC2_SetConfig+0x110>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d013      	beq.n	800699c <TIM_OC2_SetConfig+0xc0>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a1e      	ldr	r2, [pc, #120]	; (80069f0 <TIM_OC2_SetConfig+0x114>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00f      	beq.n	800699c <TIM_OC2_SetConfig+0xc0>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a1e      	ldr	r2, [pc, #120]	; (80069f8 <TIM_OC2_SetConfig+0x11c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00b      	beq.n	800699c <TIM_OC2_SetConfig+0xc0>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a1d      	ldr	r2, [pc, #116]	; (80069fc <TIM_OC2_SetConfig+0x120>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d007      	beq.n	800699c <TIM_OC2_SetConfig+0xc0>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a1c      	ldr	r2, [pc, #112]	; (8006a00 <TIM_OC2_SetConfig+0x124>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d003      	beq.n	800699c <TIM_OC2_SetConfig+0xc0>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a17      	ldr	r2, [pc, #92]	; (80069f4 <TIM_OC2_SetConfig+0x118>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d113      	bne.n	80069c4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	bf00      	nop
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40012c00 	.word	0x40012c00
 80069f0:	40013400 	.word	0x40013400
 80069f4:	40015000 	.word	0x40015000
 80069f8:	40014000 	.word	0x40014000
 80069fc:	40014400 	.word	0x40014400
 8006a00:	40014800 	.word	0x40014800

08006a04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0303 	bic.w	r3, r3, #3
 8006a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	021b      	lsls	r3, r3, #8
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a2b      	ldr	r2, [pc, #172]	; (8006b10 <TIM_OC3_SetConfig+0x10c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d007      	beq.n	8006a76 <TIM_OC3_SetConfig+0x72>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a2a      	ldr	r2, [pc, #168]	; (8006b14 <TIM_OC3_SetConfig+0x110>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d003      	beq.n	8006a76 <TIM_OC3_SetConfig+0x72>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a29      	ldr	r2, [pc, #164]	; (8006b18 <TIM_OC3_SetConfig+0x114>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d10d      	bne.n	8006a92 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a1e      	ldr	r2, [pc, #120]	; (8006b10 <TIM_OC3_SetConfig+0x10c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d013      	beq.n	8006ac2 <TIM_OC3_SetConfig+0xbe>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <TIM_OC3_SetConfig+0x110>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00f      	beq.n	8006ac2 <TIM_OC3_SetConfig+0xbe>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a1d      	ldr	r2, [pc, #116]	; (8006b1c <TIM_OC3_SetConfig+0x118>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d00b      	beq.n	8006ac2 <TIM_OC3_SetConfig+0xbe>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a1c      	ldr	r2, [pc, #112]	; (8006b20 <TIM_OC3_SetConfig+0x11c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d007      	beq.n	8006ac2 <TIM_OC3_SetConfig+0xbe>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a1b      	ldr	r2, [pc, #108]	; (8006b24 <TIM_OC3_SetConfig+0x120>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d003      	beq.n	8006ac2 <TIM_OC3_SetConfig+0xbe>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a16      	ldr	r2, [pc, #88]	; (8006b18 <TIM_OC3_SetConfig+0x114>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d113      	bne.n	8006aea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	011b      	lsls	r3, r3, #4
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	621a      	str	r2, [r3, #32]
}
 8006b04:	bf00      	nop
 8006b06:	371c      	adds	r7, #28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	40012c00 	.word	0x40012c00
 8006b14:	40013400 	.word	0x40013400
 8006b18:	40015000 	.word	0x40015000
 8006b1c:	40014000 	.word	0x40014000
 8006b20:	40014400 	.word	0x40014400
 8006b24:	40014800 	.word	0x40014800

08006b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	021b      	lsls	r3, r3, #8
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	031b      	lsls	r3, r3, #12
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a2c      	ldr	r2, [pc, #176]	; (8006c38 <TIM_OC4_SetConfig+0x110>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d007      	beq.n	8006b9c <TIM_OC4_SetConfig+0x74>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a2b      	ldr	r2, [pc, #172]	; (8006c3c <TIM_OC4_SetConfig+0x114>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d003      	beq.n	8006b9c <TIM_OC4_SetConfig+0x74>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a2a      	ldr	r2, [pc, #168]	; (8006c40 <TIM_OC4_SetConfig+0x118>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d10d      	bne.n	8006bb8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	031b      	lsls	r3, r3, #12
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a1f      	ldr	r2, [pc, #124]	; (8006c38 <TIM_OC4_SetConfig+0x110>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d013      	beq.n	8006be8 <TIM_OC4_SetConfig+0xc0>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a1e      	ldr	r2, [pc, #120]	; (8006c3c <TIM_OC4_SetConfig+0x114>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00f      	beq.n	8006be8 <TIM_OC4_SetConfig+0xc0>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a1e      	ldr	r2, [pc, #120]	; (8006c44 <TIM_OC4_SetConfig+0x11c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00b      	beq.n	8006be8 <TIM_OC4_SetConfig+0xc0>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a1d      	ldr	r2, [pc, #116]	; (8006c48 <TIM_OC4_SetConfig+0x120>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d007      	beq.n	8006be8 <TIM_OC4_SetConfig+0xc0>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a1c      	ldr	r2, [pc, #112]	; (8006c4c <TIM_OC4_SetConfig+0x124>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d003      	beq.n	8006be8 <TIM_OC4_SetConfig+0xc0>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a17      	ldr	r2, [pc, #92]	; (8006c40 <TIM_OC4_SetConfig+0x118>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d113      	bne.n	8006c10 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bf6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	019b      	lsls	r3, r3, #6
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	019b      	lsls	r3, r3, #6
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	621a      	str	r2, [r3, #32]
}
 8006c2a:	bf00      	nop
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	40012c00 	.word	0x40012c00
 8006c3c:	40013400 	.word	0x40013400
 8006c40:	40015000 	.word	0x40015000
 8006c44:	40014000 	.word	0x40014000
 8006c48:	40014400 	.word	0x40014400
 8006c4c:	40014800 	.word	0x40014800

08006c50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	041b      	lsls	r3, r3, #16
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a19      	ldr	r2, [pc, #100]	; (8006d0c <TIM_OC5_SetConfig+0xbc>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d013      	beq.n	8006cd2 <TIM_OC5_SetConfig+0x82>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a18      	ldr	r2, [pc, #96]	; (8006d10 <TIM_OC5_SetConfig+0xc0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00f      	beq.n	8006cd2 <TIM_OC5_SetConfig+0x82>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a17      	ldr	r2, [pc, #92]	; (8006d14 <TIM_OC5_SetConfig+0xc4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00b      	beq.n	8006cd2 <TIM_OC5_SetConfig+0x82>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a16      	ldr	r2, [pc, #88]	; (8006d18 <TIM_OC5_SetConfig+0xc8>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d007      	beq.n	8006cd2 <TIM_OC5_SetConfig+0x82>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a15      	ldr	r2, [pc, #84]	; (8006d1c <TIM_OC5_SetConfig+0xcc>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d003      	beq.n	8006cd2 <TIM_OC5_SetConfig+0x82>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a14      	ldr	r2, [pc, #80]	; (8006d20 <TIM_OC5_SetConfig+0xd0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d109      	bne.n	8006ce6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	021b      	lsls	r3, r3, #8
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	621a      	str	r2, [r3, #32]
}
 8006d00:	bf00      	nop
 8006d02:	371c      	adds	r7, #28
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	40012c00 	.word	0x40012c00
 8006d10:	40013400 	.word	0x40013400
 8006d14:	40014000 	.word	0x40014000
 8006d18:	40014400 	.word	0x40014400
 8006d1c:	40014800 	.word	0x40014800
 8006d20:	40015000 	.word	0x40015000

08006d24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	021b      	lsls	r3, r3, #8
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	051b      	lsls	r3, r3, #20
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a1a      	ldr	r2, [pc, #104]	; (8006de4 <TIM_OC6_SetConfig+0xc0>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d013      	beq.n	8006da8 <TIM_OC6_SetConfig+0x84>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a19      	ldr	r2, [pc, #100]	; (8006de8 <TIM_OC6_SetConfig+0xc4>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d00f      	beq.n	8006da8 <TIM_OC6_SetConfig+0x84>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a18      	ldr	r2, [pc, #96]	; (8006dec <TIM_OC6_SetConfig+0xc8>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d00b      	beq.n	8006da8 <TIM_OC6_SetConfig+0x84>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a17      	ldr	r2, [pc, #92]	; (8006df0 <TIM_OC6_SetConfig+0xcc>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d007      	beq.n	8006da8 <TIM_OC6_SetConfig+0x84>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a16      	ldr	r2, [pc, #88]	; (8006df4 <TIM_OC6_SetConfig+0xd0>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d003      	beq.n	8006da8 <TIM_OC6_SetConfig+0x84>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a15      	ldr	r2, [pc, #84]	; (8006df8 <TIM_OC6_SetConfig+0xd4>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d109      	bne.n	8006dbc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	029b      	lsls	r3, r3, #10
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	621a      	str	r2, [r3, #32]
}
 8006dd6:	bf00      	nop
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	40012c00 	.word	0x40012c00
 8006de8:	40013400 	.word	0x40013400
 8006dec:	40014000 	.word	0x40014000
 8006df0:	40014400 	.word	0x40014400
 8006df4:	40014800 	.word	0x40014800
 8006df8:	40015000 	.word	0x40015000

08006dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	f023 0201 	bic.w	r2, r3, #1
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	011b      	lsls	r3, r3, #4
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f023 030a 	bic.w	r3, r3, #10
 8006e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	621a      	str	r2, [r3, #32]
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b087      	sub	sp, #28
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	60f8      	str	r0, [r7, #12]
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	f023 0210 	bic.w	r2, r3, #16
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	031b      	lsls	r3, r3, #12
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	621a      	str	r2, [r3, #32]
}
 8006eae:	bf00      	nop
 8006eb0:	371c      	adds	r7, #28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	f043 0307 	orr.w	r3, r3, #7
 8006ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	609a      	str	r2, [r3, #8]
}
 8006ee8:	bf00      	nop
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	021a      	lsls	r2, r3, #8
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	609a      	str	r2, [r3, #8]
}
 8006f28:	bf00      	nop
 8006f2a:	371c      	adds	r7, #28
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f003 031f 	and.w	r3, r3, #31
 8006f46:	2201      	movs	r2, #1
 8006f48:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6a1a      	ldr	r2, [r3, #32]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	43db      	mvns	r3, r3
 8006f56:	401a      	ands	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a1a      	ldr	r2, [r3, #32]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f003 031f 	and.w	r3, r3, #31
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	fa01 f303 	lsl.w	r3, r1, r3
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	621a      	str	r2, [r3, #32]
}
 8006f72:	bf00      	nop
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
	...

08006f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d101      	bne.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f94:	2302      	movs	r3, #2
 8006f96:	e074      	b.n	8007082 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a34      	ldr	r2, [pc, #208]	; (8007090 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d009      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a33      	ldr	r2, [pc, #204]	; (8007094 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a31      	ldr	r2, [pc, #196]	; (8007098 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d108      	bne.n	8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a21      	ldr	r2, [pc, #132]	; (8007090 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d022      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007018:	d01d      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1f      	ldr	r2, [pc, #124]	; (800709c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d018      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a1d      	ldr	r2, [pc, #116]	; (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d013      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1c      	ldr	r2, [pc, #112]	; (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d00e      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a15      	ldr	r2, [pc, #84]	; (8007094 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d009      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a18      	ldr	r2, [pc, #96]	; (80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d004      	beq.n	8007056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a11      	ldr	r2, [pc, #68]	; (8007098 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d10c      	bne.n	8007070 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800705c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	4313      	orrs	r3, r2
 8007066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	40012c00 	.word	0x40012c00
 8007094:	40013400 	.word	0x40013400
 8007098:	40015000 	.word	0x40015000
 800709c:	40000400 	.word	0x40000400
 80070a0:	40000800 	.word	0x40000800
 80070a4:	40000c00 	.word	0x40000c00
 80070a8:	40014000 	.word	0x40014000

080070ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d101      	bne.n	80070c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070c4:	2302      	movs	r3, #2
 80070c6:	e078      	b.n	80071ba <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4313      	orrs	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	041b      	lsls	r3, r3, #16
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a1c      	ldr	r2, [pc, #112]	; (80071c8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d009      	beq.n	800716e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a1b      	ldr	r2, [pc, #108]	; (80071cc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d004      	beq.n	800716e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a19      	ldr	r2, [pc, #100]	; (80071d0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d11c      	bne.n	80071a8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	051b      	lsls	r3, r3, #20
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40012c00 	.word	0x40012c00
 80071cc:	40013400 	.word	0x40013400
 80071d0:	40015000 	.word	0x40015000

080071d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e042      	b.n	80072f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007278:	2b00      	cmp	r3, #0
 800727a:	d106      	bne.n	800728a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7fa fdbb 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2224      	movs	r2, #36	; 0x24
 800728e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0201 	bic.w	r2, r2, #1
 80072a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 ff4c 	bl	8008148 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fc4d 	bl	8007b50 <UART_SetConfig>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e01b      	b.n	80072f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689a      	ldr	r2, [r3, #8]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f042 0201 	orr.w	r2, r2, #1
 80072ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 ffcb 	bl	800828c <UART_CheckIdleState>
 80072f6:	4603      	mov	r3, r0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b08a      	sub	sp, #40	; 0x28
 8007304:	af02      	add	r7, sp, #8
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	603b      	str	r3, [r7, #0]
 800730c:	4613      	mov	r3, r2
 800730e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007316:	2b20      	cmp	r3, #32
 8007318:	d17b      	bne.n	8007412 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <HAL_UART_Transmit+0x26>
 8007320:	88fb      	ldrh	r3, [r7, #6]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e074      	b.n	8007414 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2221      	movs	r2, #33	; 0x21
 8007336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800733a:	f7fb f849 	bl	80023d0 <HAL_GetTick>
 800733e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	88fa      	ldrh	r2, [r7, #6]
 8007344:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	88fa      	ldrh	r2, [r7, #6]
 800734c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007358:	d108      	bne.n	800736c <HAL_UART_Transmit+0x6c>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d104      	bne.n	800736c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007362:	2300      	movs	r3, #0
 8007364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	e003      	b.n	8007374 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007370:	2300      	movs	r3, #0
 8007372:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007374:	e030      	b.n	80073d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2200      	movs	r2, #0
 800737e:	2180      	movs	r1, #128	; 0x80
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f001 f82d 	bl	80083e0 <UART_WaitOnFlagUntilTimeout>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d005      	beq.n	8007398 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2220      	movs	r2, #32
 8007390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e03d      	b.n	8007414 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10b      	bne.n	80073b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	3302      	adds	r3, #2
 80073b2:	61bb      	str	r3, [r7, #24]
 80073b4:	e007      	b.n	80073c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	781a      	ldrb	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	3301      	adds	r3, #1
 80073c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073de:	b29b      	uxth	r3, r3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1c8      	bne.n	8007376 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2200      	movs	r2, #0
 80073ec:	2140      	movs	r1, #64	; 0x40
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 fff6 	bl	80083e0 <UART_WaitOnFlagUntilTimeout>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d005      	beq.n	8007406 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e006      	b.n	8007414 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2220      	movs	r2, #32
 800740a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	e000      	b.n	8007414 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007412:	2302      	movs	r3, #2
  }
}
 8007414:	4618      	mov	r0, r3
 8007416:	3720      	adds	r7, #32
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b08a      	sub	sp, #40	; 0x28
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	4613      	mov	r3, r2
 8007428:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007430:	2b20      	cmp	r3, #32
 8007432:	d137      	bne.n	80074a4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <HAL_UART_Receive_DMA+0x24>
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e030      	b.n	80074a6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a18      	ldr	r2, [pc, #96]	; (80074b0 <HAL_UART_Receive_DMA+0x94>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d01f      	beq.n	8007494 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d018      	beq.n	8007494 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	e853 3f00 	ldrex	r3, [r3]
 800746e:	613b      	str	r3, [r7, #16]
   return(result);
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	623b      	str	r3, [r7, #32]
 8007482:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007484:	69f9      	ldr	r1, [r7, #28]
 8007486:	6a3a      	ldr	r2, [r7, #32]
 8007488:	e841 2300 	strex	r3, r2, [r1]
 800748c:	61bb      	str	r3, [r7, #24]
   return(result);
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e6      	bne.n	8007462 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007494:	88fb      	ldrh	r3, [r7, #6]
 8007496:	461a      	mov	r2, r3
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f001 f80e 	bl	80084bc <UART_Start_Receive_DMA>
 80074a0:	4603      	mov	r3, r0
 80074a2:	e000      	b.n	80074a6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074a4:	2302      	movs	r3, #2
  }
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3728      	adds	r7, #40	; 0x28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	40008000 	.word	0x40008000

080074b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b0ba      	sub	sp, #232	; 0xe8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80074de:	f640 030f 	movw	r3, #2063	; 0x80f
 80074e2:	4013      	ands	r3, r2
 80074e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80074e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d11b      	bne.n	8007528 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f4:	f003 0320 	and.w	r3, r3, #32
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d015      	beq.n	8007528 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007500:	f003 0320 	and.w	r3, r3, #32
 8007504:	2b00      	cmp	r3, #0
 8007506:	d105      	bne.n	8007514 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800750c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d009      	beq.n	8007528 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 82e3 	beq.w	8007ae4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	4798      	blx	r3
      }
      return;
 8007526:	e2dd      	b.n	8007ae4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007528:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 8123 	beq.w	8007778 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007532:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007536:	4b8d      	ldr	r3, [pc, #564]	; (800776c <HAL_UART_IRQHandler+0x2b8>)
 8007538:	4013      	ands	r3, r2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d106      	bne.n	800754c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800753e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007542:	4b8b      	ldr	r3, [pc, #556]	; (8007770 <HAL_UART_IRQHandler+0x2bc>)
 8007544:	4013      	ands	r3, r2
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 8116 	beq.w	8007778 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800754c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	d011      	beq.n	800757c <HAL_UART_IRQHandler+0xc8>
 8007558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800755c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00b      	beq.n	800757c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2201      	movs	r2, #1
 800756a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007572:	f043 0201 	orr.w	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800757c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007580:	f003 0302 	and.w	r3, r3, #2
 8007584:	2b00      	cmp	r3, #0
 8007586:	d011      	beq.n	80075ac <HAL_UART_IRQHandler+0xf8>
 8007588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00b      	beq.n	80075ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2202      	movs	r2, #2
 800759a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a2:	f043 0204 	orr.w	r2, r3, #4
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b0:	f003 0304 	and.w	r3, r3, #4
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d011      	beq.n	80075dc <HAL_UART_IRQHandler+0x128>
 80075b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00b      	beq.n	80075dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2204      	movs	r2, #4
 80075ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d2:	f043 0202 	orr.w	r2, r3, #2
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d017      	beq.n	8007618 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d105      	bne.n	8007600 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80075f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80075f8:	4b5c      	ldr	r3, [pc, #368]	; (800776c <HAL_UART_IRQHandler+0x2b8>)
 80075fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00b      	beq.n	8007618 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2208      	movs	r2, #8
 8007606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760e:	f043 0208 	orr.w	r2, r3, #8
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800761c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007620:	2b00      	cmp	r3, #0
 8007622:	d012      	beq.n	800764a <HAL_UART_IRQHandler+0x196>
 8007624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007628:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00c      	beq.n	800764a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007638:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007640:	f043 0220 	orr.w	r2, r3, #32
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 8249 	beq.w	8007ae8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800765a:	f003 0320 	and.w	r3, r3, #32
 800765e:	2b00      	cmp	r3, #0
 8007660:	d013      	beq.n	800768a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007666:	f003 0320 	and.w	r3, r3, #32
 800766a:	2b00      	cmp	r3, #0
 800766c:	d105      	bne.n	800767a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800766e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d007      	beq.n	800768a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007690:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769e:	2b40      	cmp	r3, #64	; 0x40
 80076a0:	d005      	beq.n	80076ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d054      	beq.n	8007758 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 ffeb 	bl	800868a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076be:	2b40      	cmp	r3, #64	; 0x40
 80076c0:	d146      	bne.n	8007750 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3308      	adds	r3, #8
 80076c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3308      	adds	r3, #8
 80076ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1d9      	bne.n	80076c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007714:	2b00      	cmp	r3, #0
 8007716:	d017      	beq.n	8007748 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800771e:	4a15      	ldr	r2, [pc, #84]	; (8007774 <HAL_UART_IRQHandler+0x2c0>)
 8007720:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007728:	4618      	mov	r0, r3
 800772a:	f7fc fc4d 	bl	8003fc8 <HAL_DMA_Abort_IT>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d019      	beq.n	8007768 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800773a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007742:	4610      	mov	r0, r2
 8007744:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007746:	e00f      	b.n	8007768 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f9eb 	bl	8007b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800774e:	e00b      	b.n	8007768 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f9e7 	bl	8007b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007756:	e007      	b.n	8007768 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f9e3 	bl	8007b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007766:	e1bf      	b.n	8007ae8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007768:	bf00      	nop
    return;
 800776a:	e1bd      	b.n	8007ae8 <HAL_UART_IRQHandler+0x634>
 800776c:	10000001 	.word	0x10000001
 8007770:	04000120 	.word	0x04000120
 8007774:	08008941 	.word	0x08008941

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800777c:	2b01      	cmp	r3, #1
 800777e:	f040 8153 	bne.w	8007a28 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007786:	f003 0310 	and.w	r3, r3, #16
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 814c 	beq.w	8007a28 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007794:	f003 0310 	and.w	r3, r3, #16
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 8145 	beq.w	8007a28 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2210      	movs	r2, #16
 80077a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b0:	2b40      	cmp	r3, #64	; 0x40
 80077b2:	f040 80bb 	bne.w	800792c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 818f 	beq.w	8007aec <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077d8:	429a      	cmp	r2, r3
 80077da:	f080 8187 	bcs.w	8007aec <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0320 	and.w	r3, r3, #32
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f040 8087 	bne.w	800790a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007826:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800782a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007832:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800783e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1da      	bne.n	80077fc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007858:	f023 0301 	bic.w	r3, r3, #1
 800785c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3308      	adds	r3, #8
 8007866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800786a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800786e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007872:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007876:	e841 2300 	strex	r3, r2, [r1]
 800787a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800787c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1e1      	bne.n	8007846 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3308      	adds	r3, #8
 80078a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e3      	bne.n	8007882 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2220      	movs	r2, #32
 80078be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078d0:	e853 3f00 	ldrex	r3, [r3]
 80078d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078d8:	f023 0310 	bic.w	r3, r3, #16
 80078dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80078ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e4      	bne.n	80078c8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007904:	4618      	mov	r0, r3
 8007906:	f7fc fb06 	bl	8003f16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2202      	movs	r2, #2
 800790e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800791c:	b29b      	uxth	r3, r3
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	b29b      	uxth	r3, r3
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f907 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800792a:	e0df      	b.n	8007aec <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007938:	b29b      	uxth	r3, r3
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007946:	b29b      	uxth	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 80d1 	beq.w	8007af0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800794e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 80cc 	beq.w	8007af0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800796c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800797a:	647b      	str	r3, [r7, #68]	; 0x44
 800797c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e4      	bne.n	8007958 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3308      	adds	r3, #8
 8007994:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	623b      	str	r3, [r7, #32]
   return(result);
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079a4:	f023 0301 	bic.w	r3, r3, #1
 80079a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079b6:	633a      	str	r2, [r7, #48]	; 0x30
 80079b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e1      	bne.n	800798e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f023 0310 	bic.w	r3, r3, #16
 80079f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a00:	61fb      	str	r3, [r7, #28]
 8007a02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	69b9      	ldr	r1, [r7, #24]
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e4      	bne.n	80079de <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f889 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a26:	e063      	b.n	8007af0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00e      	beq.n	8007a52 <HAL_UART_IRQHandler+0x59e>
 8007a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d008      	beq.n	8007a52 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 ffb9 	bl	80089c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a50:	e051      	b.n	8007af6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d014      	beq.n	8007a88 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d105      	bne.n	8007a76 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d008      	beq.n	8007a88 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d03a      	beq.n	8007af4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	4798      	blx	r3
    }
    return;
 8007a86:	e035      	b.n	8007af4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d009      	beq.n	8007aa8 <HAL_UART_IRQHandler+0x5f4>
 8007a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 ff63 	bl	800896c <UART_EndTransmit_IT>
    return;
 8007aa6:	e026      	b.n	8007af6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d009      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x614>
 8007ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d003      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 ff92 	bl	80089ea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ac6:	e016      	b.n	8007af6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d010      	beq.n	8007af6 <HAL_UART_IRQHandler+0x642>
 8007ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	da0c      	bge.n	8007af6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 ff7a 	bl	80089d6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ae2:	e008      	b.n	8007af6 <HAL_UART_IRQHandler+0x642>
      return;
 8007ae4:	bf00      	nop
 8007ae6:	e006      	b.n	8007af6 <HAL_UART_IRQHandler+0x642>
    return;
 8007ae8:	bf00      	nop
 8007aea:	e004      	b.n	8007af6 <HAL_UART_IRQHandler+0x642>
      return;
 8007aec:	bf00      	nop
 8007aee:	e002      	b.n	8007af6 <HAL_UART_IRQHandler+0x642>
      return;
 8007af0:	bf00      	nop
 8007af2:	e000      	b.n	8007af6 <HAL_UART_IRQHandler+0x642>
    return;
 8007af4:	bf00      	nop
  }
}
 8007af6:	37e8      	adds	r7, #232	; 0xe8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b54:	b08c      	sub	sp, #48	; 0x30
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	4baa      	ldr	r3, [pc, #680]	; (8007e28 <UART_SetConfig+0x2d8>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b88:	430b      	orrs	r3, r1
 8007b8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a9f      	ldr	r2, [pc, #636]	; (8007e2c <UART_SetConfig+0x2dc>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d004      	beq.n	8007bbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007bc6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	6812      	ldr	r2, [r2, #0]
 8007bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bd0:	430b      	orrs	r3, r1
 8007bd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bda:	f023 010f 	bic.w	r1, r3, #15
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a90      	ldr	r2, [pc, #576]	; (8007e30 <UART_SetConfig+0x2e0>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d125      	bne.n	8007c40 <UART_SetConfig+0xf0>
 8007bf4:	4b8f      	ldr	r3, [pc, #572]	; (8007e34 <UART_SetConfig+0x2e4>)
 8007bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d81a      	bhi.n	8007c38 <UART_SetConfig+0xe8>
 8007c02:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <UART_SetConfig+0xb8>)
 8007c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c08:	08007c19 	.word	0x08007c19
 8007c0c:	08007c29 	.word	0x08007c29
 8007c10:	08007c21 	.word	0x08007c21
 8007c14:	08007c31 	.word	0x08007c31
 8007c18:	2301      	movs	r3, #1
 8007c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c1e:	e116      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007c20:	2302      	movs	r3, #2
 8007c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c26:	e112      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007c28:	2304      	movs	r3, #4
 8007c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c2e:	e10e      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007c30:	2308      	movs	r3, #8
 8007c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c36:	e10a      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007c38:	2310      	movs	r3, #16
 8007c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c3e:	e106      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a7c      	ldr	r2, [pc, #496]	; (8007e38 <UART_SetConfig+0x2e8>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d138      	bne.n	8007cbc <UART_SetConfig+0x16c>
 8007c4a:	4b7a      	ldr	r3, [pc, #488]	; (8007e34 <UART_SetConfig+0x2e4>)
 8007c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c50:	f003 030c 	and.w	r3, r3, #12
 8007c54:	2b0c      	cmp	r3, #12
 8007c56:	d82d      	bhi.n	8007cb4 <UART_SetConfig+0x164>
 8007c58:	a201      	add	r2, pc, #4	; (adr r2, 8007c60 <UART_SetConfig+0x110>)
 8007c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5e:	bf00      	nop
 8007c60:	08007c95 	.word	0x08007c95
 8007c64:	08007cb5 	.word	0x08007cb5
 8007c68:	08007cb5 	.word	0x08007cb5
 8007c6c:	08007cb5 	.word	0x08007cb5
 8007c70:	08007ca5 	.word	0x08007ca5
 8007c74:	08007cb5 	.word	0x08007cb5
 8007c78:	08007cb5 	.word	0x08007cb5
 8007c7c:	08007cb5 	.word	0x08007cb5
 8007c80:	08007c9d 	.word	0x08007c9d
 8007c84:	08007cb5 	.word	0x08007cb5
 8007c88:	08007cb5 	.word	0x08007cb5
 8007c8c:	08007cb5 	.word	0x08007cb5
 8007c90:	08007cad 	.word	0x08007cad
 8007c94:	2300      	movs	r3, #0
 8007c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c9a:	e0d8      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ca2:	e0d4      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007ca4:	2304      	movs	r3, #4
 8007ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007caa:	e0d0      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007cac:	2308      	movs	r3, #8
 8007cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cb2:	e0cc      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007cb4:	2310      	movs	r3, #16
 8007cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cba:	e0c8      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a5e      	ldr	r2, [pc, #376]	; (8007e3c <UART_SetConfig+0x2ec>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d125      	bne.n	8007d12 <UART_SetConfig+0x1c2>
 8007cc6:	4b5b      	ldr	r3, [pc, #364]	; (8007e34 <UART_SetConfig+0x2e4>)
 8007cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ccc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007cd0:	2b30      	cmp	r3, #48	; 0x30
 8007cd2:	d016      	beq.n	8007d02 <UART_SetConfig+0x1b2>
 8007cd4:	2b30      	cmp	r3, #48	; 0x30
 8007cd6:	d818      	bhi.n	8007d0a <UART_SetConfig+0x1ba>
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	d00a      	beq.n	8007cf2 <UART_SetConfig+0x1a2>
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	d814      	bhi.n	8007d0a <UART_SetConfig+0x1ba>
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <UART_SetConfig+0x19a>
 8007ce4:	2b10      	cmp	r3, #16
 8007ce6:	d008      	beq.n	8007cfa <UART_SetConfig+0x1aa>
 8007ce8:	e00f      	b.n	8007d0a <UART_SetConfig+0x1ba>
 8007cea:	2300      	movs	r3, #0
 8007cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf0:	e0ad      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf8:	e0a9      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007cfa:	2304      	movs	r3, #4
 8007cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d00:	e0a5      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007d02:	2308      	movs	r3, #8
 8007d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d08:	e0a1      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007d0a:	2310      	movs	r3, #16
 8007d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d10:	e09d      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a4a      	ldr	r2, [pc, #296]	; (8007e40 <UART_SetConfig+0x2f0>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d125      	bne.n	8007d68 <UART_SetConfig+0x218>
 8007d1c:	4b45      	ldr	r3, [pc, #276]	; (8007e34 <UART_SetConfig+0x2e4>)
 8007d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d26:	2bc0      	cmp	r3, #192	; 0xc0
 8007d28:	d016      	beq.n	8007d58 <UART_SetConfig+0x208>
 8007d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d2c:	d818      	bhi.n	8007d60 <UART_SetConfig+0x210>
 8007d2e:	2b80      	cmp	r3, #128	; 0x80
 8007d30:	d00a      	beq.n	8007d48 <UART_SetConfig+0x1f8>
 8007d32:	2b80      	cmp	r3, #128	; 0x80
 8007d34:	d814      	bhi.n	8007d60 <UART_SetConfig+0x210>
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <UART_SetConfig+0x1f0>
 8007d3a:	2b40      	cmp	r3, #64	; 0x40
 8007d3c:	d008      	beq.n	8007d50 <UART_SetConfig+0x200>
 8007d3e:	e00f      	b.n	8007d60 <UART_SetConfig+0x210>
 8007d40:	2300      	movs	r3, #0
 8007d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d46:	e082      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d4e:	e07e      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007d50:	2304      	movs	r3, #4
 8007d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d56:	e07a      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007d58:	2308      	movs	r3, #8
 8007d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d5e:	e076      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007d60:	2310      	movs	r3, #16
 8007d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d66:	e072      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a35      	ldr	r2, [pc, #212]	; (8007e44 <UART_SetConfig+0x2f4>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d12a      	bne.n	8007dc8 <UART_SetConfig+0x278>
 8007d72:	4b30      	ldr	r3, [pc, #192]	; (8007e34 <UART_SetConfig+0x2e4>)
 8007d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d80:	d01a      	beq.n	8007db8 <UART_SetConfig+0x268>
 8007d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d86:	d81b      	bhi.n	8007dc0 <UART_SetConfig+0x270>
 8007d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d8c:	d00c      	beq.n	8007da8 <UART_SetConfig+0x258>
 8007d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d92:	d815      	bhi.n	8007dc0 <UART_SetConfig+0x270>
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d003      	beq.n	8007da0 <UART_SetConfig+0x250>
 8007d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d9c:	d008      	beq.n	8007db0 <UART_SetConfig+0x260>
 8007d9e:	e00f      	b.n	8007dc0 <UART_SetConfig+0x270>
 8007da0:	2300      	movs	r3, #0
 8007da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007da6:	e052      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007da8:	2302      	movs	r3, #2
 8007daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dae:	e04e      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007db0:	2304      	movs	r3, #4
 8007db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007db6:	e04a      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007db8:	2308      	movs	r3, #8
 8007dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dbe:	e046      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dc6:	e042      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a17      	ldr	r2, [pc, #92]	; (8007e2c <UART_SetConfig+0x2dc>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d13a      	bne.n	8007e48 <UART_SetConfig+0x2f8>
 8007dd2:	4b18      	ldr	r3, [pc, #96]	; (8007e34 <UART_SetConfig+0x2e4>)
 8007dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ddc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007de0:	d01a      	beq.n	8007e18 <UART_SetConfig+0x2c8>
 8007de2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007de6:	d81b      	bhi.n	8007e20 <UART_SetConfig+0x2d0>
 8007de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dec:	d00c      	beq.n	8007e08 <UART_SetConfig+0x2b8>
 8007dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df2:	d815      	bhi.n	8007e20 <UART_SetConfig+0x2d0>
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <UART_SetConfig+0x2b0>
 8007df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dfc:	d008      	beq.n	8007e10 <UART_SetConfig+0x2c0>
 8007dfe:	e00f      	b.n	8007e20 <UART_SetConfig+0x2d0>
 8007e00:	2300      	movs	r3, #0
 8007e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e06:	e022      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e0e:	e01e      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007e10:	2304      	movs	r3, #4
 8007e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e16:	e01a      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007e18:	2308      	movs	r3, #8
 8007e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e1e:	e016      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007e20:	2310      	movs	r3, #16
 8007e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e26:	e012      	b.n	8007e4e <UART_SetConfig+0x2fe>
 8007e28:	cfff69f3 	.word	0xcfff69f3
 8007e2c:	40008000 	.word	0x40008000
 8007e30:	40013800 	.word	0x40013800
 8007e34:	40021000 	.word	0x40021000
 8007e38:	40004400 	.word	0x40004400
 8007e3c:	40004800 	.word	0x40004800
 8007e40:	40004c00 	.word	0x40004c00
 8007e44:	40005000 	.word	0x40005000
 8007e48:	2310      	movs	r3, #16
 8007e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4aae      	ldr	r2, [pc, #696]	; (800810c <UART_SetConfig+0x5bc>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	f040 8097 	bne.w	8007f88 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e5e:	2b08      	cmp	r3, #8
 8007e60:	d823      	bhi.n	8007eaa <UART_SetConfig+0x35a>
 8007e62:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <UART_SetConfig+0x318>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007e8d 	.word	0x08007e8d
 8007e6c:	08007eab 	.word	0x08007eab
 8007e70:	08007e95 	.word	0x08007e95
 8007e74:	08007eab 	.word	0x08007eab
 8007e78:	08007e9b 	.word	0x08007e9b
 8007e7c:	08007eab 	.word	0x08007eab
 8007e80:	08007eab 	.word	0x08007eab
 8007e84:	08007eab 	.word	0x08007eab
 8007e88:	08007ea3 	.word	0x08007ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e8c:	f7fd f98e 	bl	80051ac <HAL_RCC_GetPCLK1Freq>
 8007e90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e92:	e010      	b.n	8007eb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e94:	4b9e      	ldr	r3, [pc, #632]	; (8008110 <UART_SetConfig+0x5c0>)
 8007e96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e98:	e00d      	b.n	8007eb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e9a:	f7fd f919 	bl	80050d0 <HAL_RCC_GetSysClockFreq>
 8007e9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ea0:	e009      	b.n	8007eb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ea8:	e005      	b.n	8007eb6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007eb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 8130 	beq.w	800811e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	4a94      	ldr	r2, [pc, #592]	; (8008114 <UART_SetConfig+0x5c4>)
 8007ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ed0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	005b      	lsls	r3, r3, #1
 8007eda:	4413      	add	r3, r2
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d305      	bcc.n	8007eee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d903      	bls.n	8007ef6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ef4:	e113      	b.n	800811e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	2200      	movs	r2, #0
 8007efa:	60bb      	str	r3, [r7, #8]
 8007efc:	60fa      	str	r2, [r7, #12]
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	4a84      	ldr	r2, [pc, #528]	; (8008114 <UART_SetConfig+0x5c4>)
 8007f04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	603b      	str	r3, [r7, #0]
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f18:	f7f8 fdbc 	bl	8000a94 <__aeabi_uldivmod>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4610      	mov	r0, r2
 8007f22:	4619      	mov	r1, r3
 8007f24:	f04f 0200 	mov.w	r2, #0
 8007f28:	f04f 0300 	mov.w	r3, #0
 8007f2c:	020b      	lsls	r3, r1, #8
 8007f2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f32:	0202      	lsls	r2, r0, #8
 8007f34:	6979      	ldr	r1, [r7, #20]
 8007f36:	6849      	ldr	r1, [r1, #4]
 8007f38:	0849      	lsrs	r1, r1, #1
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	4605      	mov	r5, r0
 8007f40:	eb12 0804 	adds.w	r8, r2, r4
 8007f44:	eb43 0905 	adc.w	r9, r3, r5
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	469a      	mov	sl, r3
 8007f50:	4693      	mov	fp, r2
 8007f52:	4652      	mov	r2, sl
 8007f54:	465b      	mov	r3, fp
 8007f56:	4640      	mov	r0, r8
 8007f58:	4649      	mov	r1, r9
 8007f5a:	f7f8 fd9b 	bl	8000a94 <__aeabi_uldivmod>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4613      	mov	r3, r2
 8007f64:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f6c:	d308      	bcc.n	8007f80 <UART_SetConfig+0x430>
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f74:	d204      	bcs.n	8007f80 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6a3a      	ldr	r2, [r7, #32]
 8007f7c:	60da      	str	r2, [r3, #12]
 8007f7e:	e0ce      	b.n	800811e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f86:	e0ca      	b.n	800811e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	69db      	ldr	r3, [r3, #28]
 8007f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f90:	d166      	bne.n	8008060 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007f92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f96:	2b08      	cmp	r3, #8
 8007f98:	d827      	bhi.n	8007fea <UART_SetConfig+0x49a>
 8007f9a:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <UART_SetConfig+0x450>)
 8007f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa0:	08007fc5 	.word	0x08007fc5
 8007fa4:	08007fcd 	.word	0x08007fcd
 8007fa8:	08007fd5 	.word	0x08007fd5
 8007fac:	08007feb 	.word	0x08007feb
 8007fb0:	08007fdb 	.word	0x08007fdb
 8007fb4:	08007feb 	.word	0x08007feb
 8007fb8:	08007feb 	.word	0x08007feb
 8007fbc:	08007feb 	.word	0x08007feb
 8007fc0:	08007fe3 	.word	0x08007fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fc4:	f7fd f8f2 	bl	80051ac <HAL_RCC_GetPCLK1Freq>
 8007fc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fca:	e014      	b.n	8007ff6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fcc:	f7fd f904 	bl	80051d8 <HAL_RCC_GetPCLK2Freq>
 8007fd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fd2:	e010      	b.n	8007ff6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fd4:	4b4e      	ldr	r3, [pc, #312]	; (8008110 <UART_SetConfig+0x5c0>)
 8007fd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fd8:	e00d      	b.n	8007ff6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fda:	f7fd f879 	bl	80050d0 <HAL_RCC_GetSysClockFreq>
 8007fde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fe0:	e009      	b.n	8007ff6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fe6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fe8:	e005      	b.n	8007ff6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ff4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 8090 	beq.w	800811e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	4a44      	ldr	r2, [pc, #272]	; (8008114 <UART_SetConfig+0x5c4>)
 8008004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008008:	461a      	mov	r2, r3
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008010:	005a      	lsls	r2, r3, #1
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	085b      	lsrs	r3, r3, #1
 8008018:	441a      	add	r2, r3
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008022:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	2b0f      	cmp	r3, #15
 8008028:	d916      	bls.n	8008058 <UART_SetConfig+0x508>
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008030:	d212      	bcs.n	8008058 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	b29b      	uxth	r3, r3
 8008036:	f023 030f 	bic.w	r3, r3, #15
 800803a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	085b      	lsrs	r3, r3, #1
 8008040:	b29b      	uxth	r3, r3
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	b29a      	uxth	r2, r3
 8008048:	8bfb      	ldrh	r3, [r7, #30]
 800804a:	4313      	orrs	r3, r2
 800804c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	8bfa      	ldrh	r2, [r7, #30]
 8008054:	60da      	str	r2, [r3, #12]
 8008056:	e062      	b.n	800811e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800805e:	e05e      	b.n	800811e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008060:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008064:	2b08      	cmp	r3, #8
 8008066:	d828      	bhi.n	80080ba <UART_SetConfig+0x56a>
 8008068:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <UART_SetConfig+0x520>)
 800806a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806e:	bf00      	nop
 8008070:	08008095 	.word	0x08008095
 8008074:	0800809d 	.word	0x0800809d
 8008078:	080080a5 	.word	0x080080a5
 800807c:	080080bb 	.word	0x080080bb
 8008080:	080080ab 	.word	0x080080ab
 8008084:	080080bb 	.word	0x080080bb
 8008088:	080080bb 	.word	0x080080bb
 800808c:	080080bb 	.word	0x080080bb
 8008090:	080080b3 	.word	0x080080b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008094:	f7fd f88a 	bl	80051ac <HAL_RCC_GetPCLK1Freq>
 8008098:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800809a:	e014      	b.n	80080c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800809c:	f7fd f89c 	bl	80051d8 <HAL_RCC_GetPCLK2Freq>
 80080a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080a2:	e010      	b.n	80080c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080a4:	4b1a      	ldr	r3, [pc, #104]	; (8008110 <UART_SetConfig+0x5c0>)
 80080a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080a8:	e00d      	b.n	80080c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080aa:	f7fd f811 	bl	80050d0 <HAL_RCC_GetSysClockFreq>
 80080ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080b0:	e009      	b.n	80080c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080b8:	e005      	b.n	80080c6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80080c4:	bf00      	nop
    }

    if (pclk != 0U)
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d028      	beq.n	800811e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	4a10      	ldr	r2, [pc, #64]	; (8008114 <UART_SetConfig+0x5c4>)
 80080d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080d6:	461a      	mov	r2, r3
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	fbb3 f2f2 	udiv	r2, r3, r2
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	085b      	lsrs	r3, r3, #1
 80080e4:	441a      	add	r2, r3
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	2b0f      	cmp	r3, #15
 80080f4:	d910      	bls.n	8008118 <UART_SetConfig+0x5c8>
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080fc:	d20c      	bcs.n	8008118 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	b29a      	uxth	r2, r3
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	60da      	str	r2, [r3, #12]
 8008108:	e009      	b.n	800811e <UART_SetConfig+0x5ce>
 800810a:	bf00      	nop
 800810c:	40008000 	.word	0x40008000
 8008110:	00f42400 	.word	0x00f42400
 8008114:	08008cf8 	.word	0x08008cf8
      }
      else
      {
        ret = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	2201      	movs	r2, #1
 8008122:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2201      	movs	r2, #1
 800812a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	2200      	movs	r2, #0
 8008132:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2200      	movs	r2, #0
 8008138:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800813a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800813e:	4618      	mov	r0, r3
 8008140:	3730      	adds	r7, #48	; 0x30
 8008142:	46bd      	mov	sp, r7
 8008144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008154:	f003 0308 	and.w	r3, r3, #8
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ba:	f003 0304 	and.w	r3, r3, #4
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	f003 0310 	and.w	r3, r3, #16
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00a      	beq.n	80081fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	430a      	orrs	r2, r1
 80081f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fe:	f003 0320 	and.w	r3, r3, #32
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00a      	beq.n	800821c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	430a      	orrs	r2, r1
 800821a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008224:	2b00      	cmp	r3, #0
 8008226:	d01a      	beq.n	800825e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008246:	d10a      	bne.n	800825e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	430a      	orrs	r2, r1
 800825c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00a      	beq.n	8008280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	430a      	orrs	r2, r1
 800827e:	605a      	str	r2, [r3, #4]
  }
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b098      	sub	sp, #96	; 0x60
 8008290:	af02      	add	r7, sp, #8
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800829c:	f7fa f898 	bl	80023d0 <HAL_GetTick>
 80082a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0308 	and.w	r3, r3, #8
 80082ac:	2b08      	cmp	r3, #8
 80082ae:	d12f      	bne.n	8008310 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082b8:	2200      	movs	r2, #0
 80082ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f88e 	bl	80083e0 <UART_WaitOnFlagUntilTimeout>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d022      	beq.n	8008310 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082de:	653b      	str	r3, [r7, #80]	; 0x50
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	461a      	mov	r2, r3
 80082e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082e8:	647b      	str	r3, [r7, #68]	; 0x44
 80082ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e6      	bne.n	80082ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2220      	movs	r2, #32
 8008300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e063      	b.n	80083d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0304 	and.w	r3, r3, #4
 800831a:	2b04      	cmp	r3, #4
 800831c:	d149      	bne.n	80083b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800831e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008326:	2200      	movs	r2, #0
 8008328:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f857 	bl	80083e0 <UART_WaitOnFlagUntilTimeout>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d03c      	beq.n	80083b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	e853 3f00 	ldrex	r3, [r3]
 8008344:	623b      	str	r3, [r7, #32]
   return(result);
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800834c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008356:	633b      	str	r3, [r7, #48]	; 0x30
 8008358:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800835c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e6      	bne.n	8008338 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3308      	adds	r3, #8
 8008370:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	e853 3f00 	ldrex	r3, [r3]
 8008378:	60fb      	str	r3, [r7, #12]
   return(result);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f023 0301 	bic.w	r3, r3, #1
 8008380:	64bb      	str	r3, [r7, #72]	; 0x48
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3308      	adds	r3, #8
 8008388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800838a:	61fa      	str	r2, [r7, #28]
 800838c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	69b9      	ldr	r1, [r7, #24]
 8008390:	69fa      	ldr	r2, [r7, #28]
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	617b      	str	r3, [r7, #20]
   return(result);
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e5      	bne.n	800836a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2220      	movs	r2, #32
 80083a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e012      	b.n	80083d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3758      	adds	r7, #88	; 0x58
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	4613      	mov	r3, r2
 80083ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083f0:	e04f      	b.n	8008492 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083f8:	d04b      	beq.n	8008492 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083fa:	f7f9 ffe9 	bl	80023d0 <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	429a      	cmp	r2, r3
 8008408:	d302      	bcc.n	8008410 <UART_WaitOnFlagUntilTimeout+0x30>
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e04e      	b.n	80084b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0304 	and.w	r3, r3, #4
 800841e:	2b00      	cmp	r3, #0
 8008420:	d037      	beq.n	8008492 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2b80      	cmp	r3, #128	; 0x80
 8008426:	d034      	beq.n	8008492 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2b40      	cmp	r3, #64	; 0x40
 800842c:	d031      	beq.n	8008492 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	f003 0308 	and.w	r3, r3, #8
 8008438:	2b08      	cmp	r3, #8
 800843a:	d110      	bne.n	800845e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2208      	movs	r2, #8
 8008442:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 f920 	bl	800868a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2208      	movs	r2, #8
 800844e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e029      	b.n	80084b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800846c:	d111      	bne.n	8008492 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008476:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 f906 	bl	800868a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2220      	movs	r2, #32
 8008482:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e00f      	b.n	80084b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	69da      	ldr	r2, [r3, #28]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	4013      	ands	r3, r2
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	429a      	cmp	r2, r3
 80084a0:	bf0c      	ite	eq
 80084a2:	2301      	moveq	r3, #1
 80084a4:	2300      	movne	r3, #0
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	461a      	mov	r2, r3
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d0a0      	beq.n	80083f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b096      	sub	sp, #88	; 0x58
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	4613      	mov	r3, r2
 80084c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	88fa      	ldrh	r2, [r7, #6]
 80084d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2222      	movs	r2, #34	; 0x22
 80084e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d02d      	beq.n	800854e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084f8:	4a40      	ldr	r2, [pc, #256]	; (80085fc <UART_Start_Receive_DMA+0x140>)
 80084fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008502:	4a3f      	ldr	r2, [pc, #252]	; (8008600 <UART_Start_Receive_DMA+0x144>)
 8008504:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800850c:	4a3d      	ldr	r2, [pc, #244]	; (8008604 <UART_Start_Receive_DMA+0x148>)
 800850e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008516:	2200      	movs	r2, #0
 8008518:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3324      	adds	r3, #36	; 0x24
 8008526:	4619      	mov	r1, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852c:	461a      	mov	r2, r3
 800852e:	88fb      	ldrh	r3, [r7, #6]
 8008530:	f7fb fc76 	bl	8003e20 <HAL_DMA_Start_IT>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d009      	beq.n	800854e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2210      	movs	r2, #16
 800853e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2220      	movs	r2, #32
 8008546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e051      	b.n	80085f2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d018      	beq.n	8008588 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800855e:	e853 3f00 	ldrex	r3, [r3]
 8008562:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800856a:	657b      	str	r3, [r7, #84]	; 0x54
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	461a      	mov	r2, r3
 8008572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008574:	64bb      	str	r3, [r7, #72]	; 0x48
 8008576:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800857a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e6      	bne.n	8008556 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3308      	adds	r3, #8
 800858e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	f043 0301 	orr.w	r3, r3, #1
 800859e:	653b      	str	r3, [r7, #80]	; 0x50
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3308      	adds	r3, #8
 80085a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085a8:	637a      	str	r2, [r7, #52]	; 0x34
 80085aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085b0:	e841 2300 	strex	r3, r2, [r1]
 80085b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e5      	bne.n	8008588 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3308      	adds	r3, #8
 80085c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	e853 3f00 	ldrex	r3, [r3]
 80085ca:	613b      	str	r3, [r7, #16]
   return(result);
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3308      	adds	r3, #8
 80085da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085dc:	623a      	str	r2, [r7, #32]
 80085de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e0:	69f9      	ldr	r1, [r7, #28]
 80085e2:	6a3a      	ldr	r2, [r7, #32]
 80085e4:	e841 2300 	strex	r3, r2, [r1]
 80085e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e5      	bne.n	80085bc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3758      	adds	r7, #88	; 0x58
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	08008757 	.word	0x08008757
 8008600:	08008883 	.word	0x08008883
 8008604:	080088c1 	.word	0x080088c1

08008608 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008608:	b480      	push	{r7}
 800860a:	b08f      	sub	sp, #60	; 0x3c
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	e853 3f00 	ldrex	r3, [r3]
 800861c:	61fb      	str	r3, [r7, #28]
   return(result);
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008624:	637b      	str	r3, [r7, #52]	; 0x34
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	461a      	mov	r2, r3
 800862c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008630:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008632:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008636:	e841 2300 	strex	r3, r2, [r1]
 800863a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1e6      	bne.n	8008610 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3308      	adds	r3, #8
 8008648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	60bb      	str	r3, [r7, #8]
   return(result);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008658:	633b      	str	r3, [r7, #48]	; 0x30
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3308      	adds	r3, #8
 8008660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008662:	61ba      	str	r2, [r7, #24]
 8008664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	6979      	ldr	r1, [r7, #20]
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	613b      	str	r3, [r7, #16]
   return(result);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e5      	bne.n	8008642 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800867e:	bf00      	nop
 8008680:	373c      	adds	r7, #60	; 0x3c
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800868a:	b480      	push	{r7}
 800868c:	b095      	sub	sp, #84	; 0x54
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b0:	643b      	str	r3, [r7, #64]	; 0x40
 80086b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e6      	bne.n	8008692 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3308      	adds	r3, #8
 80086ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	e853 3f00 	ldrex	r3, [r3]
 80086d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086da:	f023 0301 	bic.w	r3, r3, #1
 80086de:	64bb      	str	r3, [r7, #72]	; 0x48
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3308      	adds	r3, #8
 80086e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086f0:	e841 2300 	strex	r3, r2, [r1]
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1e3      	bne.n	80086c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008700:	2b01      	cmp	r3, #1
 8008702:	d118      	bne.n	8008736 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	e853 3f00 	ldrex	r3, [r3]
 8008710:	60bb      	str	r3, [r7, #8]
   return(result);
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	f023 0310 	bic.w	r3, r3, #16
 8008718:	647b      	str	r3, [r7, #68]	; 0x44
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008722:	61bb      	str	r3, [r7, #24]
 8008724:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008726:	6979      	ldr	r1, [r7, #20]
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	e841 2300 	strex	r3, r2, [r1]
 800872e:	613b      	str	r3, [r7, #16]
   return(result);
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1e6      	bne.n	8008704 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2220      	movs	r2, #32
 800873a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	675a      	str	r2, [r3, #116]	; 0x74
}
 800874a:	bf00      	nop
 800874c:	3754      	adds	r7, #84	; 0x54
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b09c      	sub	sp, #112	; 0x70
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008762:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0320 	and.w	r3, r3, #32
 800876e:	2b00      	cmp	r3, #0
 8008770:	d171      	bne.n	8008856 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008774:	2200      	movs	r2, #0
 8008776:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800877a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800878a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800878e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	461a      	mov	r2, r3
 8008796:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008798:	65bb      	str	r3, [r7, #88]	; 0x58
 800879a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800879e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e6      	bne.n	800877a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3308      	adds	r3, #8
 80087b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	e853 3f00 	ldrex	r3, [r3]
 80087ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087be:	f023 0301 	bic.w	r3, r3, #1
 80087c2:	667b      	str	r3, [r7, #100]	; 0x64
 80087c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3308      	adds	r3, #8
 80087ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087cc:	647a      	str	r2, [r7, #68]	; 0x44
 80087ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087d4:	e841 2300 	strex	r3, r2, [r1]
 80087d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e5      	bne.n	80087ac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3308      	adds	r3, #8
 80087e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	e853 3f00 	ldrex	r3, [r3]
 80087ee:	623b      	str	r3, [r7, #32]
   return(result);
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087f6:	663b      	str	r3, [r7, #96]	; 0x60
 80087f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3308      	adds	r3, #8
 80087fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008800:	633a      	str	r2, [r7, #48]	; 0x30
 8008802:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008808:	e841 2300 	strex	r3, r2, [r1]
 800880c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e5      	bne.n	80087e0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008816:	2220      	movs	r2, #32
 8008818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800881c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800881e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008820:	2b01      	cmp	r3, #1
 8008822:	d118      	bne.n	8008856 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	e853 3f00 	ldrex	r3, [r3]
 8008830:	60fb      	str	r3, [r7, #12]
   return(result);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f023 0310 	bic.w	r3, r3, #16
 8008838:	65fb      	str	r3, [r7, #92]	; 0x5c
 800883a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008842:	61fb      	str	r3, [r7, #28]
 8008844:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008846:	69b9      	ldr	r1, [r7, #24]
 8008848:	69fa      	ldr	r2, [r7, #28]
 800884a:	e841 2300 	strex	r3, r2, [r1]
 800884e:	617b      	str	r3, [r7, #20]
   return(result);
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1e6      	bne.n	8008824 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008858:	2200      	movs	r2, #0
 800885a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800885c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800885e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008860:	2b01      	cmp	r3, #1
 8008862:	d107      	bne.n	8008874 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008866:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800886a:	4619      	mov	r1, r3
 800886c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800886e:	f7ff f963 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008872:	e002      	b.n	800887a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008874:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008876:	f7f9 fa0d 	bl	8001c94 <HAL_UART_RxCpltCallback>
}
 800887a:	bf00      	nop
 800887c:	3770      	adds	r7, #112	; 0x70
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2201      	movs	r2, #1
 8008894:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800889a:	2b01      	cmp	r3, #1
 800889c:	d109      	bne.n	80088b2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088a4:	085b      	lsrs	r3, r3, #1
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	4619      	mov	r1, r3
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f7ff f944 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088b0:	e002      	b.n	80088b8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff f92c 	bl	8007b10 <HAL_UART_RxHalfCpltCallback>
}
 80088b8:	bf00      	nop
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088d4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e8:	2b80      	cmp	r3, #128	; 0x80
 80088ea:	d109      	bne.n	8008900 <UART_DMAError+0x40>
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	2b21      	cmp	r3, #33	; 0x21
 80088f0:	d106      	bne.n	8008900 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80088fa:	6978      	ldr	r0, [r7, #20]
 80088fc:	f7ff fe84 	bl	8008608 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890a:	2b40      	cmp	r3, #64	; 0x40
 800890c:	d109      	bne.n	8008922 <UART_DMAError+0x62>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2b22      	cmp	r3, #34	; 0x22
 8008912:	d106      	bne.n	8008922 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	2200      	movs	r2, #0
 8008918:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800891c:	6978      	ldr	r0, [r7, #20]
 800891e:	f7ff feb4 	bl	800868a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008928:	f043 0210 	orr.w	r2, r3, #16
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008932:	6978      	ldr	r0, [r7, #20]
 8008934:	f7ff f8f6 	bl	8007b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008938:	bf00      	nop
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f7ff f8e0 	bl	8007b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008964:	bf00      	nop
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b088      	sub	sp, #32
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	60bb      	str	r3, [r7, #8]
   return(result);
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008988:	61fb      	str	r3, [r7, #28]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	61bb      	str	r3, [r7, #24]
 8008994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	6979      	ldr	r1, [r7, #20]
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	613b      	str	r3, [r7, #16]
   return(result);
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e6      	bne.n	8008974 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7ff f8a1 	bl	8007afc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089ba:	bf00      	nop
 80089bc:	3720      	adds	r7, #32
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089ca:	bf00      	nop
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80089de:	bf00      	nop
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b083      	sub	sp, #12
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80089f2:	bf00      	nop
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b085      	sub	sp, #20
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d101      	bne.n	8008a14 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a10:	2302      	movs	r3, #2
 8008a12:	e027      	b.n	8008a64 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2224      	movs	r2, #36	; 0x24
 8008a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 0201 	bic.w	r2, r2, #1
 8008a3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2220      	movs	r2, #32
 8008a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d101      	bne.n	8008a88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a84:	2302      	movs	r3, #2
 8008a86:	e02d      	b.n	8008ae4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2224      	movs	r2, #36	; 0x24
 8008a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f022 0201 	bic.w	r2, r2, #1
 8008aae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f84f 	bl	8008b68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d101      	bne.n	8008b04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b00:	2302      	movs	r3, #2
 8008b02:	e02d      	b.n	8008b60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2224      	movs	r2, #36	; 0x24
 8008b10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 0201 	bic.w	r2, r2, #1
 8008b2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f811 	bl	8008b68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d108      	bne.n	8008b8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b88:	e031      	b.n	8008bee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b8a:	2308      	movs	r3, #8
 8008b8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b8e:	2308      	movs	r3, #8
 8008b90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	0e5b      	lsrs	r3, r3, #25
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	f003 0307 	and.w	r3, r3, #7
 8008ba0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	0f5b      	lsrs	r3, r3, #29
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	f003 0307 	and.w	r3, r3, #7
 8008bb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	7b3a      	ldrb	r2, [r7, #12]
 8008bb6:	4911      	ldr	r1, [pc, #68]	; (8008bfc <UARTEx_SetNbDataToProcess+0x94>)
 8008bb8:	5c8a      	ldrb	r2, [r1, r2]
 8008bba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bbe:	7b3a      	ldrb	r2, [r7, #12]
 8008bc0:	490f      	ldr	r1, [pc, #60]	; (8008c00 <UARTEx_SetNbDataToProcess+0x98>)
 8008bc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	7b7a      	ldrb	r2, [r7, #13]
 8008bd4:	4909      	ldr	r1, [pc, #36]	; (8008bfc <UARTEx_SetNbDataToProcess+0x94>)
 8008bd6:	5c8a      	ldrb	r2, [r1, r2]
 8008bd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bdc:	7b7a      	ldrb	r2, [r7, #13]
 8008bde:	4908      	ldr	r1, [pc, #32]	; (8008c00 <UARTEx_SetNbDataToProcess+0x98>)
 8008be0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008be2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bee:	bf00      	nop
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	08008d10 	.word	0x08008d10
 8008c00:	08008d18 	.word	0x08008d18

08008c04 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	ed93 7a06 	vldr	s14, [r3, #24]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	edd3 7a07 	vldr	s15, [r3, #28]
 8008c1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	edd3 7a08 	vldr	s15, [r3, #32]
 8008c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	edd3 7a06 	vldr	s15, [r3, #24]
 8008c34:	eeb1 7a67 	vneg.f32	s14, s15
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	edd3 7a08 	vldr	s15, [r3, #32]
 8008c3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a1a      	ldr	r2, [r3, #32]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d006      	beq.n	8008c68 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	330c      	adds	r3, #12
 8008c5e:	220c      	movs	r2, #12
 8008c60:	2100      	movs	r1, #0
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 f804 	bl	8008c70 <memset>
  }

}
 8008c68:	bf00      	nop
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <memset>:
 8008c70:	4402      	add	r2, r0
 8008c72:	4603      	mov	r3, r0
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d100      	bne.n	8008c7a <memset+0xa>
 8008c78:	4770      	bx	lr
 8008c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c7e:	e7f9      	b.n	8008c74 <memset+0x4>

08008c80 <__libc_init_array>:
 8008c80:	b570      	push	{r4, r5, r6, lr}
 8008c82:	4d0d      	ldr	r5, [pc, #52]	; (8008cb8 <__libc_init_array+0x38>)
 8008c84:	4c0d      	ldr	r4, [pc, #52]	; (8008cbc <__libc_init_array+0x3c>)
 8008c86:	1b64      	subs	r4, r4, r5
 8008c88:	10a4      	asrs	r4, r4, #2
 8008c8a:	2600      	movs	r6, #0
 8008c8c:	42a6      	cmp	r6, r4
 8008c8e:	d109      	bne.n	8008ca4 <__libc_init_array+0x24>
 8008c90:	4d0b      	ldr	r5, [pc, #44]	; (8008cc0 <__libc_init_array+0x40>)
 8008c92:	4c0c      	ldr	r4, [pc, #48]	; (8008cc4 <__libc_init_array+0x44>)
 8008c94:	f000 f818 	bl	8008cc8 <_init>
 8008c98:	1b64      	subs	r4, r4, r5
 8008c9a:	10a4      	asrs	r4, r4, #2
 8008c9c:	2600      	movs	r6, #0
 8008c9e:	42a6      	cmp	r6, r4
 8008ca0:	d105      	bne.n	8008cae <__libc_init_array+0x2e>
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
 8008ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ca8:	4798      	blx	r3
 8008caa:	3601      	adds	r6, #1
 8008cac:	e7ee      	b.n	8008c8c <__libc_init_array+0xc>
 8008cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cb2:	4798      	blx	r3
 8008cb4:	3601      	adds	r6, #1
 8008cb6:	e7f2      	b.n	8008c9e <__libc_init_array+0x1e>
 8008cb8:	08008d28 	.word	0x08008d28
 8008cbc:	08008d28 	.word	0x08008d28
 8008cc0:	08008d28 	.word	0x08008d28
 8008cc4:	08008d2c 	.word	0x08008d2c

08008cc8 <_init>:
 8008cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cca:	bf00      	nop
 8008ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cce:	bc08      	pop	{r3}
 8008cd0:	469e      	mov	lr, r3
 8008cd2:	4770      	bx	lr

08008cd4 <_fini>:
 8008cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd6:	bf00      	nop
 8008cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cda:	bc08      	pop	{r3}
 8008cdc:	469e      	mov	lr, r3
 8008cde:	4770      	bx	lr
