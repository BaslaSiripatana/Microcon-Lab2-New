
microcon_Lab2_New.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dd8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008fb0  08008fb0  00018fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ff0  08008ff0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008ff0  08008ff0  00018ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ff8  08008ff8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff8  08008ff8  00018ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ffc  08008ffc  00018ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000010  08009010  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08009010  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018620  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cd7  00000000  00000000  000386a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  0003b380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ab  00000000  00000000  0003c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028db5  00000000  00000000  0003d97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001842f  00000000  00000000  00066730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001141d7  00000000  00000000  0007eb5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e60  00000000  00000000  00192d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00198b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008f98 	.word	0x08008f98

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08008f98 	.word	0x08008f98

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb8:	f000 b970 	b.w	8000e9c <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	460d      	mov	r5, r1
 8000bdc:	4604      	mov	r4, r0
 8000bde:	460f      	mov	r7, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14a      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	4694      	mov	ip, r2
 8000be8:	d965      	bls.n	8000cb6 <__udivmoddi4+0xe2>
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	b143      	cbz	r3, 8000c02 <__udivmoddi4+0x2e>
 8000bf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf4:	f1c3 0220 	rsb	r2, r3, #32
 8000bf8:	409f      	lsls	r7, r3
 8000bfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfe:	4317      	orrs	r7, r2
 8000c00:	409c      	lsls	r4, r3
 8000c02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c06:	fa1f f58c 	uxth.w	r5, ip
 8000c0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c0e:	0c22      	lsrs	r2, r4, #16
 8000c10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c18:	fb01 f005 	mul.w	r0, r1, r5
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x62>
 8000c20:	eb1c 0202 	adds.w	r2, ip, r2
 8000c24:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c28:	f080 811c 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	f240 8119 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c32:	3902      	subs	r1, #2
 8000c34:	4462      	add	r2, ip
 8000c36:	1a12      	subs	r2, r2, r0
 8000c38:	b2a4      	uxth	r4, r4
 8000c3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c46:	fb00 f505 	mul.w	r5, r0, r5
 8000c4a:	42a5      	cmp	r5, r4
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x90>
 8000c4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c52:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x294>
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x294>
 8000c60:	4464      	add	r4, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c68:	1b64      	subs	r4, r4, r5
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11e      	cbz	r6, 8000c76 <__udivmoddi4+0xa2>
 8000c6e:	40dc      	lsrs	r4, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	e9c6 4300 	strd	r4, r3, [r6]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0xbc>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80ed 	beq.w	8000e5e <__udivmoddi4+0x28a>
 8000c84:	2100      	movs	r1, #0
 8000c86:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d149      	bne.n	8000d2c <__udivmoddi4+0x158>
 8000c98:	42ab      	cmp	r3, r5
 8000c9a:	d302      	bcc.n	8000ca2 <__udivmoddi4+0xce>
 8000c9c:	4282      	cmp	r2, r0
 8000c9e:	f200 80f8 	bhi.w	8000e92 <__udivmoddi4+0x2be>
 8000ca2:	1a84      	subs	r4, r0, r2
 8000ca4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4617      	mov	r7, r2
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d0e2      	beq.n	8000c76 <__udivmoddi4+0xa2>
 8000cb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb4:	e7df      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000cb6:	b902      	cbnz	r2, 8000cba <__udivmoddi4+0xe6>
 8000cb8:	deff      	udf	#255	; 0xff
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8090 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2101      	movs	r1, #1
 8000cd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd8:	0c22      	lsrs	r2, r4, #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb0e f005 	mul.w	r0, lr, r5
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cea:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2b8>
 8000cf6:	4645      	mov	r5, r8
 8000cf8:	1a12      	subs	r2, r2, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d00:	fb07 2210 	mls	r2, r7, r0, r2
 8000d04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x14e>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x14c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2c2>
 8000d20:	4610      	mov	r0, r2
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2a:	e79f      	b.n	8000c6c <__udivmoddi4+0x98>
 8000d2c:	f1c1 0720 	rsb	r7, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d42:	40fd      	lsrs	r5, r7
 8000d44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	fb09 5518 	mls	r5, r9, r8, r5
 8000d56:	0c1c      	lsrs	r4, r3, #16
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2b4>
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2b4>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4464      	add	r4, ip
 8000d84:	1b64      	subs	r4, r4, r5
 8000d86:	b29d      	uxth	r5, r3
 8000d88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2ac>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2ac>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	4464      	add	r4, ip
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fba3 9502 	umull	r9, r5, r3, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	42ac      	cmp	r4, r5
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46ae      	mov	lr, r5
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x29c>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x298>
 8000dc4:	b156      	cbz	r6, 8000ddc <__udivmoddi4+0x208>
 8000dc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dca:	eb64 040e 	sbc.w	r4, r4, lr
 8000dce:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd2:	40ca      	lsrs	r2, r1
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	4317      	orrs	r7, r2
 8000dd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	f1c3 0120 	rsb	r1, r3, #32
 8000de8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dec:	fa20 f201 	lsr.w	r2, r0, r1
 8000df0:	fa25 f101 	lsr.w	r1, r5, r1
 8000df4:	409d      	lsls	r5, r3
 8000df6:	432a      	orrs	r2, r5
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e04:	fb07 1510 	mls	r5, r7, r0, r1
 8000e08:	0c11      	lsrs	r1, r2, #16
 8000e0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e12:	428d      	cmp	r5, r1
 8000e14:	fa04 f403 	lsl.w	r4, r4, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x258>
 8000e1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b0>
 8000e24:	428d      	cmp	r5, r1
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b0>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4461      	add	r1, ip
 8000e2c:	1b49      	subs	r1, r1, r5
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e34:	fb07 1115 	mls	r1, r7, r5, r1
 8000e38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e40:	4291      	cmp	r1, r2
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x282>
 8000e44:	eb1c 0202 	adds.w	r2, ip, r2
 8000e48:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2a8>
 8000e4e:	4291      	cmp	r1, r2
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2a8>
 8000e52:	3d02      	subs	r5, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a52      	subs	r2, r2, r1
 8000e58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0xfc>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000e64:	4639      	mov	r1, r7
 8000e66:	e6e6      	b.n	8000c36 <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x90>
 8000e6c:	4548      	cmp	r0, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7c:	4645      	mov	r5, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x282>
 8000e80:	462b      	mov	r3, r5
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x258>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8c:	3d02      	subs	r5, #2
 8000e8e:	4462      	add	r2, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e70a      	b.n	8000cac <__udivmoddi4+0xd8>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x14e>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea6:	f001 fb96 	bl	80025d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eaa:	f000 f9ff 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eae:	f000 fdd5 	bl	8001a5c <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb2:	f000 fd99 	bl	80019e8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000eb6:	f000 facf 	bl	8001458 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000eba:	f000 fa43 	bl	8001344 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ebe:	f000 fbbd 	bl	800163c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ec2:	f000 fc09 	bl	80016d8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000ec6:	f000 fccf 	bl	8001868 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000eca:	f000 fb69 	bl	80015a0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ece:	f000 fb0d 	bl	80014ec <MX_TIM1_Init>
  MX_TIM5_Init();
 8000ed2:	f000 fc7b 	bl	80017cc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

    //Read real_positionM1, set_point with DMA
    HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 2);
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	4990      	ldr	r1, [pc, #576]	; (800111c <main+0x27c>)
 8000eda:	4891      	ldr	r0, [pc, #580]	; (8001120 <main+0x280>)
 8000edc:	f001 ffc6 	bl	8002e6c <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start(&htim3);
 8000ee0:	4890      	ldr	r0, [pc, #576]	; (8001124 <main+0x284>)
 8000ee2:	f004 fde3 	bl	8005aac <HAL_TIM_Base_Start>

    //PID Control M1
    PID1.Kp = 0.2;
 8000ee6:	4b90      	ldr	r3, [pc, #576]	; (8001128 <main+0x288>)
 8000ee8:	4a90      	ldr	r2, [pc, #576]	; (800112c <main+0x28c>)
 8000eea:	619a      	str	r2, [r3, #24]
    PID1.Ki = 0.000005;
 8000eec:	4b8e      	ldr	r3, [pc, #568]	; (8001128 <main+0x288>)
 8000eee:	4a90      	ldr	r2, [pc, #576]	; (8001130 <main+0x290>)
 8000ef0:	61da      	str	r2, [r3, #28]
    PID1.Kd = 0.1;
 8000ef2:	4b8d      	ldr	r3, [pc, #564]	; (8001128 <main+0x288>)
 8000ef4:	4a8f      	ldr	r2, [pc, #572]	; (8001134 <main+0x294>)
 8000ef6:	621a      	str	r2, [r3, #32]
    arm_pid_init_f32(&PID1, 0);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	488b      	ldr	r0, [pc, #556]	; (8001128 <main+0x288>)
 8000efc:	f007 ffea 	bl	8008ed4 <arm_pid_init_f32>

    //PID Control M2
    PID2.Kp = 0.6;
 8000f00:	4b8d      	ldr	r3, [pc, #564]	; (8001138 <main+0x298>)
 8000f02:	4a8e      	ldr	r2, [pc, #568]	; (800113c <main+0x29c>)
 8000f04:	619a      	str	r2, [r3, #24]
    PID2.Ki = 0.000001;
 8000f06:	4b8c      	ldr	r3, [pc, #560]	; (8001138 <main+0x298>)
 8000f08:	4a8d      	ldr	r2, [pc, #564]	; (8001140 <main+0x2a0>)
 8000f0a:	61da      	str	r2, [r3, #28]
    PID2.Kd = 0.01;
 8000f0c:	4b8a      	ldr	r3, [pc, #552]	; (8001138 <main+0x298>)
 8000f0e:	4a8d      	ldr	r2, [pc, #564]	; (8001144 <main+0x2a4>)
 8000f10:	621a      	str	r2, [r3, #32]
    arm_pid_init_f32(&PID2, 0);
 8000f12:	2100      	movs	r1, #0
 8000f14:	4888      	ldr	r0, [pc, #544]	; (8001138 <main+0x298>)
 8000f16:	f007 ffdd 	bl	8008ed4 <arm_pid_init_f32>

    //Output Compare for PWM Mode1
    HAL_TIM_Base_Start(&htim4);
 8000f1a:	488b      	ldr	r0, [pc, #556]	; (8001148 <main+0x2a8>)
 8000f1c:	f004 fdc6 	bl	8005aac <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f20:	2100      	movs	r1, #0
 8000f22:	4889      	ldr	r0, [pc, #548]	; (8001148 <main+0x2a8>)
 8000f24:	f004 ff0c 	bl	8005d40 <HAL_TIM_PWM_Start>

    //Output Compare for PWM Mode2
    HAL_TIM_Base_Start(&htim8);
 8000f28:	4888      	ldr	r0, [pc, #544]	; (800114c <main+0x2ac>)
 8000f2a:	f004 fdbf 	bl	8005aac <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4886      	ldr	r0, [pc, #536]	; (800114c <main+0x2ac>)
 8000f32:	f004 ff05 	bl	8005d40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000f36:	2104      	movs	r1, #4
 8000f38:	4884      	ldr	r0, [pc, #528]	; (800114c <main+0x2ac>)
 8000f3a:	f004 ff01 	bl	8005d40 <HAL_TIM_PWM_Start>

    //Mode3 send UART (Polling) to simulink
    HAL_TIM_Base_Start_IT(&htim5);
 8000f3e:	4884      	ldr	r0, [pc, #528]	; (8001150 <main+0x2b0>)
 8000f40:	f004 fe24 	bl	8005b8c <HAL_TIM_Base_Start_IT>

    //Receive UART in DMA mode (Vin from simulink)
    HAL_UART_Receive_DMA(&hlpuart1, get_Uart, 2);
 8000f44:	2202      	movs	r2, #2
 8000f46:	4983      	ldr	r1, [pc, #524]	; (8001154 <main+0x2b4>)
 8000f48:	4883      	ldr	r0, [pc, #524]	; (8001158 <main+0x2b8>)
 8000f4a:	f006 fbcf 	bl	80076ec <HAL_UART_Receive_DMA>

    //QEI
    HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8000f4e:	213c      	movs	r1, #60	; 0x3c
 8000f50:	4882      	ldr	r0, [pc, #520]	; (800115c <main+0x2bc>)
 8000f52:	f005 f8ad 	bl	80060b0 <HAL_TIM_Encoder_Start>

    //Timer interrupt for read position
    HAL_TIM_Base_Start_IT(&htim2);
 8000f56:	4882      	ldr	r0, [pc, #520]	; (8001160 <main+0x2c0>)
 8000f58:	f004 fe18 	bl	8005b8c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  if(mode == 1){ //motor control 12V
 8000f5c:	4b81      	ldr	r3, [pc, #516]	; (8001164 <main+0x2c4>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d16a      	bne.n	800103a <main+0x19a>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2120      	movs	r1, #32
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6c:	f003 fccc 	bl	8004908 <HAL_GPIO_WritePin>
	  		  VfeedbackM1 = arm_pid_f32(&PID1, setpositionM1 - positionM1); //no more than 12V
 8000f70:	4b7d      	ldr	r3, [pc, #500]	; (8001168 <main+0x2c8>)
 8000f72:	ed93 7a00 	vldr	s14, [r3]
 8000f76:	4b7d      	ldr	r3, [pc, #500]	; (800116c <main+0x2cc>)
 8000f78:	edd3 7a00 	vldr	s15, [r3]
 8000f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f80:	4b69      	ldr	r3, [pc, #420]	; (8001128 <main+0x288>)
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	edc7 7a04 	vstr	s15, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	ed93 7a00 	vldr	s14, [r3]
 8000f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f92:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000fa6:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	edd3 6a02 	vldr	s13, [r3, #8]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc8:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4a63      	ldr	r2, [pc, #396]	; (8001170 <main+0x2d0>)
 8000fe4:	6013      	str	r3, [r2, #0]
	  		  //VfeedbackM1 = 0;
	  		  duty_cycle = fabs(VfeedbackM1) * 100/12; //0->12V to 0->100%
 8000fe6:	4b62      	ldr	r3, [pc, #392]	; (8001170 <main+0x2d0>)
 8000fe8:	edd3 7a00 	vldr	s15, [r3]
 8000fec:	eef0 7ae7 	vabs.f32	s15, s15
 8000ff0:	ee17 0a90 	vmov	r0, s15
 8000ff4:	f7ff fa74 	bl	80004e0 <__aeabi_f2d>
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	4b5d      	ldr	r3, [pc, #372]	; (8001174 <main+0x2d4>)
 8000ffe:	f7ff fac7 	bl	8000590 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	4b5a      	ldr	r3, [pc, #360]	; (8001178 <main+0x2d8>)
 8001010:	f7ff fbe8 	bl	80007e4 <__aeabi_ddiv>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fd52 	bl	8000ac4 <__aeabi_d2uiz>
 8001020:	4603      	mov	r3, r0
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b55      	ldr	r3, [pc, #340]	; (800117c <main+0x2dc>)
 8001026:	801a      	strh	r2, [r3, #0]
	  		  PWM_Mode1(duty_cycle);
 8001028:	4b54      	ldr	r3, [pc, #336]	; (800117c <main+0x2dc>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fdcd 	bl	8001bcc <PWM_Mode1>
	  		  PWM_Mode2(0);
 8001032:	2000      	movs	r0, #0
 8001034:	f000 fe04 	bl	8001c40 <PWM_Mode2>
 8001038:	e790      	b.n	8000f5c <main+0xbc>
	  	  }
	  	  else if(mode == 2){ //Fualhaber
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <main+0x2c4>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b02      	cmp	r3, #2
 8001040:	f040 80a4 	bne.w	800118c <main+0x2ec>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2120      	movs	r1, #32
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104c:	f003 fc5c 	bl	8004908 <HAL_GPIO_WritePin>
	  		  VfeedbackM2 = arm_pid_f32(&PID2, setpositionM1 - positionM2); //no more than 12V
 8001050:	4b45      	ldr	r3, [pc, #276]	; (8001168 <main+0x2c8>)
 8001052:	ed93 7a00 	vldr	s14, [r3]
 8001056:	4b4a      	ldr	r3, [pc, #296]	; (8001180 <main+0x2e0>)
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001060:	4b35      	ldr	r3, [pc, #212]	; (8001138 <main+0x298>)
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	edc7 7a01 	vstr	s15, [r7, #4]
    out = (S->A0 * in) +
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	ed93 7a00 	vldr	s14, [r3]
 800106e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001072:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	edd3 6a01 	vldr	s13, [r3, #4]
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001082:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001086:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	edd3 7a04 	vldr	s15, [r3, #16]
 8001096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80010a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a8:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	615a      	str	r2, [r3, #20]
    return (out);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	4a30      	ldr	r2, [pc, #192]	; (8001184 <main+0x2e4>)
 80010c4:	6013      	str	r3, [r2, #0]
	  		  //VfeedbackM2 = -5;
	  		  duty_cycle = fabs(VfeedbackM2) * 100/5; //0->5V to 0->100%
 80010c6:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <main+0x2e4>)
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	eef0 7ae7 	vabs.f32	s15, s15
 80010d0:	ee17 0a90 	vmov	r0, s15
 80010d4:	f7ff fa04 	bl	80004e0 <__aeabi_f2d>
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	4b25      	ldr	r3, [pc, #148]	; (8001174 <main+0x2d4>)
 80010de:	f7ff fa57 	bl	8000590 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <main+0x2e8>)
 80010f0:	f7ff fb78 	bl	80007e4 <__aeabi_ddiv>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f7ff fce2 	bl	8000ac4 <__aeabi_d2uiz>
 8001100:	4603      	mov	r3, r0
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <main+0x2dc>)
 8001106:	801a      	strh	r2, [r3, #0]
	  		  PWM_Mode1(0);
 8001108:	2000      	movs	r0, #0
 800110a:	f000 fd5f 	bl	8001bcc <PWM_Mode1>
	  		  PWM_Mode2(duty_cycle);
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <main+0x2dc>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fd94 	bl	8001c40 <PWM_Mode2>
 8001118:	e720      	b.n	8000f5c <main+0xbc>
 800111a:	bf00      	nop
 800111c:	20000414 	.word	0x20000414
 8001120:	2000002c 	.word	0x2000002c
 8001124:	200002e4 	.word	0x200002e4
 8001128:	20000418 	.word	0x20000418
 800112c:	3e4ccccd 	.word	0x3e4ccccd
 8001130:	36a7c5ac 	.word	0x36a7c5ac
 8001134:	3dcccccd 	.word	0x3dcccccd
 8001138:	2000043c 	.word	0x2000043c
 800113c:	3f19999a 	.word	0x3f19999a
 8001140:	358637bd 	.word	0x358637bd
 8001144:	3c23d70a 	.word	0x3c23d70a
 8001148:	20000330 	.word	0x20000330
 800114c:	200003c8 	.word	0x200003c8
 8001150:	2000037c 	.word	0x2000037c
 8001154:	20000488 	.word	0x20000488
 8001158:	200000f8 	.word	0x200000f8
 800115c:	2000024c 	.word	0x2000024c
 8001160:	20000298 	.word	0x20000298
 8001164:	20000000 	.word	0x20000000
 8001168:	20000464 	.word	0x20000464
 800116c:	20000460 	.word	0x20000460
 8001170:	20000468 	.word	0x20000468
 8001174:	40590000 	.word	0x40590000
 8001178:	40280000 	.word	0x40280000
 800117c:	20000476 	.word	0x20000476
 8001180:	20000470 	.word	0x20000470
 8001184:	2000046c 	.word	0x2000046c
 8001188:	40140000 	.word	0x40140000
	  	  }
	  	  else if(mode == 3){
 800118c:	4b3e      	ldr	r3, [pc, #248]	; (8001288 <main+0x3e8>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b03      	cmp	r3, #3
 8001192:	f47f aee3 	bne.w	8000f5c <main+0xbc>
	  		  if(timestamp<=HAL_GetTick())
 8001196:	f001 fa83 	bl	80026a0 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	4b3b      	ldr	r3, [pc, #236]	; (800128c <main+0x3ec>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d30b      	bcc.n	80011bc <main+0x31c>
	  		  {
	  			timestamp = HAL_GetTick() + 500; //ms
 80011a4:	f001 fa7c 	bl	80026a0 <HAL_GetTick>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80011ae:	4a37      	ldr	r2, [pc, #220]	; (800128c <main+0x3ec>)
 80011b0:	6013      	str	r3, [r2, #0]
	  			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80011b2:	2120      	movs	r1, #32
 80011b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b8:	f003 fbbe 	bl	8004938 <HAL_GPIO_TogglePin>
	  		  }
	  		  VfeedbackM1 = (Raw_Vin*12)/4095; //0->4095 to 0-12V
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <main+0x3f0>)
 80011be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c2:	461a      	mov	r2, r3
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4a31      	ldr	r2, [pc, #196]	; (8001294 <main+0x3f4>)
 80011ce:	fb82 1203 	smull	r1, r2, r2, r3
 80011d2:	441a      	add	r2, r3
 80011d4:	12d2      	asrs	r2, r2, #11
 80011d6:	17db      	asrs	r3, r3, #31
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <main+0x3f8>)
 80011e4:	edc3 7a00 	vstr	s15, [r3]
	  		  if(fabs(3.14 - positionM1)<2){
 80011e8:	4b2c      	ldr	r3, [pc, #176]	; (800129c <main+0x3fc>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f977 	bl	80004e0 <__aeabi_f2d>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	a122      	add	r1, pc, #136	; (adr r1, 8001280 <main+0x3e0>)
 80011f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011fc:	f7ff f810 	bl	8000220 <__aeabi_dsub>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4614      	mov	r4, r2
 8001206:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001212:	4620      	mov	r0, r4
 8001214:	4629      	mov	r1, r5
 8001216:	f7ff fc2d 	bl	8000a74 <__aeabi_dcmplt>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <main+0x388>
	  			VfeedbackM1 = 0;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <main+0x3f8>)
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
	  		  }
	  		  duty_cycle = fabs(VfeedbackM1) * 100/12; //0->12V to 0->100%
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <main+0x3f8>)
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	eef0 7ae7 	vabs.f32	s15, s15
 8001232:	ee17 0a90 	vmov	r0, s15
 8001236:	f7ff f953 	bl	80004e0 <__aeabi_f2d>
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <main+0x400>)
 8001240:	f7ff f9a6 	bl	8000590 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <main+0x404>)
 8001252:	f7ff fac7 	bl	80007e4 <__aeabi_ddiv>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fc31 	bl	8000ac4 <__aeabi_d2uiz>
 8001262:	4603      	mov	r3, r0
 8001264:	b29a      	uxth	r2, r3
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <main+0x408>)
 8001268:	801a      	strh	r2, [r3, #0]
	  		  PWM_Mode1(duty_cycle);
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <main+0x408>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fcac 	bl	8001bcc <PWM_Mode1>
	  		  PWM_Mode2(0);
 8001274:	2000      	movs	r0, #0
 8001276:	f000 fce3 	bl	8001c40 <PWM_Mode2>
	  	  if(mode == 1){ //motor control 12V
 800127a:	e66f      	b.n	8000f5c <main+0xbc>
 800127c:	f3af 8000 	nop.w
 8001280:	51eb851f 	.word	0x51eb851f
 8001284:	40091eb8 	.word	0x40091eb8
 8001288:	20000000 	.word	0x20000000
 800128c:	20000490 	.word	0x20000490
 8001290:	2000048a 	.word	0x2000048a
 8001294:	80080081 	.word	0x80080081
 8001298:	20000468 	.word	0x20000468
 800129c:	20000460 	.word	0x20000460
 80012a0:	40590000 	.word	0x40590000
 80012a4:	40280000 	.word	0x40280000
 80012a8:	20000476 	.word	0x20000476

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b094      	sub	sp, #80	; 0x50
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	2238      	movs	r2, #56	; 0x38
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f007 fe40 	bl	8008f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f003 fb64 	bl	800499c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012de:	2340      	movs	r3, #64	; 0x40
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e2:	2302      	movs	r3, #2
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e6:	2302      	movs	r3, #2
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80012ea:	2304      	movs	r3, #4
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80012ee:	2355      	movs	r3, #85	; 0x55
 80012f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f2:	2302      	movs	r3, #2
 80012f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012f6:	2302      	movs	r3, #2
 80012f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fe:	f107 0318 	add.w	r3, r7, #24
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fbfe 	bl	8004b04 <HAL_RCC_OscConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800130e:	f000 fe33 	bl	8001f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001312:	230f      	movs	r3, #15
 8001314:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001316:	2303      	movs	r3, #3
 8001318:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2104      	movs	r1, #4
 800132a:	4618      	mov	r0, r3
 800132c:	f003 fefc 	bl	8005128 <HAL_RCC_ClockConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001336:	f000 fe1f 	bl	8001f78 <Error_Handler>
  }
}
 800133a:	bf00      	nop
 800133c:	3750      	adds	r7, #80	; 0x50
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	; 0x30
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2220      	movs	r2, #32
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f007 fdef 	bl	8008f40 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001362:	4b3a      	ldr	r3, [pc, #232]	; (800144c <MX_ADC1_Init+0x108>)
 8001364:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001368:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <MX_ADC1_Init+0x108>)
 800136c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001370:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001372:	4b36      	ldr	r3, [pc, #216]	; (800144c <MX_ADC1_Init+0x108>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001378:	4b34      	ldr	r3, [pc, #208]	; (800144c <MX_ADC1_Init+0x108>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800137e:	4b33      	ldr	r3, [pc, #204]	; (800144c <MX_ADC1_Init+0x108>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001384:	4b31      	ldr	r3, [pc, #196]	; (800144c <MX_ADC1_Init+0x108>)
 8001386:	2201      	movs	r2, #1
 8001388:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <MX_ADC1_Init+0x108>)
 800138c:	2204      	movs	r2, #4
 800138e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001390:	4b2e      	ldr	r3, [pc, #184]	; (800144c <MX_ADC1_Init+0x108>)
 8001392:	2200      	movs	r2, #0
 8001394:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <MX_ADC1_Init+0x108>)
 8001398:	2200      	movs	r2, #0
 800139a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800139c:	4b2b      	ldr	r3, [pc, #172]	; (800144c <MX_ADC1_Init+0x108>)
 800139e:	2202      	movs	r2, #2
 80013a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013a2:	4b2a      	ldr	r3, [pc, #168]	; (800144c <MX_ADC1_Init+0x108>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <MX_ADC1_Init+0x108>)
 80013ac:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80013b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <MX_ADC1_Init+0x108>)
 80013b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013ba:	4b24      	ldr	r3, [pc, #144]	; (800144c <MX_ADC1_Init+0x108>)
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013c2:	4b22      	ldr	r3, [pc, #136]	; (800144c <MX_ADC1_Init+0x108>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <MX_ADC1_Init+0x108>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013d0:	481e      	ldr	r0, [pc, #120]	; (800144c <MX_ADC1_Init+0x108>)
 80013d2:	f001 fb8f 	bl	8002af4 <HAL_ADC_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80013dc:	f000 fdcc 	bl	8001f78 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	4818      	ldr	r0, [pc, #96]	; (800144c <MX_ADC1_Init+0x108>)
 80013ec:	f002 fbc0 	bl	8003b70 <HAL_ADCEx_MultiModeConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80013f6:	f000 fdbf 	bl	8001f78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_ADC1_Init+0x10c>)
 80013fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013fe:	2306      	movs	r3, #6
 8001400:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001406:	237f      	movs	r3, #127	; 0x7f
 8001408:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800140a:	2304      	movs	r3, #4
 800140c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4619      	mov	r1, r3
 8001416:	480d      	ldr	r0, [pc, #52]	; (800144c <MX_ADC1_Init+0x108>)
 8001418:	f001 fe1a 	bl	8003050 <HAL_ADC_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001422:	f000 fda9 	bl	8001f78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_ADC1_Init+0x110>)
 8001428:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800142a:	230c      	movs	r3, #12
 800142c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4806      	ldr	r0, [pc, #24]	; (800144c <MX_ADC1_Init+0x108>)
 8001434:	f001 fe0c 	bl	8003050 <HAL_ADC_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800143e:	f000 fd9b 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	3730      	adds	r7, #48	; 0x30
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000002c 	.word	0x2000002c
 8001450:	04300002 	.word	0x04300002
 8001454:	08600004 	.word	0x08600004

08001458 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800145c:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <MX_LPUART1_UART_Init+0x8c>)
 800145e:	4a22      	ldr	r2, [pc, #136]	; (80014e8 <MX_LPUART1_UART_Init+0x90>)
 8001460:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <MX_LPUART1_UART_Init+0x8c>)
 8001464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001468:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <MX_LPUART1_UART_Init+0x8c>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MX_LPUART1_UART_Init+0x8c>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <MX_LPUART1_UART_Init+0x8c>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_LPUART1_UART_Init+0x8c>)
 800147e:	220c      	movs	r2, #12
 8001480:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <MX_LPUART1_UART_Init+0x8c>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_LPUART1_UART_Init+0x8c>)
 800148a:	2200      	movs	r2, #0
 800148c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <MX_LPUART1_UART_Init+0x8c>)
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_LPUART1_UART_Init+0x8c>)
 8001496:	2200      	movs	r2, #0
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800149a:	4812      	ldr	r0, [pc, #72]	; (80014e4 <MX_LPUART1_UART_Init+0x8c>)
 800149c:	f006 f848 	bl	8007530 <HAL_UART_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80014a6:	f000 fd67 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014aa:	2100      	movs	r1, #0
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_LPUART1_UART_Init+0x8c>)
 80014ae:	f007 fc47 	bl	8008d40 <HAL_UARTEx_SetTxFifoThreshold>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80014b8:	f000 fd5e 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014bc:	2100      	movs	r1, #0
 80014be:	4809      	ldr	r0, [pc, #36]	; (80014e4 <MX_LPUART1_UART_Init+0x8c>)
 80014c0:	f007 fc7c 	bl	8008dbc <HAL_UARTEx_SetRxFifoThreshold>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80014ca:	f000 fd55 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_LPUART1_UART_Init+0x8c>)
 80014d0:	f007 fbfd 	bl	8008cce <HAL_UARTEx_DisableFifoMode>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80014da:	f000 fd4d 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200000f8 	.word	0x200000f8
 80014e8:	40008000 	.word	0x40008000

080014ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08c      	sub	sp, #48	; 0x30
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2224      	movs	r2, #36	; 0x24
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f007 fd20 	bl	8008f40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	463b      	mov	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800150a:	4b23      	ldr	r3, [pc, #140]	; (8001598 <MX_TIM1_Init+0xac>)
 800150c:	4a23      	ldr	r2, [pc, #140]	; (800159c <MX_TIM1_Init+0xb0>)
 800150e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001510:	4b21      	ldr	r3, [pc, #132]	; (8001598 <MX_TIM1_Init+0xac>)
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <MX_TIM1_Init+0xac>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3071;
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <MX_TIM1_Init+0xac>)
 800151e:	f640 32ff 	movw	r2, #3071	; 0xbff
 8001522:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <MX_TIM1_Init+0xac>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <MX_TIM1_Init+0xac>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_TIM1_Init+0xac>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001536:	2303      	movs	r3, #3
 8001538:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800153e:	2301      	movs	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800154e:	2301      	movs	r3, #1
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	4619      	mov	r1, r3
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <MX_TIM1_Init+0xac>)
 8001562:	f004 fcff 	bl	8005f64 <HAL_TIM_Encoder_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800156c:	f000 fd04 	bl	8001f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800157c:	463b      	mov	r3, r7
 800157e:	4619      	mov	r1, r3
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_TIM1_Init+0xac>)
 8001582:	f005 fe65 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800158c:	f000 fcf4 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	3730      	adds	r7, #48	; 0x30
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	2000024c 	.word	0x2000024c
 800159c:	40012c00 	.word	0x40012c00

080015a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015be:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <MX_TIM2_Init+0x98>)
 80015c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <MX_TIM2_Init+0x98>)
 80015c8:	22a9      	movs	r2, #169	; 0xa9
 80015ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <MX_TIM2_Init+0x98>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <MX_TIM2_Init+0x98>)
 80015d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <MX_TIM2_Init+0x98>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <MX_TIM2_Init+0x98>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015e6:	4814      	ldr	r0, [pc, #80]	; (8001638 <MX_TIM2_Init+0x98>)
 80015e8:	f004 fa08 	bl	80059fc <HAL_TIM_Base_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015f2:	f000 fcc1 	bl	8001f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4619      	mov	r1, r3
 8001602:	480d      	ldr	r0, [pc, #52]	; (8001638 <MX_TIM2_Init+0x98>)
 8001604:	f005 f846 	bl	8006694 <HAL_TIM_ConfigClockSource>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800160e:	f000 fcb3 	bl	8001f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <MX_TIM2_Init+0x98>)
 8001620:	f005 fe16 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800162a:	f000 fca5 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000298 	.word	0x20000298

0800163c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <MX_TIM3_Init+0x94>)
 800165c:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <MX_TIM3_Init+0x98>)
 800165e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_TIM3_Init+0x94>)
 8001662:	22a9      	movs	r2, #169	; 0xa9
 8001664:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_TIM3_Init+0x94>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_TIM3_Init+0x94>)
 800166e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001672:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <MX_TIM3_Init+0x94>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <MX_TIM3_Init+0x94>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001680:	4813      	ldr	r0, [pc, #76]	; (80016d0 <MX_TIM3_Init+0x94>)
 8001682:	f004 f9bb 	bl	80059fc <HAL_TIM_Base_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800168c:	f000 fc74 	bl	8001f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001694:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	4619      	mov	r1, r3
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <MX_TIM3_Init+0x94>)
 800169e:	f004 fff9 	bl	8006694 <HAL_TIM_ConfigClockSource>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016a8:	f000 fc66 	bl	8001f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016ac:	2320      	movs	r3, #32
 80016ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_TIM3_Init+0x94>)
 80016ba:	f005 fdc9 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016c4:	f000 fc58 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200002e4 	.word	0x200002e4
 80016d4:	40000400 	.word	0x40000400

080016d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08e      	sub	sp, #56	; 0x38
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f8:	463b      	mov	r3, r7
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]
 8001706:	615a      	str	r2, [r3, #20]
 8001708:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800170a:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <MX_TIM4_Init+0xec>)
 800170c:	4a2e      	ldr	r2, [pc, #184]	; (80017c8 <MX_TIM4_Init+0xf0>)
 800170e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16999;
 8001710:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <MX_TIM4_Init+0xec>)
 8001712:	f244 2267 	movw	r2, #16999	; 0x4267
 8001716:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <MX_TIM4_Init+0xec>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <MX_TIM4_Init+0xec>)
 8001720:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001724:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <MX_TIM4_Init+0xec>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <MX_TIM4_Init+0xec>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001732:	4824      	ldr	r0, [pc, #144]	; (80017c4 <MX_TIM4_Init+0xec>)
 8001734:	f004 f962 	bl	80059fc <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 800173e:	f000 fc1b 	bl	8001f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174c:	4619      	mov	r1, r3
 800174e:	481d      	ldr	r0, [pc, #116]	; (80017c4 <MX_TIM4_Init+0xec>)
 8001750:	f004 ffa0 	bl	8006694 <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800175a:	f000 fc0d 	bl	8001f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800175e:	4819      	ldr	r0, [pc, #100]	; (80017c4 <MX_TIM4_Init+0xec>)
 8001760:	f004 fa8c 	bl	8005c7c <HAL_TIM_PWM_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800176a:	f000 fc05 	bl	8001f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	4619      	mov	r1, r3
 800177c:	4811      	ldr	r0, [pc, #68]	; (80017c4 <MX_TIM4_Init+0xec>)
 800177e:	f005 fd67 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001788:	f000 fbf6 	bl	8001f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178c:	2360      	movs	r3, #96	; 0x60
 800178e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001790:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001794:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800179e:	463b      	mov	r3, r7
 80017a0:	2200      	movs	r2, #0
 80017a2:	4619      	mov	r1, r3
 80017a4:	4807      	ldr	r0, [pc, #28]	; (80017c4 <MX_TIM4_Init+0xec>)
 80017a6:	f004 fe61 	bl	800646c <HAL_TIM_PWM_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 80017b0:	f000 fbe2 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017b4:	4803      	ldr	r0, [pc, #12]	; (80017c4 <MX_TIM4_Init+0xec>)
 80017b6:	f000 fe07 	bl	80023c8 <HAL_TIM_MspPostInit>

}
 80017ba:	bf00      	nop
 80017bc:	3738      	adds	r7, #56	; 0x38
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000330 	.word	0x20000330
 80017c8:	40000800 	.word	0x40000800

080017cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <MX_TIM5_Init+0x94>)
 80017ec:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <MX_TIM5_Init+0x98>)
 80017ee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <MX_TIM5_Init+0x94>)
 80017f2:	22a9      	movs	r2, #169	; 0xa9
 80017f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_TIM5_Init+0x94>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4999;
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_TIM5_Init+0x94>)
 80017fe:	f241 3287 	movw	r2, #4999	; 0x1387
 8001802:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001804:	4b16      	ldr	r3, [pc, #88]	; (8001860 <MX_TIM5_Init+0x94>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <MX_TIM5_Init+0x94>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001810:	4813      	ldr	r0, [pc, #76]	; (8001860 <MX_TIM5_Init+0x94>)
 8001812:	f004 f8f3 	bl	80059fc <HAL_TIM_Base_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800181c:	f000 fbac 	bl	8001f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001824:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	4619      	mov	r1, r3
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <MX_TIM5_Init+0x94>)
 800182e:	f004 ff31 	bl	8006694 <HAL_TIM_ConfigClockSource>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001838:	f000 fb9e 	bl	8001f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_TIM5_Init+0x94>)
 800184a:	f005 fd01 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001854:	f000 fb90 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000037c 	.word	0x2000037c
 8001864:	40000c00 	.word	0x40000c00

08001868 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b09c      	sub	sp, #112	; 0x70
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001888:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
 8001898:	615a      	str	r2, [r3, #20]
 800189a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2234      	movs	r2, #52	; 0x34
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f007 fb4c 	bl	8008f40 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018a8:	4b4d      	ldr	r3, [pc, #308]	; (80019e0 <MX_TIM8_Init+0x178>)
 80018aa:	4a4e      	ldr	r2, [pc, #312]	; (80019e4 <MX_TIM8_Init+0x17c>)
 80018ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 80018ae:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <MX_TIM8_Init+0x178>)
 80018b0:	22a9      	movs	r2, #169	; 0xa9
 80018b2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b4:	4b4a      	ldr	r3, [pc, #296]	; (80019e0 <MX_TIM8_Init+0x178>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80018ba:	4b49      	ldr	r3, [pc, #292]	; (80019e0 <MX_TIM8_Init+0x178>)
 80018bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c2:	4b47      	ldr	r3, [pc, #284]	; (80019e0 <MX_TIM8_Init+0x178>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018c8:	4b45      	ldr	r3, [pc, #276]	; (80019e0 <MX_TIM8_Init+0x178>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ce:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <MX_TIM8_Init+0x178>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80018d4:	4842      	ldr	r0, [pc, #264]	; (80019e0 <MX_TIM8_Init+0x178>)
 80018d6:	f004 f891 	bl	80059fc <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80018e0:	f000 fb4a 	bl	8001f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018ee:	4619      	mov	r1, r3
 80018f0:	483b      	ldr	r0, [pc, #236]	; (80019e0 <MX_TIM8_Init+0x178>)
 80018f2:	f004 fecf 	bl	8006694 <HAL_TIM_ConfigClockSource>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80018fc:	f000 fb3c 	bl	8001f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001900:	4837      	ldr	r0, [pc, #220]	; (80019e0 <MX_TIM8_Init+0x178>)
 8001902:	f004 f9bb 	bl	8005c7c <HAL_TIM_PWM_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800190c:	f000 fb34 	bl	8001f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800191c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001920:	4619      	mov	r1, r3
 8001922:	482f      	ldr	r0, [pc, #188]	; (80019e0 <MX_TIM8_Init+0x178>)
 8001924:	f005 fc94 	bl	8007250 <HAL_TIMEx_MasterConfigSynchronization>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800192e:	f000 fb23 	bl	8001f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001932:	2360      	movs	r3, #96	; 0x60
 8001934:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500;
 8001936:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800193c:	2300      	movs	r3, #0
 800193e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001940:	2300      	movs	r3, #0
 8001942:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800194c:	2300      	movs	r3, #0
 800194e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001950:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001954:	2200      	movs	r2, #0
 8001956:	4619      	mov	r1, r3
 8001958:	4821      	ldr	r0, [pc, #132]	; (80019e0 <MX_TIM8_Init+0x178>)
 800195a:	f004 fd87 	bl	800646c <HAL_TIM_PWM_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001964:	f000 fb08 	bl	8001f78 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800196c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001970:	2204      	movs	r2, #4
 8001972:	4619      	mov	r1, r3
 8001974:	481a      	ldr	r0, [pc, #104]	; (80019e0 <MX_TIM8_Init+0x178>)
 8001976:	f004 fd79 	bl	800646c <HAL_TIM_PWM_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM8_Init+0x11c>
  {
    Error_Handler();
 8001980:	f000 fafa 	bl	8001f78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	4619      	mov	r1, r3
 80019c0:	4807      	ldr	r0, [pc, #28]	; (80019e0 <MX_TIM8_Init+0x178>)
 80019c2:	f005 fcdb 	bl	800737c <HAL_TIMEx_ConfigBreakDeadTime>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM8_Init+0x168>
  {
    Error_Handler();
 80019cc:	f000 fad4 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80019d0:	4803      	ldr	r0, [pc, #12]	; (80019e0 <MX_TIM8_Init+0x178>)
 80019d2:	f000 fcf9 	bl	80023c8 <HAL_TIM_MspPostInit>

}
 80019d6:	bf00      	nop
 80019d8:	3770      	adds	r7, #112	; 0x70
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200003c8 	.word	0x200003c8
 80019e4:	40013400 	.word	0x40013400

080019e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_DMA_Init+0x70>)
 80019f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f2:	4a19      	ldr	r2, [pc, #100]	; (8001a58 <MX_DMA_Init+0x70>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6493      	str	r3, [r2, #72]	; 0x48
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <MX_DMA_Init+0x70>)
 80019fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_DMA_Init+0x70>)
 8001a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0a:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <MX_DMA_Init+0x70>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6493      	str	r3, [r2, #72]	; 0x48
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_DMA_Init+0x70>)
 8001a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	200b      	movs	r0, #11
 8001a24:	f002 fa87 	bl	8003f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a28:	200b      	movs	r0, #11
 8001a2a:	f002 fa9e 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	200c      	movs	r0, #12
 8001a34:	f002 fa7f 	bl	8003f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a38:	200c      	movs	r0, #12
 8001a3a:	f002 fa96 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	200d      	movs	r0, #13
 8001a44:	f002 fa77 	bl	8003f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a48:	200d      	movs	r0, #13
 8001a4a:	f002 fa8e 	bl	8003f6a <HAL_NVIC_EnableIRQ>

}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000

08001a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a72:	4b44      	ldr	r3, [pc, #272]	; (8001b84 <MX_GPIO_Init+0x128>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	4a43      	ldr	r2, [pc, #268]	; (8001b84 <MX_GPIO_Init+0x128>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <MX_GPIO_Init+0x128>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a8a:	4b3e      	ldr	r3, [pc, #248]	; (8001b84 <MX_GPIO_Init+0x128>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	4a3d      	ldr	r2, [pc, #244]	; (8001b84 <MX_GPIO_Init+0x128>)
 8001a90:	f043 0320 	orr.w	r3, r3, #32
 8001a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a96:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <MX_GPIO_Init+0x128>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <MX_GPIO_Init+0x128>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	4a37      	ldr	r2, [pc, #220]	; (8001b84 <MX_GPIO_Init+0x128>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aae:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <MX_GPIO_Init+0x128>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <MX_GPIO_Init+0x128>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	4a31      	ldr	r2, [pc, #196]	; (8001b84 <MX_GPIO_Init+0x128>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac6:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <MX_GPIO_Init+0x128>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2108      	movs	r1, #8
 8001ad6:	482c      	ldr	r0, [pc, #176]	; (8001b88 <MX_GPIO_Init+0x12c>)
 8001ad8:	f002 ff16 	bl	8004908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae6:	f002 ff0f 	bl	8004908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001af0:	4826      	ldr	r0, [pc, #152]	; (8001b8c <MX_GPIO_Init+0x130>)
 8001af2:	f002 ff09 	bl	8004908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001afc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	481e      	ldr	r0, [pc, #120]	; (8001b88 <MX_GPIO_Init+0x12c>)
 8001b0e:	f002 fd79 	bl	8004604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b12:	2308      	movs	r3, #8
 8001b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b16:	2301      	movs	r3, #1
 8001b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4619      	mov	r1, r3
 8001b28:	4817      	ldr	r0, [pc, #92]	; (8001b88 <MX_GPIO_Init+0x12c>)
 8001b2a:	f002 fd6b 	bl	8004604 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001b2e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4a:	f002 fd5b 	bl	8004604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	4809      	ldr	r0, [pc, #36]	; (8001b8c <MX_GPIO_Init+0x130>)
 8001b68:	f002 fd4c 	bl	8004604 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2028      	movs	r0, #40	; 0x28
 8001b72:	f002 f9e0 	bl	8003f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b76:	2028      	movs	r0, #40	; 0x28
 8001b78:	f002 f9f7 	bl	8003f6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b7c:	bf00      	nop
 8001b7e:	3728      	adds	r7, #40	; 0x28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000
 8001b88:	48000800 	.word	0x48000800
 8001b8c:	48000400 	.word	0x48000400

08001b90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba0:	d10c      	bne.n	8001bbc <HAL_GPIO_EXTI_Callback+0x2c>
	{
		mode += 1;
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x38>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x38>)
 8001bac:	701a      	strb	r2, [r3, #0]
		if(mode == 4){
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x38>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d102      	bne.n	8001bbc <HAL_GPIO_EXTI_Callback+0x2c>
			mode = 1;
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x38>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	20000000 	.word	0x20000000

08001bcc <PWM_Mode1>:

void PWM_Mode1(int dut){ //Motor Control
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	//PWM to Motor Output Compare
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, dut*10);
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <PWM_Mode1+0x68>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	635a      	str	r2, [r3, #52]	; 0x34

	if(VfeedbackM1 >= 0){   //Motor Rotate Forward (CW) Radiant Increase
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <PWM_Mode1+0x6c>)
 8001be8:	edd3 7a00 	vldr	s15, [r3]
 8001bec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	db0d      	blt.n	8001c12 <PWM_Mode1+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c00:	f002 fe82 	bl	8004908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c0a:	480c      	ldr	r0, [pc, #48]	; (8001c3c <PWM_Mode1+0x70>)
 8001c0c:	f002 fe7c 	bl	8004908 <HAL_GPIO_WritePin>
	}
	else{ //Motor Rotate Reverse Radiant decrease (CCW)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
	}
}
 8001c10:	e00c      	b.n	8001c2c <PWM_Mode1+0x60>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1c:	f002 fe74 	bl	8004908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <PWM_Mode1+0x70>)
 8001c28:	f002 fe6e 	bl	8004908 <HAL_GPIO_WritePin>
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000330 	.word	0x20000330
 8001c38:	20000468 	.word	0x20000468
 8001c3c:	48000400 	.word	0x48000400

08001c40 <PWM_Mode2>:

void PWM_Mode2(int dut){ //Motor Faulhaber
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	//PWM to Motor Output Compare

	if(VfeedbackM2 >= 0){   //Motor Rotate Forward (CW) Radiant Increase
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <PWM_Mode2+0x5c>)
 8001c4a:	edd3 7a00 	vldr	s15, [r3]
 8001c4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c56:	db0d      	blt.n	8001c74 <PWM_Mode2+0x34>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, dut*10);
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <PWM_Mode2+0x60>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <PWM_Mode2+0x60>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else{ //Motor Rotate Reverse Radiant decrease (CCW)
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dut*10);
	}
}
 8001c72:	e00c      	b.n	8001c8e <PWM_Mode2+0x4e>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <PWM_Mode2+0x60>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dut*10);
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <PWM_Mode2+0x60>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	2000046c 	.word	0x2000046c
 8001ca0:	200003c8 	.word	0x200003c8
 8001ca4:	00000000 	.word	0x00000000

08001ca8 <Read_setpoint_positionM1_Mode1>:

void Read_setpoint_positionM1_Mode1(){ //Motor Control
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	//Unwrap positionM1
	if((old_ADC -  ADCBuffer[0])>2048){
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <Read_setpoint_positionM1_Mode1+0xe0>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <Read_setpoint_positionM1_Mode1+0xe4>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cbc:	dd05      	ble.n	8001cca <Read_setpoint_positionM1_Mode1+0x22>
		n_round += 1;
 8001cbe:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <Read_setpoint_positionM1_Mode1+0xe8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	4a32      	ldr	r2, [pc, #200]	; (8001d90 <Read_setpoint_positionM1_Mode1+0xe8>)
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	e00d      	b.n	8001ce6 <Read_setpoint_positionM1_Mode1+0x3e>
	}
	else if((old_ADC -  ADCBuffer[0])<-2048){
 8001cca:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <Read_setpoint_positionM1_Mode1+0xe0>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <Read_setpoint_positionM1_Mode1+0xe4>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8001cda:	da04      	bge.n	8001ce6 <Read_setpoint_positionM1_Mode1+0x3e>
		n_round -= 1;
 8001cdc:	4b2c      	ldr	r3, [pc, #176]	; (8001d90 <Read_setpoint_positionM1_Mode1+0xe8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	4a2b      	ldr	r2, [pc, #172]	; (8001d90 <Read_setpoint_positionM1_Mode1+0xe8>)
 8001ce4:	6013      	str	r3, [r2, #0]
	}
	old_ADC = ADCBuffer[0];
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <Read_setpoint_positionM1_Mode1+0xe4>)
 8001ce8:	881a      	ldrh	r2, [r3, #0]
 8001cea:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <Read_setpoint_positionM1_Mode1+0xe0>)
 8001cec:	801a      	strh	r2, [r3, #0]

	setpositionM1 = ADCBuffer[1]*2*3.14/4095; //4095 -> rad
 8001cee:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <Read_setpoint_positionM1_Mode1+0xe4>)
 8001cf0:	885b      	ldrh	r3, [r3, #2]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fbe1 	bl	80004bc <__aeabi_i2d>
 8001cfa:	a31f      	add	r3, pc, #124	; (adr r3, 8001d78 <Read_setpoint_positionM1_Mode1+0xd0>)
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	f7fe fc46 	bl	8000590 <__aeabi_dmul>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	a31c      	add	r3, pc, #112	; (adr r3, 8001d80 <Read_setpoint_positionM1_Mode1+0xd8>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fd67 	bl	80007e4 <__aeabi_ddiv>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f7fe fef1 	bl	8000b04 <__aeabi_d2f>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <Read_setpoint_positionM1_Mode1+0xec>)
 8001d26:	6013      	str	r3, [r2, #0]
	positionM1 = (ADCBuffer[0] + 4095*n_round)*2*3.14/4095; //4095 -> rad //feedback from potentionmeter
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <Read_setpoint_positionM1_Mode1+0xe4>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <Read_setpoint_positionM1_Mode1+0xe8>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4613      	mov	r3, r2
 8001d34:	031b      	lsls	r3, r3, #12
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fbbd 	bl	80004bc <__aeabi_i2d>
 8001d42:	a30d      	add	r3, pc, #52	; (adr r3, 8001d78 <Read_setpoint_positionM1_Mode1+0xd0>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fc22 	bl	8000590 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	a30a      	add	r3, pc, #40	; (adr r3, 8001d80 <Read_setpoint_positionM1_Mode1+0xd8>)
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	f7fe fd43 	bl	80007e4 <__aeabi_ddiv>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7fe fecd 	bl	8000b04 <__aeabi_d2f>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <Read_setpoint_positionM1_Mode1+0xf0>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	f3af 8000 	nop.w
 8001d78:	51eb851f 	.word	0x51eb851f
 8001d7c:	40091eb8 	.word	0x40091eb8
 8001d80:	00000000 	.word	0x00000000
 8001d84:	40affe00 	.word	0x40affe00
 8001d88:	2000047c 	.word	0x2000047c
 8001d8c:	20000414 	.word	0x20000414
 8001d90:	20000478 	.word	0x20000478
 8001d94:	20000464 	.word	0x20000464
 8001d98:	20000460 	.word	0x20000460
 8001d9c:	00000000 	.word	0x00000000

08001da0 <Read_setpoint_positionM2_Mode2>:

void Read_setpoint_positionM2_Mode2(){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0

	//read position motor 2
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim1);
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <Read_setpoint_positionM2_Mode2+0xa8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <Read_setpoint_positionM2_Mode2+0xac>)
 8001dae:	801a      	strh	r2, [r3, #0]

	//Unwrap positionM2
	if((old_QEI_M2 - QEIReadRaw)>1536){
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <Read_setpoint_positionM2_Mode2+0xb0>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <Read_setpoint_positionM2_Mode2+0xac>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001dc0:	dd05      	ble.n	8001dce <Read_setpoint_positionM2_Mode2+0x2e>
			n_round_M2 += 1;
 8001dc2:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <Read_setpoint_positionM2_Mode2+0xb4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <Read_setpoint_positionM2_Mode2+0xb4>)
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	e00d      	b.n	8001dea <Read_setpoint_positionM2_Mode2+0x4a>
	}
	else if((old_QEI_M2 - QEIReadRaw)<-1536){
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <Read_setpoint_positionM2_Mode2+0xb0>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <Read_setpoint_positionM2_Mode2+0xac>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f513 6fc0 	cmn.w	r3, #1536	; 0x600
 8001dde:	da04      	bge.n	8001dea <Read_setpoint_positionM2_Mode2+0x4a>
			n_round_M2 -= 1;
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <Read_setpoint_positionM2_Mode2+0xb4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <Read_setpoint_positionM2_Mode2+0xb4>)
 8001de8:	6013      	str	r3, [r2, #0]
	}
	old_QEI_M2 = QEIReadRaw;
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <Read_setpoint_positionM2_Mode2+0xac>)
 8001dec:	881a      	ldrh	r2, [r3, #0]
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <Read_setpoint_positionM2_Mode2+0xb0>)
 8001df0:	801a      	strh	r2, [r3, #0]

	positionM2 = (QEIReadRaw + 3072*n_round_M2)*2*3.14/3072;
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <Read_setpoint_positionM2_Mode2+0xac>)
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	4619      	mov	r1, r3
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <Read_setpoint_positionM2_Mode2+0xb4>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	029b      	lsls	r3, r3, #10
 8001e04:	440b      	add	r3, r1
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fb57 	bl	80004bc <__aeabi_i2d>
 8001e0e:	a30c      	add	r3, pc, #48	; (adr r3, 8001e40 <Read_setpoint_positionM2_Mode2+0xa0>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	f7fe fbbc 	bl	8000590 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <Read_setpoint_positionM2_Mode2+0xb8>)
 8001e26:	f7fe fcdd 	bl	80007e4 <__aeabi_ddiv>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	f7fe fe67 	bl	8000b04 <__aeabi_d2f>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <Read_setpoint_positionM2_Mode2+0xbc>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	51eb851f 	.word	0x51eb851f
 8001e44:	40091eb8 	.word	0x40091eb8
 8001e48:	2000024c 	.word	0x2000024c
 8001e4c:	20000474 	.word	0x20000474
 8001e50:	20000484 	.word	0x20000484
 8001e54:	20000480 	.word	0x20000480
 8001e58:	40a80000 	.word	0x40a80000
 8001e5c:	20000470 	.word	0x20000470

08001e60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	if(htim == &htim5 && mode == 3)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d12e      	bne.n	8001ece <HAL_TIM_PeriodElapsedCallback+0x6e>
 8001e70:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d12a      	bne.n	8001ece <HAL_TIM_PeriodElapsedCallback+0x6e>
	{
		pos = ADCBuffer[0] + 4095*n_round + 32768; // Your 16-bit number
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001e7a:	881a      	ldrh	r2, [r3, #0]
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	4619      	mov	r1, r3
 8001e84:	0309      	lsls	r1, r1, #12
 8001e86:	1acb      	subs	r3, r1, r3
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001e96:	801a      	strh	r2, [r3, #0]
		//pos = Raw_Vin + 32768;
		uint8_t header = 69; // ASCII value for 'E'
 8001e98:	2345      	movs	r3, #69	; 0x45
 8001e9a:	73fb      	strb	r3, [r7, #15]
		uint8_t terminator = '\n'; // Newline character
 8001e9c:	230a      	movs	r3, #10
 8001e9e:	73bb      	strb	r3, [r7, #14]

		// Split 16-bit number into two 8-bit parts
		uint8_t highByte_pos = (pos >> 8) & 0xFF;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	737b      	strb	r3, [r7, #13]
		uint8_t lowByte_pos = pos & 0xFF;
 8001eaa:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	733b      	strb	r3, [r7, #12]


		// Prepare buffer to hold header, two 8-bit parts, and terminator
		uint8_t buffer[4];
		buffer[0] = header;
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	723b      	strb	r3, [r7, #8]
		buffer[1] = highByte_pos;
 8001eb4:	7b7b      	ldrb	r3, [r7, #13]
 8001eb6:	727b      	strb	r3, [r7, #9]
		buffer[2] = lowByte_pos;
 8001eb8:	7b3b      	ldrb	r3, [r7, #12]
 8001eba:	72bb      	strb	r3, [r7, #10]
		buffer[3] = terminator;
 8001ebc:	7bbb      	ldrb	r3, [r7, #14]
 8001ebe:	72fb      	strb	r3, [r7, #11]

		// Transmit data over UART
		HAL_UART_Transmit(&hlpuart1, buffer, sizeof(buffer), 10);
 8001ec0:	f107 0108 	add.w	r1, r7, #8
 8001ec4:	230a      	movs	r3, #10
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001eca:	f005 fb81 	bl	80075d0 <HAL_UART_Transmit>

	}

	if(htim == &htim2)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d103      	bne.n	8001ede <HAL_TIM_PeriodElapsedCallback+0x7e>
	{
		Read_setpoint_positionM1_Mode1();
 8001ed6:	f7ff fee7 	bl	8001ca8 <Read_setpoint_positionM1_Mode1>
		Read_setpoint_positionM2_Mode2();
 8001eda:	f7ff ff61 	bl	8001da0 <Read_setpoint_positionM2_Mode2>
	}
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000037c 	.word	0x2000037c
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	20000414 	.word	0x20000414
 8001ef4:	20000478 	.word	0x20000478
 8001ef8:	2000048c 	.word	0x2000048c
 8001efc:	200000f8 	.word	0x200000f8
 8001f00:	20000298 	.word	0x20000298

08001f04 <HAL_UART_RxCpltCallback>:
	//start UART in DMA Mode
	HAL_UART_Receive_DMA(&hlpuart1, get_Uart, 2);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <HAL_UART_RxCpltCallback+0x64>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d124      	bne.n	8001f5e <HAL_UART_RxCpltCallback+0x5a>
	{
		Raw_Vin = (int16_t)get_Uart[0] << 8;
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_UART_RxCpltCallback+0x68>)
 8001f16:	f993 3000 	ldrsb.w	r3, [r3]
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_UART_RxCpltCallback+0x6c>)
 8001f20:	801a      	strh	r2, [r3, #0]
		Raw_Vin |= (uint8_t)get_Uart[1];
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_UART_RxCpltCallback+0x68>)
 8001f24:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_UART_RxCpltCallback+0x6c>)
 8001f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	b21a      	sxth	r2, r3
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HAL_UART_RxCpltCallback+0x6c>)
 8001f38:	801a      	strh	r2, [r3, #0]
		if(Raw_Vin == 4095){
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_UART_RxCpltCallback+0x6c>)
 8001f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f40:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d105      	bne.n	8001f54 <HAL_UART_RxCpltCallback+0x50>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2108      	movs	r1, #8
 8001f4c:	4809      	ldr	r0, [pc, #36]	; (8001f74 <HAL_UART_RxCpltCallback+0x70>)
 8001f4e:	f002 fcdb 	bl	8004908 <HAL_GPIO_WritePin>
		}
		else{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
		}
	}
}
 8001f52:	e004      	b.n	8001f5e <HAL_UART_RxCpltCallback+0x5a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8001f54:	2201      	movs	r2, #1
 8001f56:	2108      	movs	r1, #8
 8001f58:	4806      	ldr	r0, [pc, #24]	; (8001f74 <HAL_UART_RxCpltCallback+0x70>)
 8001f5a:	f002 fcd5 	bl	8004908 <HAL_GPIO_WritePin>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200000f8 	.word	0x200000f8
 8001f6c:	20000488 	.word	0x20000488
 8001f70:	2000048a 	.word	0x2000048a
 8001f74:	48000800 	.word	0x48000800

08001f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f7c:	b672      	cpsid	i
}
 8001f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <Error_Handler+0x8>
	...

08001f84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <HAL_MspInit+0x44>)
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8e:	4a0e      	ldr	r2, [pc, #56]	; (8001fc8 <HAL_MspInit+0x44>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6613      	str	r3, [r2, #96]	; 0x60
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_MspInit+0x44>)
 8001f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_MspInit+0x44>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <HAL_MspInit+0x44>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fac:	6593      	str	r3, [r2, #88]	; 0x58
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_MspInit+0x44>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001fba:	f002 fd93 	bl	8004ae4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b09e      	sub	sp, #120	; 0x78
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	2254      	movs	r2, #84	; 0x54
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f006 ffa7 	bl	8008f40 <memset>
  if(hadc->Instance==ADC1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ffa:	d15f      	bne.n	80020bc <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002000:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002002:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002006:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	4618      	mov	r0, r3
 800200e:	f003 faa7 	bl	8005560 <HAL_RCCEx_PeriphCLKConfig>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002018:	f7ff ffae 	bl	8001f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800201c:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <HAL_ADC_MspInit+0xf8>)
 800201e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002020:	4a28      	ldr	r2, [pc, #160]	; (80020c4 <HAL_ADC_MspInit+0xf8>)
 8002022:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002026:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002028:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_ADC_MspInit+0xf8>)
 800202a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <HAL_ADC_MspInit+0xf8>)
 8002036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002038:	4a22      	ldr	r2, [pc, #136]	; (80020c4 <HAL_ADC_MspInit+0xf8>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002040:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <HAL_ADC_MspInit+0xf8>)
 8002042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800204c:	2303      	movs	r3, #3
 800204e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002050:	2303      	movs	r3, #3
 8002052:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800205c:	4619      	mov	r1, r3
 800205e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002062:	f002 facf 	bl	8004604 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002066:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_ADC_MspInit+0xfc>)
 8002068:	4a18      	ldr	r2, [pc, #96]	; (80020cc <HAL_ADC_MspInit+0x100>)
 800206a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <HAL_ADC_MspInit+0xfc>)
 800206e:	2205      	movs	r2, #5
 8002070:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_ADC_MspInit+0xfc>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_ADC_MspInit+0xfc>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_ADC_MspInit+0xfc>)
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002084:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_ADC_MspInit+0xfc>)
 8002086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_ADC_MspInit+0xfc>)
 800208e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002092:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <HAL_ADC_MspInit+0xfc>)
 8002096:	2220      	movs	r2, #32
 8002098:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_ADC_MspInit+0xfc>)
 800209c:	2200      	movs	r2, #0
 800209e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020a0:	4809      	ldr	r0, [pc, #36]	; (80020c8 <HAL_ADC_MspInit+0xfc>)
 80020a2:	f001 ff7d 	bl	8003fa0 <HAL_DMA_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80020ac:	f7ff ff64 	bl	8001f78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <HAL_ADC_MspInit+0xfc>)
 80020b4:	655a      	str	r2, [r3, #84]	; 0x54
 80020b6:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <HAL_ADC_MspInit+0xfc>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	3778      	adds	r7, #120	; 0x78
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	20000098 	.word	0x20000098
 80020cc:	40020008 	.word	0x40020008

080020d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b09e      	sub	sp, #120	; 0x78
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020e8:	f107 0310 	add.w	r3, r7, #16
 80020ec:	2254      	movs	r2, #84	; 0x54
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f006 ff25 	bl	8008f40 <memset>
  if(huart->Instance==LPUART1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a4d      	ldr	r2, [pc, #308]	; (8002230 <HAL_UART_MspInit+0x160>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	f040 8092 	bne.w	8002226 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002102:	2320      	movs	r3, #32
 8002104:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002106:	2300      	movs	r3, #0
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	4618      	mov	r0, r3
 8002110:	f003 fa26 	bl	8005560 <HAL_RCCEx_PeriphCLKConfig>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800211a:	f7ff ff2d 	bl	8001f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800211e:	4b45      	ldr	r3, [pc, #276]	; (8002234 <HAL_UART_MspInit+0x164>)
 8002120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002122:	4a44      	ldr	r2, [pc, #272]	; (8002234 <HAL_UART_MspInit+0x164>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	65d3      	str	r3, [r2, #92]	; 0x5c
 800212a:	4b42      	ldr	r3, [pc, #264]	; (8002234 <HAL_UART_MspInit+0x164>)
 800212c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	4b3f      	ldr	r3, [pc, #252]	; (8002234 <HAL_UART_MspInit+0x164>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	4a3e      	ldr	r2, [pc, #248]	; (8002234 <HAL_UART_MspInit+0x164>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002142:	4b3c      	ldr	r3, [pc, #240]	; (8002234 <HAL_UART_MspInit+0x164>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800214e:	230c      	movs	r3, #12
 8002150:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800215e:	230c      	movs	r3, #12
 8002160:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002162:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002166:	4619      	mov	r1, r3
 8002168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216c:	f002 fa4a 	bl	8004604 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8002170:	4b31      	ldr	r3, [pc, #196]	; (8002238 <HAL_UART_MspInit+0x168>)
 8002172:	4a32      	ldr	r2, [pc, #200]	; (800223c <HAL_UART_MspInit+0x16c>)
 8002174:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002176:	4b30      	ldr	r3, [pc, #192]	; (8002238 <HAL_UART_MspInit+0x168>)
 8002178:	2222      	movs	r2, #34	; 0x22
 800217a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800217c:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <HAL_UART_MspInit+0x168>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002182:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_UART_MspInit+0x168>)
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002188:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <HAL_UART_MspInit+0x168>)
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800218e:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <HAL_UART_MspInit+0x168>)
 8002190:	2200      	movs	r2, #0
 8002192:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002194:	4b28      	ldr	r3, [pc, #160]	; (8002238 <HAL_UART_MspInit+0x168>)
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800219a:	4b27      	ldr	r3, [pc, #156]	; (8002238 <HAL_UART_MspInit+0x168>)
 800219c:	2220      	movs	r2, #32
 800219e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021a0:	4b25      	ldr	r3, [pc, #148]	; (8002238 <HAL_UART_MspInit+0x168>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80021a6:	4824      	ldr	r0, [pc, #144]	; (8002238 <HAL_UART_MspInit+0x168>)
 80021a8:	f001 fefa 	bl	8003fa0 <HAL_DMA_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80021b2:	f7ff fee1 	bl	8001f78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a1f      	ldr	r2, [pc, #124]	; (8002238 <HAL_UART_MspInit+0x168>)
 80021ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80021be:	4a1e      	ldr	r2, [pc, #120]	; (8002238 <HAL_UART_MspInit+0x168>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 80021c4:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <HAL_UART_MspInit+0x170>)
 80021c6:	4a1f      	ldr	r2, [pc, #124]	; (8002244 <HAL_UART_MspInit+0x174>)
 80021c8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_UART_MspInit+0x170>)
 80021cc:	2223      	movs	r2, #35	; 0x23
 80021ce:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <HAL_UART_MspInit+0x170>)
 80021d2:	2210      	movs	r2, #16
 80021d4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d6:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_UART_MspInit+0x170>)
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021dc:	4b18      	ldr	r3, [pc, #96]	; (8002240 <HAL_UART_MspInit+0x170>)
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_UART_MspInit+0x170>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_UART_MspInit+0x170>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_UART_MspInit+0x170>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_UART_MspInit+0x170>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80021fa:	4811      	ldr	r0, [pc, #68]	; (8002240 <HAL_UART_MspInit+0x170>)
 80021fc:	f001 fed0 	bl	8003fa0 <HAL_DMA_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002206:	f7ff feb7 	bl	8001f78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <HAL_UART_MspInit+0x170>)
 800220e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002210:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <HAL_UART_MspInit+0x170>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2100      	movs	r1, #0
 800221a:	205b      	movs	r0, #91	; 0x5b
 800221c:	f001 fe8b 	bl	8003f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002220:	205b      	movs	r0, #91	; 0x5b
 8002222:	f001 fea2 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002226:	bf00      	nop
 8002228:	3778      	adds	r7, #120	; 0x78
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40008000 	.word	0x40008000
 8002234:	40021000 	.word	0x40021000
 8002238:	2000018c 	.word	0x2000018c
 800223c:	4002001c 	.word	0x4002001c
 8002240:	200001ec 	.word	0x200001ec
 8002244:	40020030 	.word	0x40020030

08002248 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d127      	bne.n	80022ba <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <HAL_TIM_Encoder_MspInit+0x80>)
 800226c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226e:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002270:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002274:	6613      	str	r3, [r2, #96]	; 0x60
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002288:	f043 0304 	orr.w	r3, r3, #4
 800228c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800229a:	2303      	movs	r3, #3
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80022aa:	2302      	movs	r3, #2
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4805      	ldr	r0, [pc, #20]	; (80022cc <HAL_TIM_Encoder_MspInit+0x84>)
 80022b6:	f002 f9a5 	bl	8004604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80022ba:	bf00      	nop
 80022bc:	3728      	adds	r7, #40	; 0x28
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40012c00 	.word	0x40012c00
 80022c8:	40021000 	.word	0x40021000
 80022cc:	48000800 	.word	0x48000800

080022d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e0:	d114      	bne.n	800230c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022e2:	4b34      	ldr	r3, [pc, #208]	; (80023b4 <HAL_TIM_Base_MspInit+0xe4>)
 80022e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e6:	4a33      	ldr	r2, [pc, #204]	; (80023b4 <HAL_TIM_Base_MspInit+0xe4>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6593      	str	r3, [r2, #88]	; 0x58
 80022ee:	4b31      	ldr	r3, [pc, #196]	; (80023b4 <HAL_TIM_Base_MspInit+0xe4>)
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	61fb      	str	r3, [r7, #28]
 80022f8:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	201c      	movs	r0, #28
 8002300:	f001 fe19 	bl	8003f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002304:	201c      	movs	r0, #28
 8002306:	f001 fe30 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800230a:	e04e      	b.n	80023aa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a29      	ldr	r2, [pc, #164]	; (80023b8 <HAL_TIM_Base_MspInit+0xe8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d10c      	bne.n	8002330 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002316:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HAL_TIM_Base_MspInit+0xe4>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <HAL_TIM_Base_MspInit+0xe4>)
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	6593      	str	r3, [r2, #88]	; 0x58
 8002322:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_TIM_Base_MspInit+0xe4>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	69bb      	ldr	r3, [r7, #24]
}
 800232e:	e03c      	b.n	80023aa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a21      	ldr	r2, [pc, #132]	; (80023bc <HAL_TIM_Base_MspInit+0xec>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d10c      	bne.n	8002354 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800233a:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <HAL_TIM_Base_MspInit+0xe4>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <HAL_TIM_Base_MspInit+0xe4>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6593      	str	r3, [r2, #88]	; 0x58
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_TIM_Base_MspInit+0xe4>)
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697b      	ldr	r3, [r7, #20]
}
 8002352:	e02a      	b.n	80023aa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM5)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <HAL_TIM_Base_MspInit+0xf0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d114      	bne.n	8002388 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_TIM_Base_MspInit+0xe4>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	4a14      	ldr	r2, [pc, #80]	; (80023b4 <HAL_TIM_Base_MspInit+0xe4>)
 8002364:	f043 0308 	orr.w	r3, r3, #8
 8002368:	6593      	str	r3, [r2, #88]	; 0x58
 800236a:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_TIM_Base_MspInit+0xe4>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2032      	movs	r0, #50	; 0x32
 800237c:	f001 fddb 	bl	8003f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002380:	2032      	movs	r0, #50	; 0x32
 8002382:	f001 fdf2 	bl	8003f6a <HAL_NVIC_EnableIRQ>
}
 8002386:	e010      	b.n	80023aa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM8)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <HAL_TIM_Base_MspInit+0xf4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d10b      	bne.n	80023aa <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <HAL_TIM_Base_MspInit+0xe4>)
 8002394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002396:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <HAL_TIM_Base_MspInit+0xe4>)
 8002398:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800239c:	6613      	str	r3, [r2, #96]	; 0x60
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_TIM_Base_MspInit+0xe4>)
 80023a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
}
 80023aa:	bf00      	nop
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40000800 	.word	0x40000800
 80023c0:	40000c00 	.word	0x40000c00
 80023c4:	40013400 	.word	0x40013400

080023c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a23      	ldr	r2, [pc, #140]	; (8002474 <HAL_TIM_MspPostInit+0xac>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d11e      	bne.n	8002428 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	4b23      	ldr	r3, [pc, #140]	; (8002478 <HAL_TIM_MspPostInit+0xb0>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	4a22      	ldr	r2, [pc, #136]	; (8002478 <HAL_TIM_MspPostInit+0xb0>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <HAL_TIM_MspPostInit+0xb0>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002414:	230a      	movs	r3, #10
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	4619      	mov	r1, r3
 800241e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002422:	f002 f8ef 	bl	8004604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002426:	e020      	b.n	800246a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM8)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a13      	ldr	r2, [pc, #76]	; (800247c <HAL_TIM_MspPostInit+0xb4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d11b      	bne.n	800246a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_TIM_MspPostInit+0xb0>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	4a10      	ldr	r2, [pc, #64]	; (8002478 <HAL_TIM_MspPostInit+0xb0>)
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_TIM_MspPostInit+0xb0>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800244a:	23c0      	movs	r3, #192	; 0xc0
 800244c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800245a:	2304      	movs	r3, #4
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	4806      	ldr	r0, [pc, #24]	; (8002480 <HAL_TIM_MspPostInit+0xb8>)
 8002466:	f002 f8cd 	bl	8004604 <HAL_GPIO_Init>
}
 800246a:	bf00      	nop
 800246c:	3728      	adds	r7, #40	; 0x28
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40000800 	.word	0x40000800
 8002478:	40021000 	.word	0x40021000
 800247c:	40013400 	.word	0x40013400
 8002480:	48000800 	.word	0x48000800

08002484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002488:	e7fe      	b.n	8002488 <NMI_Handler+0x4>

0800248a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248e:	e7fe      	b.n	800248e <HardFault_Handler+0x4>

08002490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <MemManage_Handler+0x4>

08002496 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800249a:	e7fe      	b.n	800249a <BusFault_Handler+0x4>

0800249c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <UsageFault_Handler+0x4>

080024a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d0:	f000 f8d4 	bl	800267c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <DMA1_Channel1_IRQHandler+0x10>)
 80024de:	f001 ff42 	bl	8004366 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000098 	.word	0x20000098

080024ec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <DMA1_Channel2_IRQHandler+0x10>)
 80024f2:	f001 ff38 	bl	8004366 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	2000018c 	.word	0x2000018c

08002500 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <DMA1_Channel3_IRQHandler+0x10>)
 8002506:	f001 ff2e 	bl	8004366 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200001ec 	.word	0x200001ec

08002514 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <TIM2_IRQHandler+0x10>)
 800251a:	f003 fe57 	bl	80061cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000298 	.word	0x20000298

08002528 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800252c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002530:	f002 fa1c 	bl	800496c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}

08002538 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <TIM5_IRQHandler+0x10>)
 800253e:	f003 fe45 	bl	80061cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	2000037c 	.word	0x2000037c

0800254c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <LPUART1_IRQHandler+0x10>)
 8002552:	f005 f917 	bl	8007784 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200000f8 	.word	0x200000f8

08002560 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <SystemInit+0x20>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <SystemInit+0x20>)
 800256c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002584:	480d      	ldr	r0, [pc, #52]	; (80025bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002586:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002588:	f7ff ffea 	bl	8002560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800258c:	480c      	ldr	r0, [pc, #48]	; (80025c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800258e:	490d      	ldr	r1, [pc, #52]	; (80025c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <LoopForever+0xe>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002594:	e002      	b.n	800259c <LoopCopyDataInit>

08002596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259a:	3304      	adds	r3, #4

0800259c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800259c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a0:	d3f9      	bcc.n	8002596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a2:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80025a4:	4c0a      	ldr	r4, [pc, #40]	; (80025d0 <LoopForever+0x16>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a8:	e001      	b.n	80025ae <LoopFillZerobss>

080025aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ac:	3204      	adds	r2, #4

080025ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b0:	d3fb      	bcc.n	80025aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025b2:	f006 fccd 	bl	8008f50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025b6:	f7fe fc73 	bl	8000ea0 <main>

080025ba <LoopForever>:

LoopForever:
    b LoopForever
 80025ba:	e7fe      	b.n	80025ba <LoopForever>
  ldr   r0, =_estack
 80025bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80025c8:	08009000 	.word	0x08009000
  ldr r2, =_sbss
 80025cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80025d0:	20000498 	.word	0x20000498

080025d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025d4:	e7fe      	b.n	80025d4 <ADC1_2_IRQHandler>

080025d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e0:	2003      	movs	r0, #3
 80025e2:	f001 fc9d 	bl	8003f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025e6:	2000      	movs	r0, #0
 80025e8:	f000 f80e 	bl	8002608 <HAL_InitTick>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	71fb      	strb	r3, [r7, #7]
 80025f6:	e001      	b.n	80025fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025f8:	f7ff fcc4 	bl	8001f84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025fc:	79fb      	ldrb	r3, [r7, #7]

}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002614:	4b16      	ldr	r3, [pc, #88]	; (8002670 <HAL_InitTick+0x68>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d022      	beq.n	8002662 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <HAL_InitTick+0x6c>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <HAL_InitTick+0x68>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002628:	fbb1 f3f3 	udiv	r3, r1, r3
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	4618      	mov	r0, r3
 8002632:	f001 fca8 	bl	8003f86 <HAL_SYSTICK_Config>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10f      	bne.n	800265c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b0f      	cmp	r3, #15
 8002640:	d809      	bhi.n	8002656 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002642:	2200      	movs	r2, #0
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800264a:	f001 fc74 	bl	8003f36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <HAL_InitTick+0x70>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	e007      	b.n	8002666 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	e004      	b.n	8002666 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e001      	b.n	8002666 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	2000000c 	.word	0x2000000c
 8002674:	20000004 	.word	0x20000004
 8002678:	20000008 	.word	0x20000008

0800267c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_IncTick+0x1c>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_IncTick+0x20>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4413      	add	r3, r2
 800268a:	4a03      	ldr	r2, [pc, #12]	; (8002698 <HAL_IncTick+0x1c>)
 800268c:	6013      	str	r3, [r2, #0]
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	20000494 	.word	0x20000494
 800269c:	2000000c 	.word	0x2000000c

080026a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return uwTick;
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <HAL_GetTick+0x14>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000494 	.word	0x20000494

080026b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	609a      	str	r2, [r3, #8]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	609a      	str	r2, [r3, #8]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3360      	adds	r3, #96	; 0x60
 8002732:	461a      	mov	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <LL_ADC_SetOffset+0x44>)
 8002742:	4013      	ands	r3, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	4313      	orrs	r3, r2
 8002750:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002758:	bf00      	nop
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	03fff000 	.word	0x03fff000

08002768 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3360      	adds	r3, #96	; 0x60
 8002776:	461a      	mov	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3360      	adds	r3, #96	; 0x60
 80027a4:	461a      	mov	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	431a      	orrs	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027be:	bf00      	nop
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b087      	sub	sp, #28
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3360      	adds	r3, #96	; 0x60
 80027da:	461a      	mov	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80027f4:	bf00      	nop
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3360      	adds	r3, #96	; 0x60
 8002810:	461a      	mov	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	431a      	orrs	r2, r3
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800282a:	bf00      	nop
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	615a      	str	r2, [r3, #20]
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002882:	b480      	push	{r7}
 8002884:	b087      	sub	sp, #28
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	3330      	adds	r3, #48	; 0x30
 8002892:	461a      	mov	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	4413      	add	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	211f      	movs	r1, #31
 80028ae:	fa01 f303 	lsl.w	r3, r1, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	401a      	ands	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0e9b      	lsrs	r3, r3, #26
 80028ba:	f003 011f 	and.w	r1, r3, #31
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	fa01 f303 	lsl.w	r3, r1, r3
 80028c8:	431a      	orrs	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028da:	b480      	push	{r7}
 80028dc:	b087      	sub	sp, #28
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3314      	adds	r3, #20
 80028ea:	461a      	mov	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	0e5b      	lsrs	r3, r3, #25
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	4413      	add	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	0d1b      	lsrs	r3, r3, #20
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	2107      	movs	r1, #7
 8002908:	fa01 f303 	lsl.w	r3, r1, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	401a      	ands	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	0d1b      	lsrs	r3, r3, #20
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	431a      	orrs	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002924:	bf00      	nop
 8002926:	371c      	adds	r7, #28
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002948:	43db      	mvns	r3, r3
 800294a:	401a      	ands	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0318 	and.w	r3, r3, #24
 8002952:	4908      	ldr	r1, [pc, #32]	; (8002974 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002954:	40d9      	lsrs	r1, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	400b      	ands	r3, r1
 800295a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295e:	431a      	orrs	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	0007ffff 	.word	0x0007ffff

08002978 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 031f 	and.w	r3, r3, #31
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6093      	str	r3, [r2, #8]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029cc:	d101      	bne.n	80029d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a1c:	d101      	bne.n	8002a22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a44:	f043 0201 	orr.w	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <LL_ADC_IsEnabled+0x18>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <LL_ADC_IsEnabled+0x1a>
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a92:	f043 0204 	orr.w	r2, r3, #4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d101      	bne.n	8002abe <LL_ADC_REG_IsConversionOngoing+0x18>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d101      	bne.n	8002ae4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002af4:	b590      	push	{r4, r7, lr}
 8002af6:	b089      	sub	sp, #36	; 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e1a9      	b.n	8002e62 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff fa55 	bl	8001fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff3f 	bl	80029b8 <LL_ADC_IsDeepPowerDownEnabled>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d004      	beq.n	8002b4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff25 	bl	8002994 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff ff5a 	bl	8002a08 <LL_ADC_IsInternalRegulatorEnabled>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d115      	bne.n	8002b86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ff3e 	bl	80029e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b64:	4b9c      	ldr	r3, [pc, #624]	; (8002dd8 <HAL_ADC_Init+0x2e4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	099b      	lsrs	r3, r3, #6
 8002b6a:	4a9c      	ldr	r2, [pc, #624]	; (8002ddc <HAL_ADC_Init+0x2e8>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	3301      	adds	r3, #1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b78:	e002      	b.n	8002b80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f9      	bne.n	8002b7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff ff3c 	bl	8002a08 <LL_ADC_IsInternalRegulatorEnabled>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10d      	bne.n	8002bb2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9a:	f043 0210 	orr.w	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba6:	f043 0201 	orr.w	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff ff75 	bl	8002aa6 <LL_ADC_REG_IsConversionOngoing>
 8002bbc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 8142 	bne.w	8002e50 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 813e 	bne.w	8002e50 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bdc:	f043 0202 	orr.w	r2, r3, #2
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff ff35 	bl	8002a58 <LL_ADC_IsEnabled>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d141      	bne.n	8002c78 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bfc:	d004      	beq.n	8002c08 <HAL_ADC_Init+0x114>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a77      	ldr	r2, [pc, #476]	; (8002de0 <HAL_ADC_Init+0x2ec>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d10f      	bne.n	8002c28 <HAL_ADC_Init+0x134>
 8002c08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c0c:	f7ff ff24 	bl	8002a58 <LL_ADC_IsEnabled>
 8002c10:	4604      	mov	r4, r0
 8002c12:	4873      	ldr	r0, [pc, #460]	; (8002de0 <HAL_ADC_Init+0x2ec>)
 8002c14:	f7ff ff20 	bl	8002a58 <LL_ADC_IsEnabled>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4323      	orrs	r3, r4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	e012      	b.n	8002c4e <HAL_ADC_Init+0x15a>
 8002c28:	486e      	ldr	r0, [pc, #440]	; (8002de4 <HAL_ADC_Init+0x2f0>)
 8002c2a:	f7ff ff15 	bl	8002a58 <LL_ADC_IsEnabled>
 8002c2e:	4604      	mov	r4, r0
 8002c30:	486d      	ldr	r0, [pc, #436]	; (8002de8 <HAL_ADC_Init+0x2f4>)
 8002c32:	f7ff ff11 	bl	8002a58 <LL_ADC_IsEnabled>
 8002c36:	4603      	mov	r3, r0
 8002c38:	431c      	orrs	r4, r3
 8002c3a:	486c      	ldr	r0, [pc, #432]	; (8002dec <HAL_ADC_Init+0x2f8>)
 8002c3c:	f7ff ff0c 	bl	8002a58 <LL_ADC_IsEnabled>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4323      	orrs	r3, r4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d012      	beq.n	8002c78 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c5a:	d004      	beq.n	8002c66 <HAL_ADC_Init+0x172>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a5f      	ldr	r2, [pc, #380]	; (8002de0 <HAL_ADC_Init+0x2ec>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_ADC_Init+0x176>
 8002c66:	4a62      	ldr	r2, [pc, #392]	; (8002df0 <HAL_ADC_Init+0x2fc>)
 8002c68:	e000      	b.n	8002c6c <HAL_ADC_Init+0x178>
 8002c6a:	4a62      	ldr	r2, [pc, #392]	; (8002df4 <HAL_ADC_Init+0x300>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7ff fd20 	bl	80026b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7f5b      	ldrb	r3, [r3, #29]
 8002c7c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c82:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c88:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c8e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c96:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d106      	bne.n	8002cb4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	3b01      	subs	r3, #1
 8002cac:	045b      	lsls	r3, r3, #17
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	4b48      	ldr	r3, [pc, #288]	; (8002df8 <HAL_ADC_Init+0x304>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	69b9      	ldr	r1, [r7, #24]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fee4 	bl	8002acc <LL_ADC_INJ_IsConversionOngoing>
 8002d04:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d17f      	bne.n	8002e0c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d17c      	bne.n	8002e0c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d16:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d1e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d2e:	f023 0302 	bic.w	r3, r3, #2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	69b9      	ldr	r1, [r7, #24]
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d017      	beq.n	8002d74 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d52:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d5c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6911      	ldr	r1, [r2, #16]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002d72:	e013      	b.n	8002d9c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d98:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d12a      	bne.n	8002dfc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dbc:	4311      	orrs	r1, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002dc2:	4311      	orrs	r1, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	611a      	str	r2, [r3, #16]
 8002dd6:	e019      	b.n	8002e0c <HAL_ADC_Init+0x318>
 8002dd8:	20000004 	.word	0x20000004
 8002ddc:	053e2d63 	.word	0x053e2d63
 8002de0:	50000100 	.word	0x50000100
 8002de4:	50000400 	.word	0x50000400
 8002de8:	50000500 	.word	0x50000500
 8002dec:	50000600 	.word	0x50000600
 8002df0:	50000300 	.word	0x50000300
 8002df4:	50000700 	.word	0x50000700
 8002df8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10c      	bne.n	8002e2e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	1e5a      	subs	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e2c:	e007      	b.n	8002e3e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 020f 	bic.w	r2, r2, #15
 8002e3c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e42:	f023 0303 	bic.w	r3, r3, #3
 8002e46:	f043 0201 	orr.w	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e4e:	e007      	b.n	8002e60 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	f043 0210 	orr.w	r2, r3, #16
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3724      	adds	r7, #36	; 0x24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd90      	pop	{r4, r7, pc}
 8002e6a:	bf00      	nop

08002e6c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e80:	d004      	beq.n	8002e8c <HAL_ADC_Start_DMA+0x20>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a5a      	ldr	r2, [pc, #360]	; (8002ff0 <HAL_ADC_Start_DMA+0x184>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d101      	bne.n	8002e90 <HAL_ADC_Start_DMA+0x24>
 8002e8c:	4b59      	ldr	r3, [pc, #356]	; (8002ff4 <HAL_ADC_Start_DMA+0x188>)
 8002e8e:	e000      	b.n	8002e92 <HAL_ADC_Start_DMA+0x26>
 8002e90:	4b59      	ldr	r3, [pc, #356]	; (8002ff8 <HAL_ADC_Start_DMA+0x18c>)
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fd70 	bl	8002978 <LL_ADC_GetMultimode>
 8002e98:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fe01 	bl	8002aa6 <LL_ADC_REG_IsConversionOngoing>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f040 809b 	bne.w	8002fe2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_Start_DMA+0x4e>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e096      	b.n	8002fe8 <HAL_ADC_Start_DMA+0x17c>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a4d      	ldr	r2, [pc, #308]	; (8002ffc <HAL_ADC_Start_DMA+0x190>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d008      	beq.n	8002ede <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d002      	beq.n	8002ede <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b09      	cmp	r3, #9
 8002edc:	d17a      	bne.n	8002fd4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fcf6 	bl	80038d0 <ADC_Enable>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d16d      	bne.n	8002fca <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a3a      	ldr	r2, [pc, #232]	; (8002ff0 <HAL_ADC_Start_DMA+0x184>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_ADC_Start_DMA+0xb4>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a3b      	ldr	r2, [pc, #236]	; (8003000 <HAL_ADC_Start_DMA+0x194>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d002      	beq.n	8002f1c <HAL_ADC_Start_DMA+0xb0>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	e003      	b.n	8002f24 <HAL_ADC_Start_DMA+0xb8>
 8002f1c:	4b39      	ldr	r3, [pc, #228]	; (8003004 <HAL_ADC_Start_DMA+0x198>)
 8002f1e:	e001      	b.n	8002f24 <HAL_ADC_Start_DMA+0xb8>
 8002f20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d002      	beq.n	8002f32 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d105      	bne.n	8002f3e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d006      	beq.n	8002f58 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4e:	f023 0206 	bic.w	r2, r3, #6
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	661a      	str	r2, [r3, #96]	; 0x60
 8002f56:	e002      	b.n	8002f5e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f62:	4a29      	ldr	r2, [pc, #164]	; (8003008 <HAL_ADC_Start_DMA+0x19c>)
 8002f64:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	4a28      	ldr	r2, [pc, #160]	; (800300c <HAL_ADC_Start_DMA+0x1a0>)
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	4a27      	ldr	r2, [pc, #156]	; (8003010 <HAL_ADC_Start_DMA+0x1a4>)
 8002f74:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	221c      	movs	r2, #28
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0210 	orr.w	r2, r2, #16
 8002f94:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3340      	adds	r3, #64	; 0x40
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f001 f89b 	bl	80040f0 <HAL_DMA_Start_IT>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fd5b 	bl	8002a7e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002fc8:	e00d      	b.n	8002fe6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002fd2:	e008      	b.n	8002fe6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002fe0:	e001      	b.n	8002fe6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	50000100 	.word	0x50000100
 8002ff4:	50000300 	.word	0x50000300
 8002ff8:	50000700 	.word	0x50000700
 8002ffc:	50000600 	.word	0x50000600
 8003000:	50000500 	.word	0x50000500
 8003004:	50000400 	.word	0x50000400
 8003008:	080039fd 	.word	0x080039fd
 800300c:	08003ad5 	.word	0x08003ad5
 8003010:	08003af1 	.word	0x08003af1

08003014 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b0b6      	sub	sp, #216	; 0xd8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800306a:	2b01      	cmp	r3, #1
 800306c:	d102      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x24>
 800306e:	2302      	movs	r3, #2
 8003070:	f000 bc13 	b.w	800389a <HAL_ADC_ConfigChannel+0x84a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fd10 	bl	8002aa6 <LL_ADC_REG_IsConversionOngoing>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	f040 83f3 	bne.w	8003874 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6859      	ldr	r1, [r3, #4]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	f7ff fbf1 	bl	8002882 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fcfe 	bl	8002aa6 <LL_ADC_REG_IsConversionOngoing>
 80030aa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fd0a 	bl	8002acc <LL_ADC_INJ_IsConversionOngoing>
 80030b8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f040 81d9 	bne.w	8003478 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f040 81d4 	bne.w	8003478 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030d8:	d10f      	bne.n	80030fa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2200      	movs	r2, #0
 80030e4:	4619      	mov	r1, r3
 80030e6:	f7ff fbf8 	bl	80028da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fb9f 	bl	8002836 <LL_ADC_SetSamplingTimeCommonConfig>
 80030f8:	e00e      	b.n	8003118 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6819      	ldr	r1, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	461a      	mov	r2, r3
 8003108:	f7ff fbe7 	bl	80028da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fb8f 	bl	8002836 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	08db      	lsrs	r3, r3, #3
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b04      	cmp	r3, #4
 8003138:	d022      	beq.n	8003180 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6919      	ldr	r1, [r3, #16]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800314a:	f7ff fae9 	bl	8002720 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6919      	ldr	r1, [r3, #16]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	461a      	mov	r2, r3
 800315c:	f7ff fb35 	bl	80027ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800316c:	2b01      	cmp	r3, #1
 800316e:	d102      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x126>
 8003170:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003174:	e000      	b.n	8003178 <HAL_ADC_ConfigChannel+0x128>
 8003176:	2300      	movs	r3, #0
 8003178:	461a      	mov	r2, r3
 800317a:	f7ff fb41 	bl	8002800 <LL_ADC_SetOffsetSaturation>
 800317e:	e17b      	b.n	8003478 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff faee 	bl	8002768 <LL_ADC_GetOffsetChannel>
 800318c:	4603      	mov	r3, r0
 800318e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x15c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fae3 	bl	8002768 <LL_ADC_GetOffsetChannel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	0e9b      	lsrs	r3, r3, #26
 80031a6:	f003 021f 	and.w	r2, r3, #31
 80031aa:	e01e      	b.n	80031ea <HAL_ADC_ConfigChannel+0x19a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fad8 	bl	8002768 <LL_ADC_GetOffsetChannel>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80031da:	2320      	movs	r3, #32
 80031dc:	e004      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80031de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x1b2>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	0e9b      	lsrs	r3, r3, #26
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	e018      	b.n	8003234 <HAL_ADC_ConfigChannel+0x1e4>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800321a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800321e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003226:	2320      	movs	r3, #32
 8003228:	e004      	b.n	8003234 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800322a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003234:	429a      	cmp	r2, r3
 8003236:	d106      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2200      	movs	r2, #0
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff faa7 	bl	8002794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2101      	movs	r1, #1
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fa8b 	bl	8002768 <LL_ADC_GetOffsetChannel>
 8003252:	4603      	mov	r3, r0
 8003254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10a      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x222>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2101      	movs	r1, #1
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fa80 	bl	8002768 <LL_ADC_GetOffsetChannel>
 8003268:	4603      	mov	r3, r0
 800326a:	0e9b      	lsrs	r3, r3, #26
 800326c:	f003 021f 	and.w	r2, r3, #31
 8003270:	e01e      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x260>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2101      	movs	r1, #1
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fa75 	bl	8002768 <LL_ADC_GetOffsetChannel>
 800327e:	4603      	mov	r3, r0
 8003280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003290:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003298:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80032a0:	2320      	movs	r3, #32
 80032a2:	e004      	b.n	80032ae <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80032a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d105      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x278>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0e9b      	lsrs	r3, r3, #26
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	e018      	b.n	80032fa <HAL_ADC_ConfigChannel+0x2aa>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80032dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80032e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80032ec:	2320      	movs	r3, #32
 80032ee:	e004      	b.n	80032fa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80032f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032f4:	fab3 f383 	clz	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d106      	bne.n	800330c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2200      	movs	r2, #0
 8003304:	2101      	movs	r1, #1
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fa44 	bl	8002794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2102      	movs	r1, #2
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fa28 	bl	8002768 <LL_ADC_GetOffsetChannel>
 8003318:	4603      	mov	r3, r0
 800331a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x2e8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2102      	movs	r1, #2
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fa1d 	bl	8002768 <LL_ADC_GetOffsetChannel>
 800332e:	4603      	mov	r3, r0
 8003330:	0e9b      	lsrs	r3, r3, #26
 8003332:	f003 021f 	and.w	r2, r3, #31
 8003336:	e01e      	b.n	8003376 <HAL_ADC_ConfigChannel+0x326>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2102      	movs	r1, #2
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fa12 	bl	8002768 <LL_ADC_GetOffsetChannel>
 8003344:	4603      	mov	r3, r0
 8003346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003356:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800335a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800335e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003366:	2320      	movs	r3, #32
 8003368:	e004      	b.n	8003374 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800336a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800336e:	fab3 f383 	clz	r3, r3
 8003372:	b2db      	uxtb	r3, r3
 8003374:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337e:	2b00      	cmp	r3, #0
 8003380:	d105      	bne.n	800338e <HAL_ADC_ConfigChannel+0x33e>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	0e9b      	lsrs	r3, r3, #26
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	e016      	b.n	80033bc <HAL_ADC_ConfigChannel+0x36c>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80033a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80033a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80033ae:	2320      	movs	r3, #32
 80033b0:	e004      	b.n	80033bc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80033b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033bc:	429a      	cmp	r2, r3
 80033be:	d106      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2200      	movs	r2, #0
 80033c6:	2102      	movs	r1, #2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff f9e3 	bl	8002794 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2103      	movs	r1, #3
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff f9c7 	bl	8002768 <LL_ADC_GetOffsetChannel>
 80033da:	4603      	mov	r3, r0
 80033dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x3aa>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2103      	movs	r1, #3
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff f9bc 	bl	8002768 <LL_ADC_GetOffsetChannel>
 80033f0:	4603      	mov	r3, r0
 80033f2:	0e9b      	lsrs	r3, r3, #26
 80033f4:	f003 021f 	and.w	r2, r3, #31
 80033f8:	e017      	b.n	800342a <HAL_ADC_ConfigChannel+0x3da>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2103      	movs	r1, #3
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff f9b1 	bl	8002768 <LL_ADC_GetOffsetChannel>
 8003406:	4603      	mov	r3, r0
 8003408:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800340c:	fa93 f3a3 	rbit	r3, r3
 8003410:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003414:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003416:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800341c:	2320      	movs	r3, #32
 800341e:	e003      	b.n	8003428 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003432:	2b00      	cmp	r3, #0
 8003434:	d105      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x3f2>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	0e9b      	lsrs	r3, r3, #26
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	e011      	b.n	8003466 <HAL_ADC_ConfigChannel+0x416>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003452:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800345a:	2320      	movs	r3, #32
 800345c:	e003      	b.n	8003466 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800345e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003460:	fab3 f383 	clz	r3, r3
 8003464:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003466:	429a      	cmp	r2, r3
 8003468:	d106      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2200      	movs	r2, #0
 8003470:	2103      	movs	r1, #3
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff f98e 	bl	8002794 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff faeb 	bl	8002a58 <LL_ADC_IsEnabled>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	f040 813d 	bne.w	8003704 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6819      	ldr	r1, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	461a      	mov	r2, r3
 8003498:	f7ff fa4a 	bl	8002930 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4aa2      	ldr	r2, [pc, #648]	; (800372c <HAL_ADC_ConfigChannel+0x6dc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	f040 812e 	bne.w	8003704 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10b      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x480>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	0e9b      	lsrs	r3, r3, #26
 80034be:	3301      	adds	r3, #1
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	2b09      	cmp	r3, #9
 80034c6:	bf94      	ite	ls
 80034c8:	2301      	movls	r3, #1
 80034ca:	2300      	movhi	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	e019      	b.n	8003504 <HAL_ADC_ConfigChannel+0x4b4>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80034de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80034e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80034e8:	2320      	movs	r3, #32
 80034ea:	e003      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80034ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ee:	fab3 f383 	clz	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	2b09      	cmp	r3, #9
 80034fc:	bf94      	ite	ls
 80034fe:	2301      	movls	r3, #1
 8003500:	2300      	movhi	r3, #0
 8003502:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003504:	2b00      	cmp	r3, #0
 8003506:	d079      	beq.n	80035fc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003510:	2b00      	cmp	r3, #0
 8003512:	d107      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x4d4>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	0e9b      	lsrs	r3, r3, #26
 800351a:	3301      	adds	r3, #1
 800351c:	069b      	lsls	r3, r3, #26
 800351e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003522:	e015      	b.n	8003550 <HAL_ADC_ConfigChannel+0x500>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003534:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800353c:	2320      	movs	r3, #32
 800353e:	e003      	b.n	8003548 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	3301      	adds	r3, #1
 800354a:	069b      	lsls	r3, r3, #26
 800354c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x520>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	0e9b      	lsrs	r3, r3, #26
 8003562:	3301      	adds	r3, #1
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	2101      	movs	r1, #1
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	e017      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x550>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003578:	fa93 f3a3 	rbit	r3, r3
 800357c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800357e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003580:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003588:	2320      	movs	r3, #32
 800358a:	e003      	b.n	8003594 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800358c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800358e:	fab3 f383 	clz	r3, r3
 8003592:	b2db      	uxtb	r3, r3
 8003594:	3301      	adds	r3, #1
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	2101      	movs	r1, #1
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	ea42 0103 	orr.w	r1, r2, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x576>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	0e9b      	lsrs	r3, r3, #26
 80035b6:	3301      	adds	r3, #1
 80035b8:	f003 021f 	and.w	r2, r3, #31
 80035bc:	4613      	mov	r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	4413      	add	r3, r2
 80035c2:	051b      	lsls	r3, r3, #20
 80035c4:	e018      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x5a8>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80035d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80035de:	2320      	movs	r3, #32
 80035e0:	e003      	b.n	80035ea <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80035e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035f8:	430b      	orrs	r3, r1
 80035fa:	e07e      	b.n	80036fa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003604:	2b00      	cmp	r3, #0
 8003606:	d107      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x5c8>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	0e9b      	lsrs	r3, r3, #26
 800360e:	3301      	adds	r3, #1
 8003610:	069b      	lsls	r3, r3, #26
 8003612:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003616:	e015      	b.n	8003644 <HAL_ADC_ConfigChannel+0x5f4>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003630:	2320      	movs	r3, #32
 8003632:	e003      	b.n	800363c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	3301      	adds	r3, #1
 800363e:	069b      	lsls	r3, r3, #26
 8003640:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x614>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	0e9b      	lsrs	r3, r3, #26
 8003656:	3301      	adds	r3, #1
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2101      	movs	r1, #1
 800365e:	fa01 f303 	lsl.w	r3, r1, r3
 8003662:	e017      	b.n	8003694 <HAL_ADC_ConfigChannel+0x644>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	61fb      	str	r3, [r7, #28]
  return result;
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800367c:	2320      	movs	r3, #32
 800367e:	e003      	b.n	8003688 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	3301      	adds	r3, #1
 800368a:	f003 031f 	and.w	r3, r3, #31
 800368e:	2101      	movs	r1, #1
 8003690:	fa01 f303 	lsl.w	r3, r1, r3
 8003694:	ea42 0103 	orr.w	r1, r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10d      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x670>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0e9b      	lsrs	r3, r3, #26
 80036aa:	3301      	adds	r3, #1
 80036ac:	f003 021f 	and.w	r2, r3, #31
 80036b0:	4613      	mov	r3, r2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4413      	add	r3, r2
 80036b6:	3b1e      	subs	r3, #30
 80036b8:	051b      	lsls	r3, r3, #20
 80036ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036be:	e01b      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x6a8>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	613b      	str	r3, [r7, #16]
  return result;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80036d8:	2320      	movs	r3, #32
 80036da:	e003      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	f003 021f 	and.w	r2, r3, #31
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	3b1e      	subs	r3, #30
 80036f2:	051b      	lsls	r3, r3, #20
 80036f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036fe:	4619      	mov	r1, r3
 8003700:	f7ff f8eb 	bl	80028da <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_ADC_ConfigChannel+0x6e0>)
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80be 	beq.w	800388e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800371a:	d004      	beq.n	8003726 <HAL_ADC_ConfigChannel+0x6d6>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a04      	ldr	r2, [pc, #16]	; (8003734 <HAL_ADC_ConfigChannel+0x6e4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10a      	bne.n	800373c <HAL_ADC_ConfigChannel+0x6ec>
 8003726:	4b04      	ldr	r3, [pc, #16]	; (8003738 <HAL_ADC_ConfigChannel+0x6e8>)
 8003728:	e009      	b.n	800373e <HAL_ADC_ConfigChannel+0x6ee>
 800372a:	bf00      	nop
 800372c:	407f0000 	.word	0x407f0000
 8003730:	80080000 	.word	0x80080000
 8003734:	50000100 	.word	0x50000100
 8003738:	50000300 	.word	0x50000300
 800373c:	4b59      	ldr	r3, [pc, #356]	; (80038a4 <HAL_ADC_ConfigChannel+0x854>)
 800373e:	4618      	mov	r0, r3
 8003740:	f7fe ffe0 	bl	8002704 <LL_ADC_GetCommonPathInternalCh>
 8003744:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a56      	ldr	r2, [pc, #344]	; (80038a8 <HAL_ADC_ConfigChannel+0x858>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_ADC_ConfigChannel+0x70c>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a55      	ldr	r2, [pc, #340]	; (80038ac <HAL_ADC_ConfigChannel+0x85c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d13a      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800375c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d134      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003770:	d005      	beq.n	800377e <HAL_ADC_ConfigChannel+0x72e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a4e      	ldr	r2, [pc, #312]	; (80038b0 <HAL_ADC_ConfigChannel+0x860>)
 8003778:	4293      	cmp	r3, r2
 800377a:	f040 8085 	bne.w	8003888 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003786:	d004      	beq.n	8003792 <HAL_ADC_ConfigChannel+0x742>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a49      	ldr	r2, [pc, #292]	; (80038b4 <HAL_ADC_ConfigChannel+0x864>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x746>
 8003792:	4a49      	ldr	r2, [pc, #292]	; (80038b8 <HAL_ADC_ConfigChannel+0x868>)
 8003794:	e000      	b.n	8003798 <HAL_ADC_ConfigChannel+0x748>
 8003796:	4a43      	ldr	r2, [pc, #268]	; (80038a4 <HAL_ADC_ConfigChannel+0x854>)
 8003798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800379c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037a0:	4619      	mov	r1, r3
 80037a2:	4610      	mov	r0, r2
 80037a4:	f7fe ff9b 	bl	80026de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037a8:	4b44      	ldr	r3, [pc, #272]	; (80038bc <HAL_ADC_ConfigChannel+0x86c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	099b      	lsrs	r3, r3, #6
 80037ae:	4a44      	ldr	r2, [pc, #272]	; (80038c0 <HAL_ADC_ConfigChannel+0x870>)
 80037b0:	fba2 2303 	umull	r2, r3, r2, r3
 80037b4:	099b      	lsrs	r3, r3, #6
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	4613      	mov	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037c2:	e002      	b.n	80037ca <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f9      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037d0:	e05a      	b.n	8003888 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a3b      	ldr	r2, [pc, #236]	; (80038c4 <HAL_ADC_ConfigChannel+0x874>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d125      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d11f      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a31      	ldr	r2, [pc, #196]	; (80038b4 <HAL_ADC_ConfigChannel+0x864>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d104      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x7ac>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a34      	ldr	r2, [pc, #208]	; (80038c8 <HAL_ADC_ConfigChannel+0x878>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d047      	beq.n	800388c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003804:	d004      	beq.n	8003810 <HAL_ADC_ConfigChannel+0x7c0>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2a      	ldr	r2, [pc, #168]	; (80038b4 <HAL_ADC_ConfigChannel+0x864>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d101      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x7c4>
 8003810:	4a29      	ldr	r2, [pc, #164]	; (80038b8 <HAL_ADC_ConfigChannel+0x868>)
 8003812:	e000      	b.n	8003816 <HAL_ADC_ConfigChannel+0x7c6>
 8003814:	4a23      	ldr	r2, [pc, #140]	; (80038a4 <HAL_ADC_ConfigChannel+0x854>)
 8003816:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800381a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f7fe ff5c 	bl	80026de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003826:	e031      	b.n	800388c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a27      	ldr	r2, [pc, #156]	; (80038cc <HAL_ADC_ConfigChannel+0x87c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d12d      	bne.n	800388e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003832:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d127      	bne.n	800388e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1c      	ldr	r2, [pc, #112]	; (80038b4 <HAL_ADC_ConfigChannel+0x864>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d022      	beq.n	800388e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003850:	d004      	beq.n	800385c <HAL_ADC_ConfigChannel+0x80c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a17      	ldr	r2, [pc, #92]	; (80038b4 <HAL_ADC_ConfigChannel+0x864>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d101      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x810>
 800385c:	4a16      	ldr	r2, [pc, #88]	; (80038b8 <HAL_ADC_ConfigChannel+0x868>)
 800385e:	e000      	b.n	8003862 <HAL_ADC_ConfigChannel+0x812>
 8003860:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <HAL_ADC_ConfigChannel+0x854>)
 8003862:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003866:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800386a:	4619      	mov	r1, r3
 800386c:	4610      	mov	r0, r2
 800386e:	f7fe ff36 	bl	80026de <LL_ADC_SetCommonPathInternalCh>
 8003872:	e00c      	b.n	800388e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003886:	e002      	b.n	800388e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003888:	bf00      	nop
 800388a:	e000      	b.n	800388e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800388c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003896:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800389a:	4618      	mov	r0, r3
 800389c:	37d8      	adds	r7, #216	; 0xd8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	50000700 	.word	0x50000700
 80038a8:	c3210000 	.word	0xc3210000
 80038ac:	90c00010 	.word	0x90c00010
 80038b0:	50000600 	.word	0x50000600
 80038b4:	50000100 	.word	0x50000100
 80038b8:	50000300 	.word	0x50000300
 80038bc:	20000004 	.word	0x20000004
 80038c0:	053e2d63 	.word	0x053e2d63
 80038c4:	c7520000 	.word	0xc7520000
 80038c8:	50000500 	.word	0x50000500
 80038cc:	cb840000 	.word	0xcb840000

080038d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80038d8:	2300      	movs	r3, #0
 80038da:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff f8b9 	bl	8002a58 <LL_ADC_IsEnabled>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d176      	bne.n	80039da <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	4b3c      	ldr	r3, [pc, #240]	; (80039e4 <ADC_Enable+0x114>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00d      	beq.n	8003916 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	f043 0210 	orr.w	r2, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390a:	f043 0201 	orr.w	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e062      	b.n	80039dc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff f888 	bl	8002a30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003928:	d004      	beq.n	8003934 <ADC_Enable+0x64>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a2e      	ldr	r2, [pc, #184]	; (80039e8 <ADC_Enable+0x118>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d101      	bne.n	8003938 <ADC_Enable+0x68>
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <ADC_Enable+0x11c>)
 8003936:	e000      	b.n	800393a <ADC_Enable+0x6a>
 8003938:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <ADC_Enable+0x120>)
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fee2 	bl	8002704 <LL_ADC_GetCommonPathInternalCh>
 8003940:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003946:	2b00      	cmp	r3, #0
 8003948:	d013      	beq.n	8003972 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800394a:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <ADC_Enable+0x124>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	099b      	lsrs	r3, r3, #6
 8003950:	4a29      	ldr	r2, [pc, #164]	; (80039f8 <ADC_Enable+0x128>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	099b      	lsrs	r3, r3, #6
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	4613      	mov	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003964:	e002      	b.n	800396c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	3b01      	subs	r3, #1
 800396a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f9      	bne.n	8003966 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003972:	f7fe fe95 	bl	80026a0 <HAL_GetTick>
 8003976:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003978:	e028      	b.n	80039cc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff f86a 	bl	8002a58 <LL_ADC_IsEnabled>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff f84e 	bl	8002a30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003994:	f7fe fe84 	bl	80026a0 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d914      	bls.n	80039cc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d00d      	beq.n	80039cc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	f043 0210 	orr.w	r2, r3, #16
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e007      	b.n	80039dc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d1cf      	bne.n	800397a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	8000003f 	.word	0x8000003f
 80039e8:	50000100 	.word	0x50000100
 80039ec:	50000300 	.word	0x50000300
 80039f0:	50000700 	.word	0x50000700
 80039f4:	20000004 	.word	0x20000004
 80039f8:	053e2d63 	.word	0x053e2d63

080039fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d14b      	bne.n	8003aae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d021      	beq.n	8003a74 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe ff11 	bl	800285c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d032      	beq.n	8003aa6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d12b      	bne.n	8003aa6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d11f      	bne.n	8003aa6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6a:	f043 0201 	orr.w	r2, r3, #1
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a72:	e018      	b.n	8003aa6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d111      	bne.n	8003aa6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d105      	bne.n	8003aa6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9e:	f043 0201 	orr.w	r2, r3, #1
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f7ff fab4 	bl	8003014 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003aac:	e00e      	b.n	8003acc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f7ff fabe 	bl	800303c <HAL_ADC_ErrorCallback>
}
 8003ac0:	e004      	b.n	8003acc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4798      	blx	r3
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f7ff faa0 	bl	8003028 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ae8:	bf00      	nop
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0e:	f043 0204 	orr.w	r2, r3, #4
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f7ff fa90 	bl	800303c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <LL_ADC_IsEnabled>:
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <LL_ADC_IsEnabled+0x18>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <LL_ADC_IsEnabled+0x1a>
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <LL_ADC_REG_IsConversionOngoing>:
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d101      	bne.n	8003b62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b0a1      	sub	sp, #132	; 0x84
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e0e7      	b.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003b96:	2300      	movs	r3, #0
 8003b98:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ba6:	d102      	bne.n	8003bae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ba8:	4b6f      	ldr	r3, [pc, #444]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	e009      	b.n	8003bc2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a6e      	ldr	r2, [pc, #440]	; (8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d102      	bne.n	8003bbe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003bb8:	4b6d      	ldr	r3, [pc, #436]	; (8003d70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	e001      	b.n	8003bc2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10b      	bne.n	8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0be      	b.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ffb1 	bl	8003b4a <LL_ADC_REG_IsConversionOngoing>
 8003be8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff ffab 	bl	8003b4a <LL_ADC_REG_IsConversionOngoing>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f040 80a0 	bne.w	8003d3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f040 809c 	bne.w	8003d3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c0c:	d004      	beq.n	8003c18 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a55      	ldr	r2, [pc, #340]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d101      	bne.n	8003c1c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003c18:	4b56      	ldr	r3, [pc, #344]	; (8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003c1a:	e000      	b.n	8003c1e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003c1c:	4b56      	ldr	r3, [pc, #344]	; (8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003c1e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d04b      	beq.n	8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c3a:	035b      	lsls	r3, r3, #13
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c4c:	d004      	beq.n	8003c58 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a45      	ldr	r2, [pc, #276]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d10f      	bne.n	8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003c58:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c5c:	f7ff ff62 	bl	8003b24 <LL_ADC_IsEnabled>
 8003c60:	4604      	mov	r4, r0
 8003c62:	4841      	ldr	r0, [pc, #260]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c64:	f7ff ff5e 	bl	8003b24 <LL_ADC_IsEnabled>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	4323      	orrs	r3, r4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	e012      	b.n	8003c9e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003c78:	483c      	ldr	r0, [pc, #240]	; (8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c7a:	f7ff ff53 	bl	8003b24 <LL_ADC_IsEnabled>
 8003c7e:	4604      	mov	r4, r0
 8003c80:	483b      	ldr	r0, [pc, #236]	; (8003d70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c82:	f7ff ff4f 	bl	8003b24 <LL_ADC_IsEnabled>
 8003c86:	4603      	mov	r3, r0
 8003c88:	431c      	orrs	r4, r3
 8003c8a:	483c      	ldr	r0, [pc, #240]	; (8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003c8c:	f7ff ff4a 	bl	8003b24 <LL_ADC_IsEnabled>
 8003c90:	4603      	mov	r3, r0
 8003c92:	4323      	orrs	r3, r4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d056      	beq.n	8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003caa:	f023 030f 	bic.w	r3, r3, #15
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	6811      	ldr	r1, [r2, #0]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	6892      	ldr	r2, [r2, #8]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cbc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cbe:	e047      	b.n	8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cd4:	d004      	beq.n	8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a23      	ldr	r2, [pc, #140]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d10f      	bne.n	8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003ce0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ce4:	f7ff ff1e 	bl	8003b24 <LL_ADC_IsEnabled>
 8003ce8:	4604      	mov	r4, r0
 8003cea:	481f      	ldr	r0, [pc, #124]	; (8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003cec:	f7ff ff1a 	bl	8003b24 <LL_ADC_IsEnabled>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4323      	orrs	r3, r4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2301      	moveq	r3, #1
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e012      	b.n	8003d26 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003d00:	481a      	ldr	r0, [pc, #104]	; (8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d02:	f7ff ff0f 	bl	8003b24 <LL_ADC_IsEnabled>
 8003d06:	4604      	mov	r4, r0
 8003d08:	4819      	ldr	r0, [pc, #100]	; (8003d70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d0a:	f7ff ff0b 	bl	8003b24 <LL_ADC_IsEnabled>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	431c      	orrs	r4, r3
 8003d12:	481a      	ldr	r0, [pc, #104]	; (8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003d14:	f7ff ff06 	bl	8003b24 <LL_ADC_IsEnabled>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4323      	orrs	r3, r4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bf0c      	ite	eq
 8003d20:	2301      	moveq	r3, #1
 8003d22:	2300      	movne	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d012      	beq.n	8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d32:	f023 030f 	bic.w	r3, r3, #15
 8003d36:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d38:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d3a:	e009      	b.n	8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	f043 0220 	orr.w	r2, r3, #32
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003d4e:	e000      	b.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d5a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3784      	adds	r7, #132	; 0x84
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd90      	pop	{r4, r7, pc}
 8003d66:	bf00      	nop
 8003d68:	50000100 	.word	0x50000100
 8003d6c:	50000400 	.word	0x50000400
 8003d70:	50000500 	.word	0x50000500
 8003d74:	50000300 	.word	0x50000300
 8003d78:	50000700 	.word	0x50000700
 8003d7c:	50000600 	.word	0x50000600

08003d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003db2:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	60d3      	str	r3, [r2, #12]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dcc:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	f003 0307 	and.w	r3, r3, #7
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000ed00 	.word	0xe000ed00

08003de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	db0b      	blt.n	8003e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df6:	79fb      	ldrb	r3, [r7, #7]
 8003df8:	f003 021f 	and.w	r2, r3, #31
 8003dfc:	4907      	ldr	r1, [pc, #28]	; (8003e1c <__NVIC_EnableIRQ+0x38>)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2001      	movs	r0, #1
 8003e06:	fa00 f202 	lsl.w	r2, r0, r2
 8003e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	e000e100 	.word	0xe000e100

08003e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	6039      	str	r1, [r7, #0]
 8003e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	db0a      	blt.n	8003e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	490c      	ldr	r1, [pc, #48]	; (8003e6c <__NVIC_SetPriority+0x4c>)
 8003e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3e:	0112      	lsls	r2, r2, #4
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	440b      	add	r3, r1
 8003e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e48:	e00a      	b.n	8003e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4908      	ldr	r1, [pc, #32]	; (8003e70 <__NVIC_SetPriority+0x50>)
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	3b04      	subs	r3, #4
 8003e58:	0112      	lsls	r2, r2, #4
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	761a      	strb	r2, [r3, #24]
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	e000e100 	.word	0xe000e100
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	; 0x24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f1c3 0307 	rsb	r3, r3, #7
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	bf28      	it	cs
 8003e92:	2304      	movcs	r3, #4
 8003e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	2b06      	cmp	r3, #6
 8003e9c:	d902      	bls.n	8003ea4 <NVIC_EncodePriority+0x30>
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	3b03      	subs	r3, #3
 8003ea2:	e000      	b.n	8003ea6 <NVIC_EncodePriority+0x32>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43da      	mvns	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ebc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	43d9      	mvns	r1, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ecc:	4313      	orrs	r3, r2
         );
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3724      	adds	r7, #36	; 0x24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eec:	d301      	bcc.n	8003ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e00f      	b.n	8003f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <SysTick_Config+0x40>)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003efa:	210f      	movs	r1, #15
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f00:	f7ff ff8e 	bl	8003e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <SysTick_Config+0x40>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f0a:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <SysTick_Config+0x40>)
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	e000e010 	.word	0xe000e010

08003f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ff29 	bl	8003d80 <__NVIC_SetPriorityGrouping>
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b086      	sub	sp, #24
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f44:	f7ff ff40 	bl	8003dc8 <__NVIC_GetPriorityGrouping>
 8003f48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f7ff ff90 	bl	8003e74 <NVIC_EncodePriority>
 8003f54:	4602      	mov	r2, r0
 8003f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff5f 	bl	8003e20 <__NVIC_SetPriority>
}
 8003f62:	bf00      	nop
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff33 	bl	8003de4 <__NVIC_EnableIRQ>
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ffa4 	bl	8003edc <SysTick_Config>
 8003f94:	4603      	mov	r3, r0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e08d      	b.n	80040ce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4b47      	ldr	r3, [pc, #284]	; (80040d8 <HAL_DMA_Init+0x138>)
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d80f      	bhi.n	8003fde <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4b45      	ldr	r3, [pc, #276]	; (80040dc <HAL_DMA_Init+0x13c>)
 8003fc6:	4413      	add	r3, r2
 8003fc8:	4a45      	ldr	r2, [pc, #276]	; (80040e0 <HAL_DMA_Init+0x140>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	009a      	lsls	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a42      	ldr	r2, [pc, #264]	; (80040e4 <HAL_DMA_Init+0x144>)
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40
 8003fdc:	e00e      	b.n	8003ffc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b40      	ldr	r3, [pc, #256]	; (80040e8 <HAL_DMA_Init+0x148>)
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4a3d      	ldr	r2, [pc, #244]	; (80040e0 <HAL_DMA_Init+0x140>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	091b      	lsrs	r3, r3, #4
 8003ff0:	009a      	lsls	r2, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a3c      	ldr	r2, [pc, #240]	; (80040ec <HAL_DMA_Init+0x14c>)
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004020:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800402c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004038:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fa76 	bl	8004540 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800405c:	d102      	bne.n	8004064 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004078:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d010      	beq.n	80040a4 <HAL_DMA_Init+0x104>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b04      	cmp	r3, #4
 8004088:	d80c      	bhi.n	80040a4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fa96 	bl	80045bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	e008      	b.n	80040b6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40020407 	.word	0x40020407
 80040dc:	bffdfff8 	.word	0xbffdfff8
 80040e0:	cccccccd 	.word	0xcccccccd
 80040e4:	40020000 	.word	0x40020000
 80040e8:	bffdfbf8 	.word	0xbffdfbf8
 80040ec:	40020400 	.word	0x40020400

080040f0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_DMA_Start_IT+0x20>
 800410c:	2302      	movs	r3, #2
 800410e:	e066      	b.n	80041de <HAL_DMA_Start_IT+0xee>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d155      	bne.n	80041d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0201 	bic.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f9bb 	bl	80044c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 020e 	orr.w	r2, r2, #14
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e00f      	b.n	8004188 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0204 	bic.w	r2, r2, #4
 8004176:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 020a 	orr.w	r2, r2, #10
 8004186:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d007      	beq.n	80041be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0201 	orr.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e005      	b.n	80041dc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80041d8:	2302      	movs	r3, #2
 80041da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d005      	beq.n	800420a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2204      	movs	r2, #4
 8004202:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
 8004208:	e037      	b.n	800427a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 020e 	bic.w	r2, r2, #14
 8004218:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004228:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0201 	bic.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	f003 021f 	and.w	r2, r3, #31
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	2101      	movs	r1, #1
 8004248:	fa01 f202 	lsl.w	r2, r1, r2
 800424c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004256:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00c      	beq.n	800427a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800426e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004278:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d00d      	beq.n	80042cc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2204      	movs	r2, #4
 80042b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
 80042ca:	e047      	b.n	800435c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 020e 	bic.w	r2, r2, #14
 80042da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0201 	bic.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004300:	f003 021f 	and.w	r2, r3, #31
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	2101      	movs	r1, #1
 800430a:	fa01 f202 	lsl.w	r2, r1, r2
 800430e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004318:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00c      	beq.n	800433c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004330:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800433a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	4798      	blx	r3
    }
  }
  return status;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	2204      	movs	r2, #4
 8004388:	409a      	lsls	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4013      	ands	r3, r2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d026      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x7a>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d021      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d107      	bne.n	80043ba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0204 	bic.w	r2, r2, #4
 80043b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	f003 021f 	and.w	r2, r3, #31
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	2104      	movs	r1, #4
 80043c8:	fa01 f202 	lsl.w	r2, r1, r2
 80043cc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d071      	beq.n	80044ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043de:	e06c      	b.n	80044ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	2202      	movs	r2, #2
 80043ea:	409a      	lsls	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d02e      	beq.n	8004452 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d029      	beq.n	8004452 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10b      	bne.n	8004424 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 020a 	bic.w	r2, r2, #10
 800441a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	f003 021f 	and.w	r2, r3, #31
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	2102      	movs	r1, #2
 8004432:	fa01 f202 	lsl.w	r2, r1, r2
 8004436:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	2b00      	cmp	r3, #0
 8004446:	d038      	beq.n	80044ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004450:	e033      	b.n	80044ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	2208      	movs	r2, #8
 800445c:	409a      	lsls	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4013      	ands	r3, r2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d02a      	beq.n	80044bc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d025      	beq.n	80044bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 020e 	bic.w	r2, r2, #14
 800447e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	f003 021f 	and.w	r2, r3, #31
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	2101      	movs	r1, #1
 800448e:	fa01 f202 	lsl.w	r2, r1, r2
 8004492:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d004      	beq.n	80044bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044ba:	bf00      	nop
 80044bc:	bf00      	nop
}
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044da:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044ec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	f003 021f 	and.w	r2, r3, #31
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	2101      	movs	r1, #1
 80044fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004500:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b10      	cmp	r3, #16
 8004510:	d108      	bne.n	8004524 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004522:	e007      	b.n	8004534 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	60da      	str	r2, [r3, #12]
}
 8004534:	bf00      	nop
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004550:	429a      	cmp	r2, r3
 8004552:	d802      	bhi.n	800455a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004554:	4b15      	ldr	r3, [pc, #84]	; (80045ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	e001      	b.n	800455e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800455c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	3b08      	subs	r3, #8
 800456a:	4a12      	ldr	r2, [pc, #72]	; (80045b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	091b      	lsrs	r3, r3, #4
 8004572:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004578:	089b      	lsrs	r3, r3, #2
 800457a:	009a      	lsls	r2, r3, #2
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4413      	add	r3, r2
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a0b      	ldr	r2, [pc, #44]	; (80045b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800458a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2201      	movs	r2, #1
 8004594:	409a      	lsls	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	651a      	str	r2, [r3, #80]	; 0x50
}
 800459a:	bf00      	nop
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40020407 	.word	0x40020407
 80045ac:	40020800 	.word	0x40020800
 80045b0:	40020820 	.word	0x40020820
 80045b4:	cccccccd 	.word	0xcccccccd
 80045b8:	40020880 	.word	0x40020880

080045bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	461a      	mov	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a08      	ldr	r2, [pc, #32]	; (8004600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80045de:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	2201      	movs	r2, #1
 80045ea:	409a      	lsls	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	1000823f 	.word	0x1000823f
 8004600:	40020940 	.word	0x40020940

08004604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004612:	e15a      	b.n	80048ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	2101      	movs	r1, #1
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	fa01 f303 	lsl.w	r3, r1, r3
 8004620:	4013      	ands	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 814c 	beq.w	80048c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 0303 	and.w	r3, r3, #3
 8004634:	2b01      	cmp	r3, #1
 8004636:	d005      	beq.n	8004644 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004640:	2b02      	cmp	r3, #2
 8004642:	d130      	bne.n	80046a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	2203      	movs	r2, #3
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4013      	ands	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800467a:	2201      	movs	r2, #1
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	43db      	mvns	r3, r3
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4013      	ands	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	091b      	lsrs	r3, r3, #4
 8004690:	f003 0201 	and.w	r2, r3, #1
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d017      	beq.n	80046e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	2203      	movs	r2, #3
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d123      	bne.n	8004736 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	08da      	lsrs	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3208      	adds	r2, #8
 80046f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	220f      	movs	r2, #15
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4013      	ands	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	08da      	lsrs	r2, r3, #3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3208      	adds	r2, #8
 8004730:	6939      	ldr	r1, [r7, #16]
 8004732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	2203      	movs	r2, #3
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43db      	mvns	r3, r3
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4013      	ands	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f003 0203 	and.w	r2, r3, #3
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80a6 	beq.w	80048c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004778:	4b5b      	ldr	r3, [pc, #364]	; (80048e8 <HAL_GPIO_Init+0x2e4>)
 800477a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800477c:	4a5a      	ldr	r2, [pc, #360]	; (80048e8 <HAL_GPIO_Init+0x2e4>)
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	6613      	str	r3, [r2, #96]	; 0x60
 8004784:	4b58      	ldr	r3, [pc, #352]	; (80048e8 <HAL_GPIO_Init+0x2e4>)
 8004786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004790:	4a56      	ldr	r2, [pc, #344]	; (80048ec <HAL_GPIO_Init+0x2e8>)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	089b      	lsrs	r3, r3, #2
 8004796:	3302      	adds	r3, #2
 8004798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	220f      	movs	r2, #15
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047ba:	d01f      	beq.n	80047fc <HAL_GPIO_Init+0x1f8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a4c      	ldr	r2, [pc, #304]	; (80048f0 <HAL_GPIO_Init+0x2ec>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d019      	beq.n	80047f8 <HAL_GPIO_Init+0x1f4>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a4b      	ldr	r2, [pc, #300]	; (80048f4 <HAL_GPIO_Init+0x2f0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d013      	beq.n	80047f4 <HAL_GPIO_Init+0x1f0>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a4a      	ldr	r2, [pc, #296]	; (80048f8 <HAL_GPIO_Init+0x2f4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00d      	beq.n	80047f0 <HAL_GPIO_Init+0x1ec>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a49      	ldr	r2, [pc, #292]	; (80048fc <HAL_GPIO_Init+0x2f8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d007      	beq.n	80047ec <HAL_GPIO_Init+0x1e8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a48      	ldr	r2, [pc, #288]	; (8004900 <HAL_GPIO_Init+0x2fc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d101      	bne.n	80047e8 <HAL_GPIO_Init+0x1e4>
 80047e4:	2305      	movs	r3, #5
 80047e6:	e00a      	b.n	80047fe <HAL_GPIO_Init+0x1fa>
 80047e8:	2306      	movs	r3, #6
 80047ea:	e008      	b.n	80047fe <HAL_GPIO_Init+0x1fa>
 80047ec:	2304      	movs	r3, #4
 80047ee:	e006      	b.n	80047fe <HAL_GPIO_Init+0x1fa>
 80047f0:	2303      	movs	r3, #3
 80047f2:	e004      	b.n	80047fe <HAL_GPIO_Init+0x1fa>
 80047f4:	2302      	movs	r3, #2
 80047f6:	e002      	b.n	80047fe <HAL_GPIO_Init+0x1fa>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_GPIO_Init+0x1fa>
 80047fc:	2300      	movs	r3, #0
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	f002 0203 	and.w	r2, r2, #3
 8004804:	0092      	lsls	r2, r2, #2
 8004806:	4093      	lsls	r3, r2
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800480e:	4937      	ldr	r1, [pc, #220]	; (80048ec <HAL_GPIO_Init+0x2e8>)
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	089b      	lsrs	r3, r3, #2
 8004814:	3302      	adds	r3, #2
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800481c:	4b39      	ldr	r3, [pc, #228]	; (8004904 <HAL_GPIO_Init+0x300>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	43db      	mvns	r3, r3
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004840:	4a30      	ldr	r2, [pc, #192]	; (8004904 <HAL_GPIO_Init+0x300>)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004846:	4b2f      	ldr	r3, [pc, #188]	; (8004904 <HAL_GPIO_Init+0x300>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	43db      	mvns	r3, r3
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4013      	ands	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800486a:	4a26      	ldr	r2, [pc, #152]	; (8004904 <HAL_GPIO_Init+0x300>)
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004870:	4b24      	ldr	r3, [pc, #144]	; (8004904 <HAL_GPIO_Init+0x300>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	43db      	mvns	r3, r3
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4013      	ands	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004894:	4a1b      	ldr	r2, [pc, #108]	; (8004904 <HAL_GPIO_Init+0x300>)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800489a:	4b1a      	ldr	r3, [pc, #104]	; (8004904 <HAL_GPIO_Init+0x300>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	43db      	mvns	r3, r3
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4013      	ands	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048be:	4a11      	ldr	r2, [pc, #68]	; (8004904 <HAL_GPIO_Init+0x300>)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	3301      	adds	r3, #1
 80048c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f47f ae9d 	bne.w	8004614 <HAL_GPIO_Init+0x10>
  }
}
 80048da:	bf00      	nop
 80048dc:	bf00      	nop
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40010000 	.word	0x40010000
 80048f0:	48000400 	.word	0x48000400
 80048f4:	48000800 	.word	0x48000800
 80048f8:	48000c00 	.word	0x48000c00
 80048fc:	48001000 	.word	0x48001000
 8004900:	48001400 	.word	0x48001400
 8004904:	40010400 	.word	0x40010400

08004908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	807b      	strh	r3, [r7, #2]
 8004914:	4613      	mov	r3, r2
 8004916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004918:	787b      	ldrb	r3, [r7, #1]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800491e:	887a      	ldrh	r2, [r7, #2]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004924:	e002      	b.n	800492c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004926:	887a      	ldrh	r2, [r7, #2]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800494a:	887a      	ldrh	r2, [r7, #2]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4013      	ands	r3, r2
 8004950:	041a      	lsls	r2, r3, #16
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	43d9      	mvns	r1, r3
 8004956:	887b      	ldrh	r3, [r7, #2]
 8004958:	400b      	ands	r3, r1
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	619a      	str	r2, [r3, #24]
}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004978:	695a      	ldr	r2, [r3, #20]
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d006      	beq.n	8004990 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004982:	4a05      	ldr	r2, [pc, #20]	; (8004998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fd f900 	bl	8001b90 <HAL_GPIO_EXTI_Callback>
  }
}
 8004990:	bf00      	nop
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40010400 	.word	0x40010400

0800499c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d141      	bne.n	8004a2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049aa:	4b4b      	ldr	r3, [pc, #300]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b6:	d131      	bne.n	8004a1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049b8:	4b47      	ldr	r3, [pc, #284]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049be:	4a46      	ldr	r2, [pc, #280]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049c8:	4b43      	ldr	r3, [pc, #268]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049d0:	4a41      	ldr	r2, [pc, #260]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049d8:	4b40      	ldr	r3, [pc, #256]	; (8004adc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2232      	movs	r2, #50	; 0x32
 80049de:	fb02 f303 	mul.w	r3, r2, r3
 80049e2:	4a3f      	ldr	r2, [pc, #252]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	0c9b      	lsrs	r3, r3, #18
 80049ea:	3301      	adds	r3, #1
 80049ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049ee:	e002      	b.n	80049f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049f6:	4b38      	ldr	r3, [pc, #224]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a02:	d102      	bne.n	8004a0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f2      	bne.n	80049f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a0a:	4b33      	ldr	r3, [pc, #204]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a16:	d158      	bne.n	8004aca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e057      	b.n	8004acc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a1c:	4b2e      	ldr	r3, [pc, #184]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a22:	4a2d      	ldr	r2, [pc, #180]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004a2c:	e04d      	b.n	8004aca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a34:	d141      	bne.n	8004aba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a36:	4b28      	ldr	r3, [pc, #160]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a42:	d131      	bne.n	8004aa8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a44:	4b24      	ldr	r3, [pc, #144]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a4a:	4a23      	ldr	r2, [pc, #140]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a54:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a5c:	4a1e      	ldr	r2, [pc, #120]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a64:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2232      	movs	r2, #50	; 0x32
 8004a6a:	fb02 f303 	mul.w	r3, r2, r3
 8004a6e:	4a1c      	ldr	r2, [pc, #112]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a70:	fba2 2303 	umull	r2, r3, r2, r3
 8004a74:	0c9b      	lsrs	r3, r3, #18
 8004a76:	3301      	adds	r3, #1
 8004a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a7a:	e002      	b.n	8004a82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a82:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8e:	d102      	bne.n	8004a96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f2      	bne.n	8004a7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa2:	d112      	bne.n	8004aca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e011      	b.n	8004acc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aae:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004ab8:	e007      	b.n	8004aca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004aba:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ac2:	4a05      	ldr	r2, [pc, #20]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ac8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	40007000 	.word	0x40007000
 8004adc:	20000004 	.word	0x20000004
 8004ae0:	431bde83 	.word	0x431bde83

08004ae4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ae8:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4a04      	ldr	r2, [pc, #16]	; (8004b00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004af2:	6093      	str	r3, [r2, #8]
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40007000 	.word	0x40007000

08004b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e2fe      	b.n	8005114 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d075      	beq.n	8004c0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b22:	4b97      	ldr	r3, [pc, #604]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b2c:	4b94      	ldr	r3, [pc, #592]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b0c      	cmp	r3, #12
 8004b3a:	d102      	bne.n	8004b42 <HAL_RCC_OscConfig+0x3e>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d002      	beq.n	8004b48 <HAL_RCC_OscConfig+0x44>
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d10b      	bne.n	8004b60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b48:	4b8d      	ldr	r3, [pc, #564]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d05b      	beq.n	8004c0c <HAL_RCC_OscConfig+0x108>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d157      	bne.n	8004c0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e2d9      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b68:	d106      	bne.n	8004b78 <HAL_RCC_OscConfig+0x74>
 8004b6a:	4b85      	ldr	r3, [pc, #532]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a84      	ldr	r2, [pc, #528]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	e01d      	b.n	8004bb4 <HAL_RCC_OscConfig+0xb0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCC_OscConfig+0x98>
 8004b82:	4b7f      	ldr	r3, [pc, #508]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a7e      	ldr	r2, [pc, #504]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	4b7c      	ldr	r3, [pc, #496]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a7b      	ldr	r2, [pc, #492]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e00b      	b.n	8004bb4 <HAL_RCC_OscConfig+0xb0>
 8004b9c:	4b78      	ldr	r3, [pc, #480]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a77      	ldr	r2, [pc, #476]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	4b75      	ldr	r3, [pc, #468]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a74      	ldr	r2, [pc, #464]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d013      	beq.n	8004be4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fd fd70 	bl	80026a0 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bc4:	f7fd fd6c 	bl	80026a0 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b64      	cmp	r3, #100	; 0x64
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e29e      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bd6:	4b6a      	ldr	r3, [pc, #424]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0xc0>
 8004be2:	e014      	b.n	8004c0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fd fd5c 	bl	80026a0 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bec:	f7fd fd58 	bl	80026a0 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b64      	cmp	r3, #100	; 0x64
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e28a      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bfe:	4b60      	ldr	r3, [pc, #384]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0xe8>
 8004c0a:	e000      	b.n	8004c0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d075      	beq.n	8004d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c1a:	4b59      	ldr	r3, [pc, #356]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c24:	4b56      	ldr	r3, [pc, #344]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0303 	and.w	r3, r3, #3
 8004c2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b0c      	cmp	r3, #12
 8004c32:	d102      	bne.n	8004c3a <HAL_RCC_OscConfig+0x136>
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d002      	beq.n	8004c40 <HAL_RCC_OscConfig+0x13c>
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d11f      	bne.n	8004c80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c40:	4b4f      	ldr	r3, [pc, #316]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_RCC_OscConfig+0x154>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e25d      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c58:	4b49      	ldr	r3, [pc, #292]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	4946      	ldr	r1, [pc, #280]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c6c:	4b45      	ldr	r3, [pc, #276]	; (8004d84 <HAL_RCC_OscConfig+0x280>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fd fcc9 	bl	8002608 <HAL_InitTick>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d043      	beq.n	8004d04 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e249      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d023      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c88:	4b3d      	ldr	r3, [pc, #244]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a3c      	ldr	r2, [pc, #240]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fd fd04 	bl	80026a0 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c9c:	f7fd fd00 	bl	80026a0 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e232      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cae:	4b34      	ldr	r3, [pc, #208]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cba:	4b31      	ldr	r3, [pc, #196]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	061b      	lsls	r3, r3, #24
 8004cc8:	492d      	ldr	r1, [pc, #180]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	604b      	str	r3, [r1, #4]
 8004cce:	e01a      	b.n	8004d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cd0:	4b2b      	ldr	r3, [pc, #172]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2a      	ldr	r2, [pc, #168]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fd fce0 	bl	80026a0 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce4:	f7fd fcdc 	bl	80026a0 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e20e      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cf6:	4b22      	ldr	r3, [pc, #136]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x1e0>
 8004d02:	e000      	b.n	8004d06 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d041      	beq.n	8004d96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01c      	beq.n	8004d54 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d1a:	4b19      	ldr	r3, [pc, #100]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d20:	4a17      	ldr	r2, [pc, #92]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2a:	f7fd fcb9 	bl	80026a0 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d32:	f7fd fcb5 	bl	80026a0 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e1e7      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d44:	4b0e      	ldr	r3, [pc, #56]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0ef      	beq.n	8004d32 <HAL_RCC_OscConfig+0x22e>
 8004d52:	e020      	b.n	8004d96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d54:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <HAL_RCC_OscConfig+0x27c>)
 8004d5c:	f023 0301 	bic.w	r3, r3, #1
 8004d60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d64:	f7fd fc9c 	bl	80026a0 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d6a:	e00d      	b.n	8004d88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d6c:	f7fd fc98 	bl	80026a0 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d906      	bls.n	8004d88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e1ca      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
 8004d7e:	bf00      	nop
 8004d80:	40021000 	.word	0x40021000
 8004d84:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d88:	4b8c      	ldr	r3, [pc, #560]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1ea      	bne.n	8004d6c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 80a6 	beq.w	8004ef0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da4:	2300      	movs	r3, #0
 8004da6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004da8:	4b84      	ldr	r3, [pc, #528]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_OscConfig+0x2b4>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_RCC_OscConfig+0x2b6>
 8004db8:	2300      	movs	r3, #0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00d      	beq.n	8004dda <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dbe:	4b7f      	ldr	r3, [pc, #508]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	4a7e      	ldr	r2, [pc, #504]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8004dca:	4b7c      	ldr	r3, [pc, #496]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dda:	4b79      	ldr	r3, [pc, #484]	; (8004fc0 <HAL_RCC_OscConfig+0x4bc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d118      	bne.n	8004e18 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004de6:	4b76      	ldr	r3, [pc, #472]	; (8004fc0 <HAL_RCC_OscConfig+0x4bc>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a75      	ldr	r2, [pc, #468]	; (8004fc0 <HAL_RCC_OscConfig+0x4bc>)
 8004dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004df2:	f7fd fc55 	bl	80026a0 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfa:	f7fd fc51 	bl	80026a0 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e183      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e0c:	4b6c      	ldr	r3, [pc, #432]	; (8004fc0 <HAL_RCC_OscConfig+0x4bc>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d108      	bne.n	8004e32 <HAL_RCC_OscConfig+0x32e>
 8004e20:	4b66      	ldr	r3, [pc, #408]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e26:	4a65      	ldr	r2, [pc, #404]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e30:	e024      	b.n	8004e7c <HAL_RCC_OscConfig+0x378>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b05      	cmp	r3, #5
 8004e38:	d110      	bne.n	8004e5c <HAL_RCC_OscConfig+0x358>
 8004e3a:	4b60      	ldr	r3, [pc, #384]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e40:	4a5e      	ldr	r2, [pc, #376]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004e42:	f043 0304 	orr.w	r3, r3, #4
 8004e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e4a:	4b5c      	ldr	r3, [pc, #368]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e50:	4a5a      	ldr	r2, [pc, #360]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e5a:	e00f      	b.n	8004e7c <HAL_RCC_OscConfig+0x378>
 8004e5c:	4b57      	ldr	r3, [pc, #348]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e62:	4a56      	ldr	r2, [pc, #344]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e6c:	4b53      	ldr	r3, [pc, #332]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	4a52      	ldr	r2, [pc, #328]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004e74:	f023 0304 	bic.w	r3, r3, #4
 8004e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d016      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fd fc0c 	bl	80026a0 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8c:	f7fd fc08 	bl	80026a0 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e138      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ea2:	4b46      	ldr	r3, [pc, #280]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0ed      	beq.n	8004e8c <HAL_RCC_OscConfig+0x388>
 8004eb0:	e015      	b.n	8004ede <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb2:	f7fd fbf5 	bl	80026a0 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fd fbf1 	bl	80026a0 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e121      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ed0:	4b3a      	ldr	r3, [pc, #232]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1ed      	bne.n	8004eba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ede:	7ffb      	ldrb	r3, [r7, #31]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d105      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee4:	4b35      	ldr	r3, [pc, #212]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee8:	4a34      	ldr	r2, [pc, #208]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d03c      	beq.n	8004f76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01c      	beq.n	8004f3e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f04:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f0a:	4a2c      	ldr	r2, [pc, #176]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f14:	f7fd fbc4 	bl	80026a0 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f1c:	f7fd fbc0 	bl	80026a0 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e0f2      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f2e:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0ef      	beq.n	8004f1c <HAL_RCC_OscConfig+0x418>
 8004f3c:	e01b      	b.n	8004f76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f3e:	4b1f      	ldr	r3, [pc, #124]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f44:	4a1d      	ldr	r2, [pc, #116]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004f46:	f023 0301 	bic.w	r3, r3, #1
 8004f4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4e:	f7fd fba7 	bl	80026a0 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f56:	f7fd fba3 	bl	80026a0 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e0d5      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f68:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1ef      	bne.n	8004f56 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80c9 	beq.w	8005112 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f80:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	2b0c      	cmp	r3, #12
 8004f8a:	f000 8083 	beq.w	8005094 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d15e      	bne.n	8005054 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f96:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a08      	ldr	r2, [pc, #32]	; (8004fbc <HAL_RCC_OscConfig+0x4b8>)
 8004f9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa2:	f7fd fb7d 	bl	80026a0 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa8:	e00c      	b.n	8004fc4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004faa:	f7fd fb79 	bl	80026a0 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d905      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e0ab      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fc4:	4b55      	ldr	r3, [pc, #340]	; (800511c <HAL_RCC_OscConfig+0x618>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1ec      	bne.n	8004faa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fd0:	4b52      	ldr	r3, [pc, #328]	; (800511c <HAL_RCC_OscConfig+0x618>)
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	4b52      	ldr	r3, [pc, #328]	; (8005120 <HAL_RCC_OscConfig+0x61c>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6a11      	ldr	r1, [r2, #32]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fe0:	3a01      	subs	r2, #1
 8004fe2:	0112      	lsls	r2, r2, #4
 8004fe4:	4311      	orrs	r1, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004fea:	0212      	lsls	r2, r2, #8
 8004fec:	4311      	orrs	r1, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ff2:	0852      	lsrs	r2, r2, #1
 8004ff4:	3a01      	subs	r2, #1
 8004ff6:	0552      	lsls	r2, r2, #21
 8004ff8:	4311      	orrs	r1, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ffe:	0852      	lsrs	r2, r2, #1
 8005000:	3a01      	subs	r2, #1
 8005002:	0652      	lsls	r2, r2, #25
 8005004:	4311      	orrs	r1, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800500a:	06d2      	lsls	r2, r2, #27
 800500c:	430a      	orrs	r2, r1
 800500e:	4943      	ldr	r1, [pc, #268]	; (800511c <HAL_RCC_OscConfig+0x618>)
 8005010:	4313      	orrs	r3, r2
 8005012:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005014:	4b41      	ldr	r3, [pc, #260]	; (800511c <HAL_RCC_OscConfig+0x618>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a40      	ldr	r2, [pc, #256]	; (800511c <HAL_RCC_OscConfig+0x618>)
 800501a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800501e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005020:	4b3e      	ldr	r3, [pc, #248]	; (800511c <HAL_RCC_OscConfig+0x618>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4a3d      	ldr	r2, [pc, #244]	; (800511c <HAL_RCC_OscConfig+0x618>)
 8005026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800502a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502c:	f7fd fb38 	bl	80026a0 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005034:	f7fd fb34 	bl	80026a0 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e066      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005046:	4b35      	ldr	r3, [pc, #212]	; (800511c <HAL_RCC_OscConfig+0x618>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0f0      	beq.n	8005034 <HAL_RCC_OscConfig+0x530>
 8005052:	e05e      	b.n	8005112 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005054:	4b31      	ldr	r3, [pc, #196]	; (800511c <HAL_RCC_OscConfig+0x618>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a30      	ldr	r2, [pc, #192]	; (800511c <HAL_RCC_OscConfig+0x618>)
 800505a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800505e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005060:	f7fd fb1e 	bl	80026a0 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005068:	f7fd fb1a 	bl	80026a0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e04c      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800507a:	4b28      	ldr	r3, [pc, #160]	; (800511c <HAL_RCC_OscConfig+0x618>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005086:	4b25      	ldr	r3, [pc, #148]	; (800511c <HAL_RCC_OscConfig+0x618>)
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	4924      	ldr	r1, [pc, #144]	; (800511c <HAL_RCC_OscConfig+0x618>)
 800508c:	4b25      	ldr	r3, [pc, #148]	; (8005124 <HAL_RCC_OscConfig+0x620>)
 800508e:	4013      	ands	r3, r2
 8005090:	60cb      	str	r3, [r1, #12]
 8005092:	e03e      	b.n	8005112 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e039      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80050a0:	4b1e      	ldr	r3, [pc, #120]	; (800511c <HAL_RCC_OscConfig+0x618>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f003 0203 	and.w	r2, r3, #3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d12c      	bne.n	800510e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	3b01      	subs	r3, #1
 80050c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d123      	bne.n	800510e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d11b      	bne.n	800510e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d113      	bne.n	800510e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	085b      	lsrs	r3, r3, #1
 80050f2:	3b01      	subs	r3, #1
 80050f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d109      	bne.n	800510e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005104:	085b      	lsrs	r3, r3, #1
 8005106:	3b01      	subs	r3, #1
 8005108:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800510a:	429a      	cmp	r2, r3
 800510c:	d001      	beq.n	8005112 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e000      	b.n	8005114 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3720      	adds	r7, #32
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40021000 	.word	0x40021000
 8005120:	019f800c 	.word	0x019f800c
 8005124:	feeefffc 	.word	0xfeeefffc

08005128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e11e      	b.n	800537e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005140:	4b91      	ldr	r3, [pc, #580]	; (8005388 <HAL_RCC_ClockConfig+0x260>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d910      	bls.n	8005170 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514e:	4b8e      	ldr	r3, [pc, #568]	; (8005388 <HAL_RCC_ClockConfig+0x260>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f023 020f 	bic.w	r2, r3, #15
 8005156:	498c      	ldr	r1, [pc, #560]	; (8005388 <HAL_RCC_ClockConfig+0x260>)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	4313      	orrs	r3, r2
 800515c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800515e:	4b8a      	ldr	r3, [pc, #552]	; (8005388 <HAL_RCC_ClockConfig+0x260>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e106      	b.n	800537e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d073      	beq.n	8005264 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b03      	cmp	r3, #3
 8005182:	d129      	bne.n	80051d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005184:	4b81      	ldr	r3, [pc, #516]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e0f4      	b.n	800537e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005194:	f000 f99e 	bl	80054d4 <RCC_GetSysClockFreqFromPLLSource>
 8005198:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4a7c      	ldr	r2, [pc, #496]	; (8005390 <HAL_RCC_ClockConfig+0x268>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d93f      	bls.n	8005222 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051a2:	4b7a      	ldr	r3, [pc, #488]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d009      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d033      	beq.n	8005222 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d12f      	bne.n	8005222 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051c2:	4b72      	ldr	r3, [pc, #456]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ca:	4a70      	ldr	r2, [pc, #448]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 80051cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051d2:	2380      	movs	r3, #128	; 0x80
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	e024      	b.n	8005222 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d107      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051e0:	4b6a      	ldr	r3, [pc, #424]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d109      	bne.n	8005200 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e0c6      	b.n	800537e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051f0:	4b66      	ldr	r3, [pc, #408]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0be      	b.n	800537e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005200:	f000 f8ce 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 8005204:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4a61      	ldr	r2, [pc, #388]	; (8005390 <HAL_RCC_ClockConfig+0x268>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d909      	bls.n	8005222 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800520e:	4b5f      	ldr	r3, [pc, #380]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005216:	4a5d      	ldr	r2, [pc, #372]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 8005218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800521e:	2380      	movs	r3, #128	; 0x80
 8005220:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005222:	4b5a      	ldr	r3, [pc, #360]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f023 0203 	bic.w	r2, r3, #3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4957      	ldr	r1, [pc, #348]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 8005230:	4313      	orrs	r3, r2
 8005232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005234:	f7fd fa34 	bl	80026a0 <HAL_GetTick>
 8005238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	e00a      	b.n	8005252 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800523c:	f7fd fa30 	bl	80026a0 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	; 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e095      	b.n	800537e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005252:	4b4e      	ldr	r3, [pc, #312]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 020c 	and.w	r2, r3, #12
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	429a      	cmp	r2, r3
 8005262:	d1eb      	bne.n	800523c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d023      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800527c:	4b43      	ldr	r3, [pc, #268]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	4a42      	ldr	r2, [pc, #264]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 8005282:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005286:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b00      	cmp	r3, #0
 8005292:	d007      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005294:	4b3d      	ldr	r3, [pc, #244]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800529c:	4a3b      	ldr	r2, [pc, #236]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 800529e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a4:	4b39      	ldr	r3, [pc, #228]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4936      	ldr	r1, [pc, #216]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	608b      	str	r3, [r1, #8]
 80052b6:	e008      	b.n	80052ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2b80      	cmp	r3, #128	; 0x80
 80052bc:	d105      	bne.n	80052ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80052be:	4b33      	ldr	r3, [pc, #204]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	4a32      	ldr	r2, [pc, #200]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 80052c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052ca:	4b2f      	ldr	r3, [pc, #188]	; (8005388 <HAL_RCC_ClockConfig+0x260>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d21d      	bcs.n	8005314 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d8:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <HAL_RCC_ClockConfig+0x260>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f023 020f 	bic.w	r2, r3, #15
 80052e0:	4929      	ldr	r1, [pc, #164]	; (8005388 <HAL_RCC_ClockConfig+0x260>)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80052e8:	f7fd f9da 	bl	80026a0 <HAL_GetTick>
 80052ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ee:	e00a      	b.n	8005306 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f0:	f7fd f9d6 	bl	80026a0 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fe:	4293      	cmp	r3, r2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e03b      	b.n	800537e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005306:	4b20      	ldr	r3, [pc, #128]	; (8005388 <HAL_RCC_ClockConfig+0x260>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d1ed      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005320:	4b1a      	ldr	r3, [pc, #104]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	4917      	ldr	r1, [pc, #92]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 800532e:	4313      	orrs	r3, r2
 8005330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d009      	beq.n	8005352 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800533e:	4b13      	ldr	r3, [pc, #76]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	490f      	ldr	r1, [pc, #60]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 800534e:	4313      	orrs	r3, r2
 8005350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005352:	f000 f825 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 8005356:	4602      	mov	r2, r0
 8005358:	4b0c      	ldr	r3, [pc, #48]	; (800538c <HAL_RCC_ClockConfig+0x264>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	490c      	ldr	r1, [pc, #48]	; (8005394 <HAL_RCC_ClockConfig+0x26c>)
 8005364:	5ccb      	ldrb	r3, [r1, r3]
 8005366:	f003 031f 	and.w	r3, r3, #31
 800536a:	fa22 f303 	lsr.w	r3, r2, r3
 800536e:	4a0a      	ldr	r2, [pc, #40]	; (8005398 <HAL_RCC_ClockConfig+0x270>)
 8005370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005372:	4b0a      	ldr	r3, [pc, #40]	; (800539c <HAL_RCC_ClockConfig+0x274>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f7fd f946 	bl	8002608 <HAL_InitTick>
 800537c:	4603      	mov	r3, r0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40022000 	.word	0x40022000
 800538c:	40021000 	.word	0x40021000
 8005390:	04c4b400 	.word	0x04c4b400
 8005394:	08008fb0 	.word	0x08008fb0
 8005398:	20000004 	.word	0x20000004
 800539c:	20000008 	.word	0x20000008

080053a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80053a6:	4b2c      	ldr	r3, [pc, #176]	; (8005458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 030c 	and.w	r3, r3, #12
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d102      	bne.n	80053b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053b2:	4b2a      	ldr	r3, [pc, #168]	; (800545c <HAL_RCC_GetSysClockFreq+0xbc>)
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	e047      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80053b8:	4b27      	ldr	r3, [pc, #156]	; (8005458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 030c 	and.w	r3, r3, #12
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d102      	bne.n	80053ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053c4:	4b26      	ldr	r3, [pc, #152]	; (8005460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	e03e      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80053ca:	4b23      	ldr	r3, [pc, #140]	; (8005458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 030c 	and.w	r3, r3, #12
 80053d2:	2b0c      	cmp	r3, #12
 80053d4:	d136      	bne.n	8005444 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053d6:	4b20      	ldr	r3, [pc, #128]	; (8005458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053e0:	4b1d      	ldr	r3, [pc, #116]	; (8005458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	091b      	lsrs	r3, r3, #4
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	3301      	adds	r3, #1
 80053ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d10c      	bne.n	800540e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053f4:	4a1a      	ldr	r2, [pc, #104]	; (8005460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fc:	4a16      	ldr	r2, [pc, #88]	; (8005458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053fe:	68d2      	ldr	r2, [r2, #12]
 8005400:	0a12      	lsrs	r2, r2, #8
 8005402:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005406:	fb02 f303 	mul.w	r3, r2, r3
 800540a:	617b      	str	r3, [r7, #20]
      break;
 800540c:	e00c      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800540e:	4a13      	ldr	r2, [pc, #76]	; (800545c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	fbb2 f3f3 	udiv	r3, r2, r3
 8005416:	4a10      	ldr	r2, [pc, #64]	; (8005458 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005418:	68d2      	ldr	r2, [r2, #12]
 800541a:	0a12      	lsrs	r2, r2, #8
 800541c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005420:	fb02 f303 	mul.w	r3, r2, r3
 8005424:	617b      	str	r3, [r7, #20]
      break;
 8005426:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005428:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <HAL_RCC_GetSysClockFreq+0xb8>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	0e5b      	lsrs	r3, r3, #25
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	3301      	adds	r3, #1
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	e001      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005448:	693b      	ldr	r3, [r7, #16]
}
 800544a:	4618      	mov	r0, r3
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40021000 	.word	0x40021000
 800545c:	00f42400 	.word	0x00f42400
 8005460:	016e3600 	.word	0x016e3600

08005464 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005468:	4b03      	ldr	r3, [pc, #12]	; (8005478 <HAL_RCC_GetHCLKFreq+0x14>)
 800546a:	681b      	ldr	r3, [r3, #0]
}
 800546c:	4618      	mov	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	20000004 	.word	0x20000004

0800547c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005480:	f7ff fff0 	bl	8005464 <HAL_RCC_GetHCLKFreq>
 8005484:	4602      	mov	r2, r0
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	0a1b      	lsrs	r3, r3, #8
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	4904      	ldr	r1, [pc, #16]	; (80054a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005492:	5ccb      	ldrb	r3, [r1, r3]
 8005494:	f003 031f 	and.w	r3, r3, #31
 8005498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800549c:	4618      	mov	r0, r3
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40021000 	.word	0x40021000
 80054a4:	08008fc0 	.word	0x08008fc0

080054a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054ac:	f7ff ffda 	bl	8005464 <HAL_RCC_GetHCLKFreq>
 80054b0:	4602      	mov	r2, r0
 80054b2:	4b06      	ldr	r3, [pc, #24]	; (80054cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	0adb      	lsrs	r3, r3, #11
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	4904      	ldr	r1, [pc, #16]	; (80054d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054be:	5ccb      	ldrb	r3, [r1, r3]
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40021000 	.word	0x40021000
 80054d0:	08008fc0 	.word	0x08008fc0

080054d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054da:	4b1e      	ldr	r3, [pc, #120]	; (8005554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054e4:	4b1b      	ldr	r3, [pc, #108]	; (8005554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	3301      	adds	r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d10c      	bne.n	8005512 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054f8:	4a17      	ldr	r2, [pc, #92]	; (8005558 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	4a14      	ldr	r2, [pc, #80]	; (8005554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005502:	68d2      	ldr	r2, [r2, #12]
 8005504:	0a12      	lsrs	r2, r2, #8
 8005506:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800550a:	fb02 f303 	mul.w	r3, r2, r3
 800550e:	617b      	str	r3, [r7, #20]
    break;
 8005510:	e00c      	b.n	800552c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005512:	4a12      	ldr	r2, [pc, #72]	; (800555c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	4a0e      	ldr	r2, [pc, #56]	; (8005554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800551c:	68d2      	ldr	r2, [r2, #12]
 800551e:	0a12      	lsrs	r2, r2, #8
 8005520:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005524:	fb02 f303 	mul.w	r3, r2, r3
 8005528:	617b      	str	r3, [r7, #20]
    break;
 800552a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800552c:	4b09      	ldr	r3, [pc, #36]	; (8005554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	0e5b      	lsrs	r3, r3, #25
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	3301      	adds	r3, #1
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	fbb2 f3f3 	udiv	r3, r2, r3
 8005544:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005546:	687b      	ldr	r3, [r7, #4]
}
 8005548:	4618      	mov	r0, r3
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	40021000 	.word	0x40021000
 8005558:	016e3600 	.word	0x016e3600
 800555c:	00f42400 	.word	0x00f42400

08005560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005568:	2300      	movs	r3, #0
 800556a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800556c:	2300      	movs	r3, #0
 800556e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8098 	beq.w	80056ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800557e:	2300      	movs	r3, #0
 8005580:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005582:	4b43      	ldr	r3, [pc, #268]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10d      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800558e:	4b40      	ldr	r3, [pc, #256]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005592:	4a3f      	ldr	r2, [pc, #252]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005598:	6593      	str	r3, [r2, #88]	; 0x58
 800559a:	4b3d      	ldr	r3, [pc, #244]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800559c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a2:	60bb      	str	r3, [r7, #8]
 80055a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055a6:	2301      	movs	r3, #1
 80055a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055aa:	4b3a      	ldr	r3, [pc, #232]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a39      	ldr	r2, [pc, #228]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055b6:	f7fd f873 	bl	80026a0 <HAL_GetTick>
 80055ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055bc:	e009      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055be:	f7fd f86f 	bl	80026a0 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d902      	bls.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	74fb      	strb	r3, [r7, #19]
        break;
 80055d0:	e005      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055d2:	4b30      	ldr	r3, [pc, #192]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0ef      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80055de:	7cfb      	ldrb	r3, [r7, #19]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d159      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055e4:	4b2a      	ldr	r3, [pc, #168]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01e      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d019      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005600:	4b23      	ldr	r3, [pc, #140]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800560c:	4b20      	ldr	r3, [pc, #128]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005612:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800561c:	4b1c      	ldr	r3, [pc, #112]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800562c:	4a18      	ldr	r2, [pc, #96]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d016      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563e:	f7fd f82f 	bl	80026a0 <HAL_GetTick>
 8005642:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005644:	e00b      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005646:	f7fd f82b 	bl	80026a0 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	f241 3288 	movw	r2, #5000	; 0x1388
 8005654:	4293      	cmp	r3, r2
 8005656:	d902      	bls.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	74fb      	strb	r3, [r7, #19]
            break;
 800565c:	e006      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800565e:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0ec      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800566c:	7cfb      	ldrb	r3, [r7, #19]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10b      	bne.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005672:	4b07      	ldr	r3, [pc, #28]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005680:	4903      	ldr	r1, [pc, #12]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005688:	e008      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800568a:	7cfb      	ldrb	r3, [r7, #19]
 800568c:	74bb      	strb	r3, [r7, #18]
 800568e:	e005      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005690:	40021000 	.word	0x40021000
 8005694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005698:	7cfb      	ldrb	r3, [r7, #19]
 800569a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800569c:	7c7b      	ldrb	r3, [r7, #17]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d105      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a2:	4ba7      	ldr	r3, [pc, #668]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a6:	4aa6      	ldr	r2, [pc, #664]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056ba:	4ba1      	ldr	r3, [pc, #644]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c0:	f023 0203 	bic.w	r2, r3, #3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	499d      	ldr	r1, [pc, #628]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056dc:	4b98      	ldr	r3, [pc, #608]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	f023 020c 	bic.w	r2, r3, #12
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	4995      	ldr	r1, [pc, #596]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056fe:	4b90      	ldr	r3, [pc, #576]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005704:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	498c      	ldr	r1, [pc, #560]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005720:	4b87      	ldr	r3, [pc, #540]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005726:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	4984      	ldr	r1, [pc, #528]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0310 	and.w	r3, r3, #16
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005742:	4b7f      	ldr	r3, [pc, #508]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005748:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	497b      	ldr	r1, [pc, #492]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005764:	4b76      	ldr	r3, [pc, #472]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	4973      	ldr	r1, [pc, #460]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005786:	4b6e      	ldr	r3, [pc, #440]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	496a      	ldr	r1, [pc, #424]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057a8:	4b65      	ldr	r3, [pc, #404]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	4962      	ldr	r1, [pc, #392]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057ca:	4b5d      	ldr	r3, [pc, #372]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	4959      	ldr	r1, [pc, #356]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057ec:	4b54      	ldr	r3, [pc, #336]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057f2:	f023 0203 	bic.w	r2, r3, #3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	4951      	ldr	r1, [pc, #324]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800580e:	4b4c      	ldr	r3, [pc, #304]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	4948      	ldr	r1, [pc, #288]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582c:	2b00      	cmp	r3, #0
 800582e:	d015      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005830:	4b43      	ldr	r3, [pc, #268]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005836:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	4940      	ldr	r1, [pc, #256]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800584e:	d105      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005850:	4b3b      	ldr	r3, [pc, #236]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4a3a      	ldr	r2, [pc, #232]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800585a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005864:	2b00      	cmp	r3, #0
 8005866:	d015      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005868:	4b35      	ldr	r3, [pc, #212]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800586a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005876:	4932      	ldr	r1, [pc, #200]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005886:	d105      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005888:	4b2d      	ldr	r3, [pc, #180]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	4a2c      	ldr	r2, [pc, #176]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800588e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005892:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d015      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058a0:	4b27      	ldr	r3, [pc, #156]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ae:	4924      	ldr	r1, [pc, #144]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058be:	d105      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058c0:	4b1f      	ldr	r3, [pc, #124]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	4a1e      	ldr	r2, [pc, #120]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d015      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058d8:	4b19      	ldr	r3, [pc, #100]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e6:	4916      	ldr	r1, [pc, #88]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058f6:	d105      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058f8:	4b11      	ldr	r3, [pc, #68]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4a10      	ldr	r2, [pc, #64]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005902:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d019      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005916:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	4908      	ldr	r1, [pc, #32]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800592e:	d109      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005930:	4b03      	ldr	r3, [pc, #12]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4a02      	ldr	r2, [pc, #8]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800593a:	60d3      	str	r3, [r2, #12]
 800593c:	e002      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800593e:	bf00      	nop
 8005940:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d015      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005950:	4b29      	ldr	r3, [pc, #164]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005956:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595e:	4926      	ldr	r1, [pc, #152]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800596e:	d105      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005970:	4b21      	ldr	r3, [pc, #132]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4a20      	ldr	r2, [pc, #128]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800597a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d015      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005988:	4b1b      	ldr	r3, [pc, #108]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005996:	4918      	ldr	r1, [pc, #96]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a6:	d105      	bne.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059a8:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	4a12      	ldr	r2, [pc, #72]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d015      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059c0:	4b0d      	ldr	r3, [pc, #52]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ce:	490a      	ldr	r1, [pc, #40]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059de:	d105      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059e0:	4b05      	ldr	r3, [pc, #20]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	4a04      	ldr	r2, [pc, #16]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80059ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40021000 	.word	0x40021000

080059fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e049      	b.n	8005aa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fc fc54 	bl	80022d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	f000 ff68 	bl	8006910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d001      	beq.n	8005ac4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e04c      	b.n	8005b5e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a26      	ldr	r2, [pc, #152]	; (8005b6c <HAL_TIM_Base_Start+0xc0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d022      	beq.n	8005b1c <HAL_TIM_Base_Start+0x70>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ade:	d01d      	beq.n	8005b1c <HAL_TIM_Base_Start+0x70>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a22      	ldr	r2, [pc, #136]	; (8005b70 <HAL_TIM_Base_Start+0xc4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d018      	beq.n	8005b1c <HAL_TIM_Base_Start+0x70>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a21      	ldr	r2, [pc, #132]	; (8005b74 <HAL_TIM_Base_Start+0xc8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d013      	beq.n	8005b1c <HAL_TIM_Base_Start+0x70>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1f      	ldr	r2, [pc, #124]	; (8005b78 <HAL_TIM_Base_Start+0xcc>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00e      	beq.n	8005b1c <HAL_TIM_Base_Start+0x70>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a1e      	ldr	r2, [pc, #120]	; (8005b7c <HAL_TIM_Base_Start+0xd0>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d009      	beq.n	8005b1c <HAL_TIM_Base_Start+0x70>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a1c      	ldr	r2, [pc, #112]	; (8005b80 <HAL_TIM_Base_Start+0xd4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <HAL_TIM_Base_Start+0x70>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a1b      	ldr	r2, [pc, #108]	; (8005b84 <HAL_TIM_Base_Start+0xd8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d115      	bne.n	8005b48 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	4b19      	ldr	r3, [pc, #100]	; (8005b88 <HAL_TIM_Base_Start+0xdc>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d015      	beq.n	8005b5a <HAL_TIM_Base_Start+0xae>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b34:	d011      	beq.n	8005b5a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0201 	orr.w	r2, r2, #1
 8005b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b46:	e008      	b.n	8005b5a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e000      	b.n	8005b5c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40012c00 	.word	0x40012c00
 8005b70:	40000400 	.word	0x40000400
 8005b74:	40000800 	.word	0x40000800
 8005b78:	40000c00 	.word	0x40000c00
 8005b7c:	40013400 	.word	0x40013400
 8005b80:	40014000 	.word	0x40014000
 8005b84:	40015000 	.word	0x40015000
 8005b88:	00010007 	.word	0x00010007

08005b8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d001      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e054      	b.n	8005c4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a26      	ldr	r2, [pc, #152]	; (8005c5c <HAL_TIM_Base_Start_IT+0xd0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d022      	beq.n	8005c0c <HAL_TIM_Base_Start_IT+0x80>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bce:	d01d      	beq.n	8005c0c <HAL_TIM_Base_Start_IT+0x80>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a22      	ldr	r2, [pc, #136]	; (8005c60 <HAL_TIM_Base_Start_IT+0xd4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d018      	beq.n	8005c0c <HAL_TIM_Base_Start_IT+0x80>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a21      	ldr	r2, [pc, #132]	; (8005c64 <HAL_TIM_Base_Start_IT+0xd8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d013      	beq.n	8005c0c <HAL_TIM_Base_Start_IT+0x80>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a1f      	ldr	r2, [pc, #124]	; (8005c68 <HAL_TIM_Base_Start_IT+0xdc>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00e      	beq.n	8005c0c <HAL_TIM_Base_Start_IT+0x80>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a1e      	ldr	r2, [pc, #120]	; (8005c6c <HAL_TIM_Base_Start_IT+0xe0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d009      	beq.n	8005c0c <HAL_TIM_Base_Start_IT+0x80>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a1c      	ldr	r2, [pc, #112]	; (8005c70 <HAL_TIM_Base_Start_IT+0xe4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d004      	beq.n	8005c0c <HAL_TIM_Base_Start_IT+0x80>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1b      	ldr	r2, [pc, #108]	; (8005c74 <HAL_TIM_Base_Start_IT+0xe8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d115      	bne.n	8005c38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	4b19      	ldr	r3, [pc, #100]	; (8005c78 <HAL_TIM_Base_Start_IT+0xec>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b06      	cmp	r3, #6
 8005c1c:	d015      	beq.n	8005c4a <HAL_TIM_Base_Start_IT+0xbe>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c24:	d011      	beq.n	8005c4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f042 0201 	orr.w	r2, r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c36:	e008      	b.n	8005c4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0201 	orr.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	e000      	b.n	8005c4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800
 8005c68:	40000c00 	.word	0x40000c00
 8005c6c:	40013400 	.word	0x40013400
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40015000 	.word	0x40015000
 8005c78:	00010007 	.word	0x00010007

08005c7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e049      	b.n	8005d22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f841 	bl	8005d2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	f000 fe28 	bl	8006910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
	...

08005d40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d109      	bne.n	8005d64 <HAL_TIM_PWM_Start+0x24>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	bf14      	ite	ne
 8005d5c:	2301      	movne	r3, #1
 8005d5e:	2300      	moveq	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	e03c      	b.n	8005dde <HAL_TIM_PWM_Start+0x9e>
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d109      	bne.n	8005d7e <HAL_TIM_PWM_Start+0x3e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	bf14      	ite	ne
 8005d76:	2301      	movne	r3, #1
 8005d78:	2300      	moveq	r3, #0
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	e02f      	b.n	8005dde <HAL_TIM_PWM_Start+0x9e>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d109      	bne.n	8005d98 <HAL_TIM_PWM_Start+0x58>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	bf14      	ite	ne
 8005d90:	2301      	movne	r3, #1
 8005d92:	2300      	moveq	r3, #0
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	e022      	b.n	8005dde <HAL_TIM_PWM_Start+0x9e>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b0c      	cmp	r3, #12
 8005d9c:	d109      	bne.n	8005db2 <HAL_TIM_PWM_Start+0x72>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	bf14      	ite	ne
 8005daa:	2301      	movne	r3, #1
 8005dac:	2300      	moveq	r3, #0
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	e015      	b.n	8005dde <HAL_TIM_PWM_Start+0x9e>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b10      	cmp	r3, #16
 8005db6:	d109      	bne.n	8005dcc <HAL_TIM_PWM_Start+0x8c>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	bf14      	ite	ne
 8005dc4:	2301      	movne	r3, #1
 8005dc6:	2300      	moveq	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	e008      	b.n	8005dde <HAL_TIM_PWM_Start+0x9e>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	bf14      	ite	ne
 8005dd8:	2301      	movne	r3, #1
 8005dda:	2300      	moveq	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e0a6      	b.n	8005f34 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d104      	bne.n	8005df6 <HAL_TIM_PWM_Start+0xb6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005df4:	e023      	b.n	8005e3e <HAL_TIM_PWM_Start+0xfe>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d104      	bne.n	8005e06 <HAL_TIM_PWM_Start+0xc6>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e04:	e01b      	b.n	8005e3e <HAL_TIM_PWM_Start+0xfe>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d104      	bne.n	8005e16 <HAL_TIM_PWM_Start+0xd6>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e14:	e013      	b.n	8005e3e <HAL_TIM_PWM_Start+0xfe>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b0c      	cmp	r3, #12
 8005e1a:	d104      	bne.n	8005e26 <HAL_TIM_PWM_Start+0xe6>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e24:	e00b      	b.n	8005e3e <HAL_TIM_PWM_Start+0xfe>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b10      	cmp	r3, #16
 8005e2a:	d104      	bne.n	8005e36 <HAL_TIM_PWM_Start+0xf6>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e34:	e003      	b.n	8005e3e <HAL_TIM_PWM_Start+0xfe>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2202      	movs	r2, #2
 8005e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2201      	movs	r2, #1
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 f9dc 	bl	8007204 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a3a      	ldr	r2, [pc, #232]	; (8005f3c <HAL_TIM_PWM_Start+0x1fc>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d018      	beq.n	8005e88 <HAL_TIM_PWM_Start+0x148>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a39      	ldr	r2, [pc, #228]	; (8005f40 <HAL_TIM_PWM_Start+0x200>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d013      	beq.n	8005e88 <HAL_TIM_PWM_Start+0x148>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a37      	ldr	r2, [pc, #220]	; (8005f44 <HAL_TIM_PWM_Start+0x204>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00e      	beq.n	8005e88 <HAL_TIM_PWM_Start+0x148>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a36      	ldr	r2, [pc, #216]	; (8005f48 <HAL_TIM_PWM_Start+0x208>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d009      	beq.n	8005e88 <HAL_TIM_PWM_Start+0x148>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a34      	ldr	r2, [pc, #208]	; (8005f4c <HAL_TIM_PWM_Start+0x20c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d004      	beq.n	8005e88 <HAL_TIM_PWM_Start+0x148>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a33      	ldr	r2, [pc, #204]	; (8005f50 <HAL_TIM_PWM_Start+0x210>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d101      	bne.n	8005e8c <HAL_TIM_PWM_Start+0x14c>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <HAL_TIM_PWM_Start+0x14e>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ea0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a25      	ldr	r2, [pc, #148]	; (8005f3c <HAL_TIM_PWM_Start+0x1fc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d022      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x1b2>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb4:	d01d      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x1b2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a26      	ldr	r2, [pc, #152]	; (8005f54 <HAL_TIM_PWM_Start+0x214>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d018      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x1b2>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a24      	ldr	r2, [pc, #144]	; (8005f58 <HAL_TIM_PWM_Start+0x218>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d013      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x1b2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a23      	ldr	r2, [pc, #140]	; (8005f5c <HAL_TIM_PWM_Start+0x21c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00e      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x1b2>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a19      	ldr	r2, [pc, #100]	; (8005f40 <HAL_TIM_PWM_Start+0x200>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d009      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x1b2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a18      	ldr	r2, [pc, #96]	; (8005f44 <HAL_TIM_PWM_Start+0x204>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d004      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x1b2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a18      	ldr	r2, [pc, #96]	; (8005f50 <HAL_TIM_PWM_Start+0x210>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d115      	bne.n	8005f1e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	4b19      	ldr	r3, [pc, #100]	; (8005f60 <HAL_TIM_PWM_Start+0x220>)
 8005efa:	4013      	ands	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b06      	cmp	r3, #6
 8005f02:	d015      	beq.n	8005f30 <HAL_TIM_PWM_Start+0x1f0>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0a:	d011      	beq.n	8005f30 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1c:	e008      	b.n	8005f30 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0201 	orr.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	e000      	b.n	8005f32 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40012c00 	.word	0x40012c00
 8005f40:	40013400 	.word	0x40013400
 8005f44:	40014000 	.word	0x40014000
 8005f48:	40014400 	.word	0x40014400
 8005f4c:	40014800 	.word	0x40014800
 8005f50:	40015000 	.word	0x40015000
 8005f54:	40000400 	.word	0x40000400
 8005f58:	40000800 	.word	0x40000800
 8005f5c:	40000c00 	.word	0x40000c00
 8005f60:	00010007 	.word	0x00010007

08005f64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e097      	b.n	80060a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d106      	bne.n	8005f92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7fc f95b 	bl	8002248 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6812      	ldr	r2, [r2, #0]
 8005fa4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005fa8:	f023 0307 	bic.w	r3, r3, #7
 8005fac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f000 fca9 	bl	8006910 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe6:	f023 0303 	bic.w	r3, r3, #3
 8005fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006004:	f023 030c 	bic.w	r3, r3, #12
 8006008:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006010:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006014:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	021b      	lsls	r3, r3, #8
 8006020:	4313      	orrs	r3, r2
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	011a      	lsls	r2, r3, #4
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	031b      	lsls	r3, r3, #12
 8006034:	4313      	orrs	r3, r2
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006042:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800604a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	4313      	orrs	r3, r2
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d110      	bne.n	8006102 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d102      	bne.n	80060ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80060e6:	7b7b      	ldrb	r3, [r7, #13]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d001      	beq.n	80060f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e069      	b.n	80061c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006100:	e031      	b.n	8006166 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b04      	cmp	r3, #4
 8006106:	d110      	bne.n	800612a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006108:	7bbb      	ldrb	r3, [r7, #14]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d102      	bne.n	8006114 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800610e:	7b3b      	ldrb	r3, [r7, #12]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d001      	beq.n	8006118 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e055      	b.n	80061c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006128:	e01d      	b.n	8006166 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d108      	bne.n	8006142 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d105      	bne.n	8006142 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006136:	7b7b      	ldrb	r3, [r7, #13]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d102      	bne.n	8006142 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800613c:	7b3b      	ldrb	r3, [r7, #12]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d001      	beq.n	8006146 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e03e      	b.n	80061c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2202      	movs	r2, #2
 800614a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2202      	movs	r2, #2
 8006152:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2202      	movs	r2, #2
 800615a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2202      	movs	r2, #2
 8006162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_TIM_Encoder_Start+0xc4>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b04      	cmp	r3, #4
 8006170:	d008      	beq.n	8006184 <HAL_TIM_Encoder_Start+0xd4>
 8006172:	e00f      	b.n	8006194 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2201      	movs	r2, #1
 800617a:	2100      	movs	r1, #0
 800617c:	4618      	mov	r0, r3
 800617e:	f001 f841 	bl	8007204 <TIM_CCxChannelCmd>
      break;
 8006182:	e016      	b.n	80061b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2201      	movs	r2, #1
 800618a:	2104      	movs	r1, #4
 800618c:	4618      	mov	r0, r3
 800618e:	f001 f839 	bl	8007204 <TIM_CCxChannelCmd>
      break;
 8006192:	e00e      	b.n	80061b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2201      	movs	r2, #1
 800619a:	2100      	movs	r1, #0
 800619c:	4618      	mov	r0, r3
 800619e:	f001 f831 	bl	8007204 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2201      	movs	r2, #1
 80061a8:	2104      	movs	r1, #4
 80061aa:	4618      	mov	r0, r3
 80061ac:	f001 f82a 	bl	8007204 <TIM_CCxChannelCmd>
      break;
 80061b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0201 	orr.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d020      	beq.n	8006230 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01b      	beq.n	8006230 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f06f 0202 	mvn.w	r2, #2
 8006200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fb5c 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 800621c:	e005      	b.n	800622a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fb4e 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fb5f 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f003 0304 	and.w	r3, r3, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	d020      	beq.n	800627c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01b      	beq.n	800627c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0204 	mvn.w	r2, #4
 800624c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2202      	movs	r2, #2
 8006252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fb36 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 8006268:	e005      	b.n	8006276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fb28 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fb39 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d020      	beq.n	80062c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01b      	beq.n	80062c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0208 	mvn.w	r2, #8
 8006298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2204      	movs	r2, #4
 800629e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fb10 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 80062b4:	e005      	b.n	80062c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fb02 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fb13 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0310 	and.w	r3, r3, #16
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d020      	beq.n	8006314 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01b      	beq.n	8006314 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0210 	mvn.w	r2, #16
 80062e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2208      	movs	r2, #8
 80062ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 faea 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 8006300:	e005      	b.n	800630e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fadc 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 faed 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d007      	beq.n	8006338 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0201 	mvn.w	r2, #1
 8006330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7fb fd94 	bl	8001e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633e:	2b00      	cmp	r3, #0
 8006340:	d104      	bne.n	800634c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00c      	beq.n	8006366 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006352:	2b00      	cmp	r3, #0
 8006354:	d007      	beq.n	8006366 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800635e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 f8a9 	bl	80074b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00c      	beq.n	800638a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006376:	2b00      	cmp	r3, #0
 8006378:	d007      	beq.n	800638a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 f8a1 	bl	80074cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00c      	beq.n	80063ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 faa7 	bl	80068fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00c      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f06f 0220 	mvn.w	r2, #32
 80063ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 f869 	bl	80074a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00c      	beq.n	80063f6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d007      	beq.n	80063f6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80063ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 f875 	bl	80074e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00c      	beq.n	800641a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d007      	beq.n	800641a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f001 f86d 	bl	80074f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00c      	beq.n	800643e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d007      	beq.n	800643e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 f865 	bl	8007508 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00c      	beq.n	8006462 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d007      	beq.n	8006462 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800645a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 f85d 	bl	800751c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006462:	bf00      	nop
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006482:	2b01      	cmp	r3, #1
 8006484:	d101      	bne.n	800648a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006486:	2302      	movs	r3, #2
 8006488:	e0ff      	b.n	800668a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b14      	cmp	r3, #20
 8006496:	f200 80f0 	bhi.w	800667a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800649a:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800649c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a0:	080064f5 	.word	0x080064f5
 80064a4:	0800667b 	.word	0x0800667b
 80064a8:	0800667b 	.word	0x0800667b
 80064ac:	0800667b 	.word	0x0800667b
 80064b0:	08006535 	.word	0x08006535
 80064b4:	0800667b 	.word	0x0800667b
 80064b8:	0800667b 	.word	0x0800667b
 80064bc:	0800667b 	.word	0x0800667b
 80064c0:	08006577 	.word	0x08006577
 80064c4:	0800667b 	.word	0x0800667b
 80064c8:	0800667b 	.word	0x0800667b
 80064cc:	0800667b 	.word	0x0800667b
 80064d0:	080065b7 	.word	0x080065b7
 80064d4:	0800667b 	.word	0x0800667b
 80064d8:	0800667b 	.word	0x0800667b
 80064dc:	0800667b 	.word	0x0800667b
 80064e0:	080065f9 	.word	0x080065f9
 80064e4:	0800667b 	.word	0x0800667b
 80064e8:	0800667b 	.word	0x0800667b
 80064ec:	0800667b 	.word	0x0800667b
 80064f0:	08006639 	.word	0x08006639
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fabc 	bl	8006a78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699a      	ldr	r2, [r3, #24]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0208 	orr.w	r2, r2, #8
 800650e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699a      	ldr	r2, [r3, #24]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0204 	bic.w	r2, r2, #4
 800651e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6999      	ldr	r1, [r3, #24]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	691a      	ldr	r2, [r3, #16]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	619a      	str	r2, [r3, #24]
      break;
 8006532:	e0a5      	b.n	8006680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68b9      	ldr	r1, [r7, #8]
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fb36 	bl	8006bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699a      	ldr	r2, [r3, #24]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800654e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699a      	ldr	r2, [r3, #24]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800655e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6999      	ldr	r1, [r3, #24]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	021a      	lsls	r2, r3, #8
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	619a      	str	r2, [r3, #24]
      break;
 8006574:	e084      	b.n	8006680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fba9 	bl	8006cd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69da      	ldr	r2, [r3, #28]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f042 0208 	orr.w	r2, r2, #8
 8006590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0204 	bic.w	r2, r2, #4
 80065a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69d9      	ldr	r1, [r3, #28]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	61da      	str	r2, [r3, #28]
      break;
 80065b4:	e064      	b.n	8006680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68b9      	ldr	r1, [r7, #8]
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fc1b 	bl	8006df8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69da      	ldr	r2, [r3, #28]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69da      	ldr	r2, [r3, #28]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69d9      	ldr	r1, [r3, #28]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	021a      	lsls	r2, r3, #8
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	61da      	str	r2, [r3, #28]
      break;
 80065f6:	e043      	b.n	8006680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68b9      	ldr	r1, [r7, #8]
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fc8e 	bl	8006f20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0208 	orr.w	r2, r2, #8
 8006612:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0204 	bic.w	r2, r2, #4
 8006622:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	691a      	ldr	r2, [r3, #16]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006636:	e023      	b.n	8006680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68b9      	ldr	r1, [r7, #8]
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fcd8 	bl	8006ff4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006652:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006662:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	021a      	lsls	r2, r3, #8
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006678:	e002      	b.n	8006680 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	75fb      	strb	r3, [r7, #23]
      break;
 800667e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006688:	7dfb      	ldrb	r3, [r7, #23]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop

08006694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d101      	bne.n	80066b0 <HAL_TIM_ConfigClockSource+0x1c>
 80066ac:	2302      	movs	r3, #2
 80066ae:	e0f6      	b.n	800689e <HAL_TIM_ConfigClockSource+0x20a>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80066ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a6f      	ldr	r2, [pc, #444]	; (80068a8 <HAL_TIM_ConfigClockSource+0x214>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	f000 80c1 	beq.w	8006872 <HAL_TIM_ConfigClockSource+0x1de>
 80066f0:	4a6d      	ldr	r2, [pc, #436]	; (80068a8 <HAL_TIM_ConfigClockSource+0x214>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	f200 80c6 	bhi.w	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 80066f8:	4a6c      	ldr	r2, [pc, #432]	; (80068ac <HAL_TIM_ConfigClockSource+0x218>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	f000 80b9 	beq.w	8006872 <HAL_TIM_ConfigClockSource+0x1de>
 8006700:	4a6a      	ldr	r2, [pc, #424]	; (80068ac <HAL_TIM_ConfigClockSource+0x218>)
 8006702:	4293      	cmp	r3, r2
 8006704:	f200 80be 	bhi.w	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 8006708:	4a69      	ldr	r2, [pc, #420]	; (80068b0 <HAL_TIM_ConfigClockSource+0x21c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	f000 80b1 	beq.w	8006872 <HAL_TIM_ConfigClockSource+0x1de>
 8006710:	4a67      	ldr	r2, [pc, #412]	; (80068b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	f200 80b6 	bhi.w	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 8006718:	4a66      	ldr	r2, [pc, #408]	; (80068b4 <HAL_TIM_ConfigClockSource+0x220>)
 800671a:	4293      	cmp	r3, r2
 800671c:	f000 80a9 	beq.w	8006872 <HAL_TIM_ConfigClockSource+0x1de>
 8006720:	4a64      	ldr	r2, [pc, #400]	; (80068b4 <HAL_TIM_ConfigClockSource+0x220>)
 8006722:	4293      	cmp	r3, r2
 8006724:	f200 80ae 	bhi.w	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 8006728:	4a63      	ldr	r2, [pc, #396]	; (80068b8 <HAL_TIM_ConfigClockSource+0x224>)
 800672a:	4293      	cmp	r3, r2
 800672c:	f000 80a1 	beq.w	8006872 <HAL_TIM_ConfigClockSource+0x1de>
 8006730:	4a61      	ldr	r2, [pc, #388]	; (80068b8 <HAL_TIM_ConfigClockSource+0x224>)
 8006732:	4293      	cmp	r3, r2
 8006734:	f200 80a6 	bhi.w	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 8006738:	4a60      	ldr	r2, [pc, #384]	; (80068bc <HAL_TIM_ConfigClockSource+0x228>)
 800673a:	4293      	cmp	r3, r2
 800673c:	f000 8099 	beq.w	8006872 <HAL_TIM_ConfigClockSource+0x1de>
 8006740:	4a5e      	ldr	r2, [pc, #376]	; (80068bc <HAL_TIM_ConfigClockSource+0x228>)
 8006742:	4293      	cmp	r3, r2
 8006744:	f200 809e 	bhi.w	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 8006748:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800674c:	f000 8091 	beq.w	8006872 <HAL_TIM_ConfigClockSource+0x1de>
 8006750:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006754:	f200 8096 	bhi.w	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 8006758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800675c:	f000 8089 	beq.w	8006872 <HAL_TIM_ConfigClockSource+0x1de>
 8006760:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006764:	f200 808e 	bhi.w	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 8006768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676c:	d03e      	beq.n	80067ec <HAL_TIM_ConfigClockSource+0x158>
 800676e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006772:	f200 8087 	bhi.w	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 8006776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677a:	f000 8086 	beq.w	800688a <HAL_TIM_ConfigClockSource+0x1f6>
 800677e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006782:	d87f      	bhi.n	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 8006784:	2b70      	cmp	r3, #112	; 0x70
 8006786:	d01a      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x12a>
 8006788:	2b70      	cmp	r3, #112	; 0x70
 800678a:	d87b      	bhi.n	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 800678c:	2b60      	cmp	r3, #96	; 0x60
 800678e:	d050      	beq.n	8006832 <HAL_TIM_ConfigClockSource+0x19e>
 8006790:	2b60      	cmp	r3, #96	; 0x60
 8006792:	d877      	bhi.n	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 8006794:	2b50      	cmp	r3, #80	; 0x50
 8006796:	d03c      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0x17e>
 8006798:	2b50      	cmp	r3, #80	; 0x50
 800679a:	d873      	bhi.n	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d058      	beq.n	8006852 <HAL_TIM_ConfigClockSource+0x1be>
 80067a0:	2b40      	cmp	r3, #64	; 0x40
 80067a2:	d86f      	bhi.n	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 80067a4:	2b30      	cmp	r3, #48	; 0x30
 80067a6:	d064      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x1de>
 80067a8:	2b30      	cmp	r3, #48	; 0x30
 80067aa:	d86b      	bhi.n	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d060      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x1de>
 80067b0:	2b20      	cmp	r3, #32
 80067b2:	d867      	bhi.n	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d05c      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x1de>
 80067b8:	2b10      	cmp	r3, #16
 80067ba:	d05a      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x1de>
 80067bc:	e062      	b.n	8006884 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067ce:	f000 fcf9 	bl	80071c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	609a      	str	r2, [r3, #8]
      break;
 80067ea:	e04f      	b.n	800688c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067fc:	f000 fce2 	bl	80071c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800680e:	609a      	str	r2, [r3, #8]
      break;
 8006810:	e03c      	b.n	800688c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800681e:	461a      	mov	r2, r3
 8006820:	f000 fc54 	bl	80070cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2150      	movs	r1, #80	; 0x50
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fcad 	bl	800718a <TIM_ITRx_SetConfig>
      break;
 8006830:	e02c      	b.n	800688c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800683e:	461a      	mov	r2, r3
 8006840:	f000 fc73 	bl	800712a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2160      	movs	r1, #96	; 0x60
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fc9d 	bl	800718a <TIM_ITRx_SetConfig>
      break;
 8006850:	e01c      	b.n	800688c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800685e:	461a      	mov	r2, r3
 8006860:	f000 fc34 	bl	80070cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2140      	movs	r1, #64	; 0x40
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fc8d 	bl	800718a <TIM_ITRx_SetConfig>
      break;
 8006870:	e00c      	b.n	800688c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4619      	mov	r1, r3
 800687c:	4610      	mov	r0, r2
 800687e:	f000 fc84 	bl	800718a <TIM_ITRx_SetConfig>
      break;
 8006882:	e003      	b.n	800688c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]
      break;
 8006888:	e000      	b.n	800688c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800688a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	00100070 	.word	0x00100070
 80068ac:	00100060 	.word	0x00100060
 80068b0:	00100050 	.word	0x00100050
 80068b4:	00100040 	.word	0x00100040
 80068b8:	00100030 	.word	0x00100030
 80068bc:	00100020 	.word	0x00100020

080068c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a4c      	ldr	r2, [pc, #304]	; (8006a54 <TIM_Base_SetConfig+0x144>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d017      	beq.n	8006958 <TIM_Base_SetConfig+0x48>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692e:	d013      	beq.n	8006958 <TIM_Base_SetConfig+0x48>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a49      	ldr	r2, [pc, #292]	; (8006a58 <TIM_Base_SetConfig+0x148>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00f      	beq.n	8006958 <TIM_Base_SetConfig+0x48>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a48      	ldr	r2, [pc, #288]	; (8006a5c <TIM_Base_SetConfig+0x14c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00b      	beq.n	8006958 <TIM_Base_SetConfig+0x48>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a47      	ldr	r2, [pc, #284]	; (8006a60 <TIM_Base_SetConfig+0x150>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d007      	beq.n	8006958 <TIM_Base_SetConfig+0x48>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a46      	ldr	r2, [pc, #280]	; (8006a64 <TIM_Base_SetConfig+0x154>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d003      	beq.n	8006958 <TIM_Base_SetConfig+0x48>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a45      	ldr	r2, [pc, #276]	; (8006a68 <TIM_Base_SetConfig+0x158>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d108      	bne.n	800696a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a39      	ldr	r2, [pc, #228]	; (8006a54 <TIM_Base_SetConfig+0x144>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d023      	beq.n	80069ba <TIM_Base_SetConfig+0xaa>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006978:	d01f      	beq.n	80069ba <TIM_Base_SetConfig+0xaa>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a36      	ldr	r2, [pc, #216]	; (8006a58 <TIM_Base_SetConfig+0x148>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d01b      	beq.n	80069ba <TIM_Base_SetConfig+0xaa>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a35      	ldr	r2, [pc, #212]	; (8006a5c <TIM_Base_SetConfig+0x14c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d017      	beq.n	80069ba <TIM_Base_SetConfig+0xaa>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a34      	ldr	r2, [pc, #208]	; (8006a60 <TIM_Base_SetConfig+0x150>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d013      	beq.n	80069ba <TIM_Base_SetConfig+0xaa>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a33      	ldr	r2, [pc, #204]	; (8006a64 <TIM_Base_SetConfig+0x154>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00f      	beq.n	80069ba <TIM_Base_SetConfig+0xaa>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a33      	ldr	r2, [pc, #204]	; (8006a6c <TIM_Base_SetConfig+0x15c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00b      	beq.n	80069ba <TIM_Base_SetConfig+0xaa>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a32      	ldr	r2, [pc, #200]	; (8006a70 <TIM_Base_SetConfig+0x160>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d007      	beq.n	80069ba <TIM_Base_SetConfig+0xaa>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a31      	ldr	r2, [pc, #196]	; (8006a74 <TIM_Base_SetConfig+0x164>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d003      	beq.n	80069ba <TIM_Base_SetConfig+0xaa>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a2c      	ldr	r2, [pc, #176]	; (8006a68 <TIM_Base_SetConfig+0x158>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d108      	bne.n	80069cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a18      	ldr	r2, [pc, #96]	; (8006a54 <TIM_Base_SetConfig+0x144>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d013      	beq.n	8006a20 <TIM_Base_SetConfig+0x110>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a1a      	ldr	r2, [pc, #104]	; (8006a64 <TIM_Base_SetConfig+0x154>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00f      	beq.n	8006a20 <TIM_Base_SetConfig+0x110>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a1a      	ldr	r2, [pc, #104]	; (8006a6c <TIM_Base_SetConfig+0x15c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d00b      	beq.n	8006a20 <TIM_Base_SetConfig+0x110>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a19      	ldr	r2, [pc, #100]	; (8006a70 <TIM_Base_SetConfig+0x160>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d007      	beq.n	8006a20 <TIM_Base_SetConfig+0x110>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a18      	ldr	r2, [pc, #96]	; (8006a74 <TIM_Base_SetConfig+0x164>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d003      	beq.n	8006a20 <TIM_Base_SetConfig+0x110>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a13      	ldr	r2, [pc, #76]	; (8006a68 <TIM_Base_SetConfig+0x158>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d103      	bne.n	8006a28 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	691a      	ldr	r2, [r3, #16]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d105      	bne.n	8006a46 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f023 0201 	bic.w	r2, r3, #1
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	611a      	str	r2, [r3, #16]
  }
}
 8006a46:	bf00      	nop
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	40012c00 	.word	0x40012c00
 8006a58:	40000400 	.word	0x40000400
 8006a5c:	40000800 	.word	0x40000800
 8006a60:	40000c00 	.word	0x40000c00
 8006a64:	40013400 	.word	0x40013400
 8006a68:	40015000 	.word	0x40015000
 8006a6c:	40014000 	.word	0x40014000
 8006a70:	40014400 	.word	0x40014400
 8006a74:	40014800 	.word	0x40014800

08006a78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	f023 0201 	bic.w	r2, r3, #1
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0303 	bic.w	r3, r3, #3
 8006ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f023 0302 	bic.w	r3, r3, #2
 8006ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a30      	ldr	r2, [pc, #192]	; (8006b94 <TIM_OC1_SetConfig+0x11c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d013      	beq.n	8006b00 <TIM_OC1_SetConfig+0x88>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a2f      	ldr	r2, [pc, #188]	; (8006b98 <TIM_OC1_SetConfig+0x120>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00f      	beq.n	8006b00 <TIM_OC1_SetConfig+0x88>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a2e      	ldr	r2, [pc, #184]	; (8006b9c <TIM_OC1_SetConfig+0x124>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d00b      	beq.n	8006b00 <TIM_OC1_SetConfig+0x88>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a2d      	ldr	r2, [pc, #180]	; (8006ba0 <TIM_OC1_SetConfig+0x128>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d007      	beq.n	8006b00 <TIM_OC1_SetConfig+0x88>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a2c      	ldr	r2, [pc, #176]	; (8006ba4 <TIM_OC1_SetConfig+0x12c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d003      	beq.n	8006b00 <TIM_OC1_SetConfig+0x88>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a2b      	ldr	r2, [pc, #172]	; (8006ba8 <TIM_OC1_SetConfig+0x130>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d10c      	bne.n	8006b1a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f023 0308 	bic.w	r3, r3, #8
 8006b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f023 0304 	bic.w	r3, r3, #4
 8006b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a1d      	ldr	r2, [pc, #116]	; (8006b94 <TIM_OC1_SetConfig+0x11c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <TIM_OC1_SetConfig+0xd2>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a1c      	ldr	r2, [pc, #112]	; (8006b98 <TIM_OC1_SetConfig+0x120>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00f      	beq.n	8006b4a <TIM_OC1_SetConfig+0xd2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a1b      	ldr	r2, [pc, #108]	; (8006b9c <TIM_OC1_SetConfig+0x124>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d00b      	beq.n	8006b4a <TIM_OC1_SetConfig+0xd2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a1a      	ldr	r2, [pc, #104]	; (8006ba0 <TIM_OC1_SetConfig+0x128>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d007      	beq.n	8006b4a <TIM_OC1_SetConfig+0xd2>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a19      	ldr	r2, [pc, #100]	; (8006ba4 <TIM_OC1_SetConfig+0x12c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d003      	beq.n	8006b4a <TIM_OC1_SetConfig+0xd2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a18      	ldr	r2, [pc, #96]	; (8006ba8 <TIM_OC1_SetConfig+0x130>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d111      	bne.n	8006b6e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	621a      	str	r2, [r3, #32]
}
 8006b88:	bf00      	nop
 8006b8a:	371c      	adds	r7, #28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	40012c00 	.word	0x40012c00
 8006b98:	40013400 	.word	0x40013400
 8006b9c:	40014000 	.word	0x40014000
 8006ba0:	40014400 	.word	0x40014400
 8006ba4:	40014800 	.word	0x40014800
 8006ba8:	40015000 	.word	0x40015000

08006bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	f023 0210 	bic.w	r2, r3, #16
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f023 0320 	bic.w	r3, r3, #32
 8006bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a2c      	ldr	r2, [pc, #176]	; (8006cbc <TIM_OC2_SetConfig+0x110>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d007      	beq.n	8006c20 <TIM_OC2_SetConfig+0x74>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a2b      	ldr	r2, [pc, #172]	; (8006cc0 <TIM_OC2_SetConfig+0x114>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_OC2_SetConfig+0x74>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a2a      	ldr	r2, [pc, #168]	; (8006cc4 <TIM_OC2_SetConfig+0x118>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d10d      	bne.n	8006c3c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a1f      	ldr	r2, [pc, #124]	; (8006cbc <TIM_OC2_SetConfig+0x110>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d013      	beq.n	8006c6c <TIM_OC2_SetConfig+0xc0>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a1e      	ldr	r2, [pc, #120]	; (8006cc0 <TIM_OC2_SetConfig+0x114>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00f      	beq.n	8006c6c <TIM_OC2_SetConfig+0xc0>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a1e      	ldr	r2, [pc, #120]	; (8006cc8 <TIM_OC2_SetConfig+0x11c>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00b      	beq.n	8006c6c <TIM_OC2_SetConfig+0xc0>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a1d      	ldr	r2, [pc, #116]	; (8006ccc <TIM_OC2_SetConfig+0x120>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d007      	beq.n	8006c6c <TIM_OC2_SetConfig+0xc0>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a1c      	ldr	r2, [pc, #112]	; (8006cd0 <TIM_OC2_SetConfig+0x124>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d003      	beq.n	8006c6c <TIM_OC2_SetConfig+0xc0>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a17      	ldr	r2, [pc, #92]	; (8006cc4 <TIM_OC2_SetConfig+0x118>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d113      	bne.n	8006c94 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	621a      	str	r2, [r3, #32]
}
 8006cae:	bf00      	nop
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	40012c00 	.word	0x40012c00
 8006cc0:	40013400 	.word	0x40013400
 8006cc4:	40015000 	.word	0x40015000
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40014400 	.word	0x40014400
 8006cd0:	40014800 	.word	0x40014800

08006cd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0303 	bic.w	r3, r3, #3
 8006d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	021b      	lsls	r3, r3, #8
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a2b      	ldr	r2, [pc, #172]	; (8006de0 <TIM_OC3_SetConfig+0x10c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d007      	beq.n	8006d46 <TIM_OC3_SetConfig+0x72>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a2a      	ldr	r2, [pc, #168]	; (8006de4 <TIM_OC3_SetConfig+0x110>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d003      	beq.n	8006d46 <TIM_OC3_SetConfig+0x72>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a29      	ldr	r2, [pc, #164]	; (8006de8 <TIM_OC3_SetConfig+0x114>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d10d      	bne.n	8006d62 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a1e      	ldr	r2, [pc, #120]	; (8006de0 <TIM_OC3_SetConfig+0x10c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d013      	beq.n	8006d92 <TIM_OC3_SetConfig+0xbe>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a1d      	ldr	r2, [pc, #116]	; (8006de4 <TIM_OC3_SetConfig+0x110>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d00f      	beq.n	8006d92 <TIM_OC3_SetConfig+0xbe>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a1d      	ldr	r2, [pc, #116]	; (8006dec <TIM_OC3_SetConfig+0x118>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d00b      	beq.n	8006d92 <TIM_OC3_SetConfig+0xbe>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a1c      	ldr	r2, [pc, #112]	; (8006df0 <TIM_OC3_SetConfig+0x11c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d007      	beq.n	8006d92 <TIM_OC3_SetConfig+0xbe>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a1b      	ldr	r2, [pc, #108]	; (8006df4 <TIM_OC3_SetConfig+0x120>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d003      	beq.n	8006d92 <TIM_OC3_SetConfig+0xbe>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a16      	ldr	r2, [pc, #88]	; (8006de8 <TIM_OC3_SetConfig+0x114>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d113      	bne.n	8006dba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	011b      	lsls	r3, r3, #4
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	621a      	str	r2, [r3, #32]
}
 8006dd4:	bf00      	nop
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	40012c00 	.word	0x40012c00
 8006de4:	40013400 	.word	0x40013400
 8006de8:	40015000 	.word	0x40015000
 8006dec:	40014000 	.word	0x40014000
 8006df0:	40014400 	.word	0x40014400
 8006df4:	40014800 	.word	0x40014800

08006df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	021b      	lsls	r3, r3, #8
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	031b      	lsls	r3, r3, #12
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a2c      	ldr	r2, [pc, #176]	; (8006f08 <TIM_OC4_SetConfig+0x110>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d007      	beq.n	8006e6c <TIM_OC4_SetConfig+0x74>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a2b      	ldr	r2, [pc, #172]	; (8006f0c <TIM_OC4_SetConfig+0x114>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d003      	beq.n	8006e6c <TIM_OC4_SetConfig+0x74>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a2a      	ldr	r2, [pc, #168]	; (8006f10 <TIM_OC4_SetConfig+0x118>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d10d      	bne.n	8006e88 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	031b      	lsls	r3, r3, #12
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a1f      	ldr	r2, [pc, #124]	; (8006f08 <TIM_OC4_SetConfig+0x110>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d013      	beq.n	8006eb8 <TIM_OC4_SetConfig+0xc0>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a1e      	ldr	r2, [pc, #120]	; (8006f0c <TIM_OC4_SetConfig+0x114>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00f      	beq.n	8006eb8 <TIM_OC4_SetConfig+0xc0>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a1e      	ldr	r2, [pc, #120]	; (8006f14 <TIM_OC4_SetConfig+0x11c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00b      	beq.n	8006eb8 <TIM_OC4_SetConfig+0xc0>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a1d      	ldr	r2, [pc, #116]	; (8006f18 <TIM_OC4_SetConfig+0x120>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d007      	beq.n	8006eb8 <TIM_OC4_SetConfig+0xc0>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a1c      	ldr	r2, [pc, #112]	; (8006f1c <TIM_OC4_SetConfig+0x124>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d003      	beq.n	8006eb8 <TIM_OC4_SetConfig+0xc0>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a17      	ldr	r2, [pc, #92]	; (8006f10 <TIM_OC4_SetConfig+0x118>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d113      	bne.n	8006ee0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ebe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ec6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	019b      	lsls	r3, r3, #6
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	019b      	lsls	r3, r3, #6
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	621a      	str	r2, [r3, #32]
}
 8006efa:	bf00      	nop
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	40012c00 	.word	0x40012c00
 8006f0c:	40013400 	.word	0x40013400
 8006f10:	40015000 	.word	0x40015000
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40014400 	.word	0x40014400
 8006f1c:	40014800 	.word	0x40014800

08006f20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	041b      	lsls	r3, r3, #16
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a19      	ldr	r2, [pc, #100]	; (8006fdc <TIM_OC5_SetConfig+0xbc>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <TIM_OC5_SetConfig+0x82>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a18      	ldr	r2, [pc, #96]	; (8006fe0 <TIM_OC5_SetConfig+0xc0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00f      	beq.n	8006fa2 <TIM_OC5_SetConfig+0x82>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a17      	ldr	r2, [pc, #92]	; (8006fe4 <TIM_OC5_SetConfig+0xc4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00b      	beq.n	8006fa2 <TIM_OC5_SetConfig+0x82>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a16      	ldr	r2, [pc, #88]	; (8006fe8 <TIM_OC5_SetConfig+0xc8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d007      	beq.n	8006fa2 <TIM_OC5_SetConfig+0x82>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a15      	ldr	r2, [pc, #84]	; (8006fec <TIM_OC5_SetConfig+0xcc>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d003      	beq.n	8006fa2 <TIM_OC5_SetConfig+0x82>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a14      	ldr	r2, [pc, #80]	; (8006ff0 <TIM_OC5_SetConfig+0xd0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d109      	bne.n	8006fb6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	021b      	lsls	r3, r3, #8
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	621a      	str	r2, [r3, #32]
}
 8006fd0:	bf00      	nop
 8006fd2:	371c      	adds	r7, #28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	40012c00 	.word	0x40012c00
 8006fe0:	40013400 	.word	0x40013400
 8006fe4:	40014000 	.word	0x40014000
 8006fe8:	40014400 	.word	0x40014400
 8006fec:	40014800 	.word	0x40014800
 8006ff0:	40015000 	.word	0x40015000

08006ff4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	021b      	lsls	r3, r3, #8
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	4313      	orrs	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800703a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	051b      	lsls	r3, r3, #20
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a1a      	ldr	r2, [pc, #104]	; (80070b4 <TIM_OC6_SetConfig+0xc0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d013      	beq.n	8007078 <TIM_OC6_SetConfig+0x84>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a19      	ldr	r2, [pc, #100]	; (80070b8 <TIM_OC6_SetConfig+0xc4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00f      	beq.n	8007078 <TIM_OC6_SetConfig+0x84>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a18      	ldr	r2, [pc, #96]	; (80070bc <TIM_OC6_SetConfig+0xc8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00b      	beq.n	8007078 <TIM_OC6_SetConfig+0x84>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a17      	ldr	r2, [pc, #92]	; (80070c0 <TIM_OC6_SetConfig+0xcc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d007      	beq.n	8007078 <TIM_OC6_SetConfig+0x84>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a16      	ldr	r2, [pc, #88]	; (80070c4 <TIM_OC6_SetConfig+0xd0>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d003      	beq.n	8007078 <TIM_OC6_SetConfig+0x84>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a15      	ldr	r2, [pc, #84]	; (80070c8 <TIM_OC6_SetConfig+0xd4>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d109      	bne.n	800708c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800707e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	029b      	lsls	r3, r3, #10
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	4313      	orrs	r3, r2
 800708a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	621a      	str	r2, [r3, #32]
}
 80070a6:	bf00      	nop
 80070a8:	371c      	adds	r7, #28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	40012c00 	.word	0x40012c00
 80070b8:	40013400 	.word	0x40013400
 80070bc:	40014000 	.word	0x40014000
 80070c0:	40014400 	.word	0x40014400
 80070c4:	40014800 	.word	0x40014800
 80070c8:	40015000 	.word	0x40015000

080070cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	f023 0201 	bic.w	r2, r3, #1
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	4313      	orrs	r3, r2
 8007100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f023 030a 	bic.w	r3, r3, #10
 8007108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	621a      	str	r2, [r3, #32]
}
 800711e:	bf00      	nop
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800712a:	b480      	push	{r7}
 800712c:	b087      	sub	sp, #28
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	f023 0210 	bic.w	r2, r3, #16
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007154:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	031b      	lsls	r3, r3, #12
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	4313      	orrs	r3, r2
 800715e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007166:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	621a      	str	r2, [r3, #32]
}
 800717e:	bf00      	nop
 8007180:	371c      	adds	r7, #28
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800718a:	b480      	push	{r7}
 800718c:	b085      	sub	sp, #20
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80071a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f043 0307 	orr.w	r3, r3, #7
 80071b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	609a      	str	r2, [r3, #8]
}
 80071b8:	bf00      	nop
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	021a      	lsls	r2, r3, #8
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	431a      	orrs	r2, r3
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	609a      	str	r2, [r3, #8]
}
 80071f8:	bf00      	nop
 80071fa:	371c      	adds	r7, #28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f003 031f 	and.w	r3, r3, #31
 8007216:	2201      	movs	r2, #1
 8007218:	fa02 f303 	lsl.w	r3, r2, r3
 800721c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6a1a      	ldr	r2, [r3, #32]
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	43db      	mvns	r3, r3
 8007226:	401a      	ands	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a1a      	ldr	r2, [r3, #32]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f003 031f 	and.w	r3, r3, #31
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	fa01 f303 	lsl.w	r3, r1, r3
 800723c:	431a      	orrs	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	621a      	str	r2, [r3, #32]
}
 8007242:	bf00      	nop
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
	...

08007250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007264:	2302      	movs	r3, #2
 8007266:	e074      	b.n	8007352 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a34      	ldr	r2, [pc, #208]	; (8007360 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d009      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a33      	ldr	r2, [pc, #204]	; (8007364 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d004      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a31      	ldr	r2, [pc, #196]	; (8007368 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d108      	bne.n	80072b8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80072be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a21      	ldr	r2, [pc, #132]	; (8007360 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d022      	beq.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e8:	d01d      	beq.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a1f      	ldr	r2, [pc, #124]	; (800736c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d018      	beq.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a1d      	ldr	r2, [pc, #116]	; (8007370 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d013      	beq.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a1c      	ldr	r2, [pc, #112]	; (8007374 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00e      	beq.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a15      	ldr	r2, [pc, #84]	; (8007364 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d009      	beq.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a18      	ldr	r2, [pc, #96]	; (8007378 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d004      	beq.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a11      	ldr	r2, [pc, #68]	; (8007368 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d10c      	bne.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800732c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	4313      	orrs	r3, r2
 8007336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	40012c00 	.word	0x40012c00
 8007364:	40013400 	.word	0x40013400
 8007368:	40015000 	.word	0x40015000
 800736c:	40000400 	.word	0x40000400
 8007370:	40000800 	.word	0x40000800
 8007374:	40000c00 	.word	0x40000c00
 8007378:	40014000 	.word	0x40014000

0800737c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007390:	2b01      	cmp	r3, #1
 8007392:	d101      	bne.n	8007398 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007394:	2302      	movs	r3, #2
 8007396:	e078      	b.n	800748a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	041b      	lsls	r3, r3, #16
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a1c      	ldr	r2, [pc, #112]	; (8007498 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d009      	beq.n	800743e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a1b      	ldr	r2, [pc, #108]	; (800749c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d004      	beq.n	800743e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a19      	ldr	r2, [pc, #100]	; (80074a0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d11c      	bne.n	8007478 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007448:	051b      	lsls	r3, r3, #20
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	4313      	orrs	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	4313      	orrs	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	40012c00 	.word	0x40012c00
 800749c:	40013400 	.word	0x40013400
 80074a0:	40015000 	.word	0x40015000

080074a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e042      	b.n	80075c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007548:	2b00      	cmp	r3, #0
 800754a:	d106      	bne.n	800755a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7fa fdbb 	bl	80020d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2224      	movs	r2, #36	; 0x24
 800755e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0201 	bic.w	r2, r2, #1
 8007570:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 ff4c 	bl	8008418 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fc4d 	bl	8007e20 <UART_SetConfig>
 8007586:	4603      	mov	r3, r0
 8007588:	2b01      	cmp	r3, #1
 800758a:	d101      	bne.n	8007590 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e01b      	b.n	80075c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800759e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 0201 	orr.w	r2, r2, #1
 80075be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 ffcb 	bl	800855c <UART_CheckIdleState>
 80075c6:	4603      	mov	r3, r0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08a      	sub	sp, #40	; 0x28
 80075d4:	af02      	add	r7, sp, #8
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	d17b      	bne.n	80076e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <HAL_UART_Transmit+0x26>
 80075f0:	88fb      	ldrh	r3, [r7, #6]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e074      	b.n	80076e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2221      	movs	r2, #33	; 0x21
 8007606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800760a:	f7fb f849 	bl	80026a0 <HAL_GetTick>
 800760e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	88fa      	ldrh	r2, [r7, #6]
 8007614:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	88fa      	ldrh	r2, [r7, #6]
 800761c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007628:	d108      	bne.n	800763c <HAL_UART_Transmit+0x6c>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d104      	bne.n	800763c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007632:	2300      	movs	r3, #0
 8007634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	e003      	b.n	8007644 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007640:	2300      	movs	r3, #0
 8007642:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007644:	e030      	b.n	80076a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2200      	movs	r2, #0
 800764e:	2180      	movs	r1, #128	; 0x80
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f001 f82d 	bl	80086b0 <UART_WaitOnFlagUntilTimeout>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d005      	beq.n	8007668 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2220      	movs	r2, #32
 8007660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e03d      	b.n	80076e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10b      	bne.n	8007686 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800767c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	3302      	adds	r3, #2
 8007682:	61bb      	str	r3, [r7, #24]
 8007684:	e007      	b.n	8007696 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	781a      	ldrb	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	3301      	adds	r3, #1
 8007694:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800769c:	b29b      	uxth	r3, r3
 800769e:	3b01      	subs	r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1c8      	bne.n	8007646 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	2200      	movs	r2, #0
 80076bc:	2140      	movs	r1, #64	; 0x40
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 fff6 	bl	80086b0 <UART_WaitOnFlagUntilTimeout>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2220      	movs	r2, #32
 80076ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e006      	b.n	80076e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2220      	movs	r2, #32
 80076da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	e000      	b.n	80076e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80076e2:	2302      	movs	r3, #2
  }
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3720      	adds	r7, #32
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08a      	sub	sp, #40	; 0x28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	4613      	mov	r3, r2
 80076f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007700:	2b20      	cmp	r3, #32
 8007702:	d137      	bne.n	8007774 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_UART_Receive_DMA+0x24>
 800770a:	88fb      	ldrh	r3, [r7, #6]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e030      	b.n	8007776 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a18      	ldr	r2, [pc, #96]	; (8007780 <HAL_UART_Receive_DMA+0x94>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d01f      	beq.n	8007764 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d018      	beq.n	8007764 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	613b      	str	r3, [r7, #16]
   return(result);
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007746:	627b      	str	r3, [r7, #36]	; 0x24
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	461a      	mov	r2, r3
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	623b      	str	r3, [r7, #32]
 8007752:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	69f9      	ldr	r1, [r7, #28]
 8007756:	6a3a      	ldr	r2, [r7, #32]
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	61bb      	str	r3, [r7, #24]
   return(result);
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e6      	bne.n	8007732 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	461a      	mov	r2, r3
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f001 f80e 	bl	800878c <UART_Start_Receive_DMA>
 8007770:	4603      	mov	r3, r0
 8007772:	e000      	b.n	8007776 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007774:	2302      	movs	r3, #2
  }
}
 8007776:	4618      	mov	r0, r3
 8007778:	3728      	adds	r7, #40	; 0x28
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	40008000 	.word	0x40008000

08007784 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b0ba      	sub	sp, #232	; 0xe8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80077ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80077b2:	4013      	ands	r3, r2
 80077b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80077b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d11b      	bne.n	80077f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c4:	f003 0320 	and.w	r3, r3, #32
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d015      	beq.n	80077f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d0:	f003 0320 	and.w	r3, r3, #32
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d105      	bne.n	80077e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d009      	beq.n	80077f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 82e3 	beq.w	8007db4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	4798      	blx	r3
      }
      return;
 80077f6:	e2dd      	b.n	8007db4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80077f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8123 	beq.w	8007a48 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007802:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007806:	4b8d      	ldr	r3, [pc, #564]	; (8007a3c <HAL_UART_IRQHandler+0x2b8>)
 8007808:	4013      	ands	r3, r2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d106      	bne.n	800781c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800780e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007812:	4b8b      	ldr	r3, [pc, #556]	; (8007a40 <HAL_UART_IRQHandler+0x2bc>)
 8007814:	4013      	ands	r3, r2
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8116 	beq.w	8007a48 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800781c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	d011      	beq.n	800784c <HAL_UART_IRQHandler+0xc8>
 8007828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2201      	movs	r2, #1
 800783a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007842:	f043 0201 	orr.w	r2, r3, #1
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800784c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007850:	f003 0302 	and.w	r3, r3, #2
 8007854:	2b00      	cmp	r3, #0
 8007856:	d011      	beq.n	800787c <HAL_UART_IRQHandler+0xf8>
 8007858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00b      	beq.n	800787c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2202      	movs	r2, #2
 800786a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007872:	f043 0204 	orr.w	r2, r3, #4
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800787c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b00      	cmp	r3, #0
 8007886:	d011      	beq.n	80078ac <HAL_UART_IRQHandler+0x128>
 8007888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00b      	beq.n	80078ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2204      	movs	r2, #4
 800789a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078a2:	f043 0202 	orr.w	r2, r3, #2
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078b0:	f003 0308 	and.w	r3, r3, #8
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d017      	beq.n	80078e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d105      	bne.n	80078d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80078c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80078c8:	4b5c      	ldr	r3, [pc, #368]	; (8007a3c <HAL_UART_IRQHandler+0x2b8>)
 80078ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00b      	beq.n	80078e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2208      	movs	r2, #8
 80078d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078de:	f043 0208 	orr.w	r2, r3, #8
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d012      	beq.n	800791a <HAL_UART_IRQHandler+0x196>
 80078f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00c      	beq.n	800791a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007908:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007910:	f043 0220 	orr.w	r2, r3, #32
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8249 	beq.w	8007db8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b00      	cmp	r3, #0
 8007930:	d013      	beq.n	800795a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007936:	f003 0320 	and.w	r3, r3, #32
 800793a:	2b00      	cmp	r3, #0
 800793c:	d105      	bne.n	800794a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800793e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d007      	beq.n	800795a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796e:	2b40      	cmp	r3, #64	; 0x40
 8007970:	d005      	beq.n	800797e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007976:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800797a:	2b00      	cmp	r3, #0
 800797c:	d054      	beq.n	8007a28 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 ffeb 	bl	800895a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798e:	2b40      	cmp	r3, #64	; 0x40
 8007990:	d146      	bne.n	8007a20 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3308      	adds	r3, #8
 8007998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1d9      	bne.n	8007992 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d017      	beq.n	8007a18 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ee:	4a15      	ldr	r2, [pc, #84]	; (8007a44 <HAL_UART_IRQHandler+0x2c0>)
 80079f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fc fc4d 	bl	8004298 <HAL_DMA_Abort_IT>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d019      	beq.n	8007a38 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007a12:	4610      	mov	r0, r2
 8007a14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a16:	e00f      	b.n	8007a38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f9eb 	bl	8007df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a1e:	e00b      	b.n	8007a38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f9e7 	bl	8007df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a26:	e007      	b.n	8007a38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f9e3 	bl	8007df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007a36:	e1bf      	b.n	8007db8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a38:	bf00      	nop
    return;
 8007a3a:	e1bd      	b.n	8007db8 <HAL_UART_IRQHandler+0x634>
 8007a3c:	10000001 	.word	0x10000001
 8007a40:	04000120 	.word	0x04000120
 8007a44:	08008c11 	.word	0x08008c11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	f040 8153 	bne.w	8007cf8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a56:	f003 0310 	and.w	r3, r3, #16
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 814c 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a64:	f003 0310 	and.w	r3, r3, #16
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 8145 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2210      	movs	r2, #16
 8007a74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a80:	2b40      	cmp	r3, #64	; 0x40
 8007a82:	f040 80bb 	bne.w	8007bfc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 818f 	beq.w	8007dbc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007aa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	f080 8187 	bcs.w	8007dbc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ab4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0320 	and.w	r3, r3, #32
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f040 8087 	bne.w	8007bda <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ad8:	e853 3f00 	ldrex	r3, [r3]
 8007adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007af6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007afa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1da      	bne.n	8007acc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b28:	f023 0301 	bic.w	r3, r3, #1
 8007b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3308      	adds	r3, #8
 8007b36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e1      	bne.n	8007b16 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3308      	adds	r3, #8
 8007b72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e3      	bne.n	8007b52 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba0:	e853 3f00 	ldrex	r3, [r3]
 8007ba4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ba8:	f023 0310 	bic.w	r3, r3, #16
 8007bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bba:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bbc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e4      	bne.n	8007b98 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fc fb06 	bl	80041e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2202      	movs	r2, #2
 8007bde:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f907 	bl	8007e08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bfa:	e0df      	b.n	8007dbc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 80d1 	beq.w	8007dc0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007c1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 80cc 	beq.w	8007dc0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c52:	e841 2300 	strex	r3, r2, [r1]
 8007c56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1e4      	bne.n	8007c28 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3308      	adds	r3, #8
 8007c64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c68:	e853 3f00 	ldrex	r3, [r3]
 8007c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c74:	f023 0301 	bic.w	r3, r3, #1
 8007c78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3308      	adds	r3, #8
 8007c82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c86:	633a      	str	r2, [r7, #48]	; 0x30
 8007c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e1      	bne.n	8007c5e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0310 	bic.w	r3, r3, #16
 8007cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007cd0:	61fb      	str	r3, [r7, #28]
 8007cd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	69b9      	ldr	r1, [r7, #24]
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e4      	bne.n	8007cae <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f889 	bl	8007e08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cf6:	e063      	b.n	8007dc0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00e      	beq.n	8007d22 <HAL_UART_IRQHandler+0x59e>
 8007d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d008      	beq.n	8007d22 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 ffb9 	bl	8008c92 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d20:	e051      	b.n	8007dc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d014      	beq.n	8007d58 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d105      	bne.n	8007d46 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d008      	beq.n	8007d58 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d03a      	beq.n	8007dc4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	4798      	blx	r3
    }
    return;
 8007d56:	e035      	b.n	8007dc4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d009      	beq.n	8007d78 <HAL_UART_IRQHandler+0x5f4>
 8007d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 ff63 	bl	8008c3c <UART_EndTransmit_IT>
    return;
 8007d76:	e026      	b.n	8007dc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d009      	beq.n	8007d98 <HAL_UART_IRQHandler+0x614>
 8007d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 ff92 	bl	8008cba <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d96:	e016      	b.n	8007dc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d010      	beq.n	8007dc6 <HAL_UART_IRQHandler+0x642>
 8007da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	da0c      	bge.n	8007dc6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 ff7a 	bl	8008ca6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007db2:	e008      	b.n	8007dc6 <HAL_UART_IRQHandler+0x642>
      return;
 8007db4:	bf00      	nop
 8007db6:	e006      	b.n	8007dc6 <HAL_UART_IRQHandler+0x642>
    return;
 8007db8:	bf00      	nop
 8007dba:	e004      	b.n	8007dc6 <HAL_UART_IRQHandler+0x642>
      return;
 8007dbc:	bf00      	nop
 8007dbe:	e002      	b.n	8007dc6 <HAL_UART_IRQHandler+0x642>
      return;
 8007dc0:	bf00      	nop
 8007dc2:	e000      	b.n	8007dc6 <HAL_UART_IRQHandler+0x642>
    return;
 8007dc4:	bf00      	nop
  }
}
 8007dc6:	37e8      	adds	r7, #232	; 0xe8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e24:	b08c      	sub	sp, #48	; 0x30
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	689a      	ldr	r2, [r3, #8]
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	431a      	orrs	r2, r3
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	4baa      	ldr	r3, [pc, #680]	; (80080f8 <UART_SetConfig+0x2d8>)
 8007e50:	4013      	ands	r3, r2
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	6812      	ldr	r2, [r2, #0]
 8007e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a9f      	ldr	r2, [pc, #636]	; (80080fc <UART_SetConfig+0x2dc>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d004      	beq.n	8007e8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007e96:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	6812      	ldr	r2, [r2, #0]
 8007e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eaa:	f023 010f 	bic.w	r1, r3, #15
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a90      	ldr	r2, [pc, #576]	; (8008100 <UART_SetConfig+0x2e0>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d125      	bne.n	8007f10 <UART_SetConfig+0xf0>
 8007ec4:	4b8f      	ldr	r3, [pc, #572]	; (8008104 <UART_SetConfig+0x2e4>)
 8007ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d81a      	bhi.n	8007f08 <UART_SetConfig+0xe8>
 8007ed2:	a201      	add	r2, pc, #4	; (adr r2, 8007ed8 <UART_SetConfig+0xb8>)
 8007ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed8:	08007ee9 	.word	0x08007ee9
 8007edc:	08007ef9 	.word	0x08007ef9
 8007ee0:	08007ef1 	.word	0x08007ef1
 8007ee4:	08007f01 	.word	0x08007f01
 8007ee8:	2301      	movs	r3, #1
 8007eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eee:	e116      	b.n	800811e <UART_SetConfig+0x2fe>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ef6:	e112      	b.n	800811e <UART_SetConfig+0x2fe>
 8007ef8:	2304      	movs	r3, #4
 8007efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007efe:	e10e      	b.n	800811e <UART_SetConfig+0x2fe>
 8007f00:	2308      	movs	r3, #8
 8007f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f06:	e10a      	b.n	800811e <UART_SetConfig+0x2fe>
 8007f08:	2310      	movs	r3, #16
 8007f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f0e:	e106      	b.n	800811e <UART_SetConfig+0x2fe>
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a7c      	ldr	r2, [pc, #496]	; (8008108 <UART_SetConfig+0x2e8>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d138      	bne.n	8007f8c <UART_SetConfig+0x16c>
 8007f1a:	4b7a      	ldr	r3, [pc, #488]	; (8008104 <UART_SetConfig+0x2e4>)
 8007f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f20:	f003 030c 	and.w	r3, r3, #12
 8007f24:	2b0c      	cmp	r3, #12
 8007f26:	d82d      	bhi.n	8007f84 <UART_SetConfig+0x164>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <UART_SetConfig+0x110>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007f65 	.word	0x08007f65
 8007f34:	08007f85 	.word	0x08007f85
 8007f38:	08007f85 	.word	0x08007f85
 8007f3c:	08007f85 	.word	0x08007f85
 8007f40:	08007f75 	.word	0x08007f75
 8007f44:	08007f85 	.word	0x08007f85
 8007f48:	08007f85 	.word	0x08007f85
 8007f4c:	08007f85 	.word	0x08007f85
 8007f50:	08007f6d 	.word	0x08007f6d
 8007f54:	08007f85 	.word	0x08007f85
 8007f58:	08007f85 	.word	0x08007f85
 8007f5c:	08007f85 	.word	0x08007f85
 8007f60:	08007f7d 	.word	0x08007f7d
 8007f64:	2300      	movs	r3, #0
 8007f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f6a:	e0d8      	b.n	800811e <UART_SetConfig+0x2fe>
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f72:	e0d4      	b.n	800811e <UART_SetConfig+0x2fe>
 8007f74:	2304      	movs	r3, #4
 8007f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f7a:	e0d0      	b.n	800811e <UART_SetConfig+0x2fe>
 8007f7c:	2308      	movs	r3, #8
 8007f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f82:	e0cc      	b.n	800811e <UART_SetConfig+0x2fe>
 8007f84:	2310      	movs	r3, #16
 8007f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f8a:	e0c8      	b.n	800811e <UART_SetConfig+0x2fe>
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a5e      	ldr	r2, [pc, #376]	; (800810c <UART_SetConfig+0x2ec>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d125      	bne.n	8007fe2 <UART_SetConfig+0x1c2>
 8007f96:	4b5b      	ldr	r3, [pc, #364]	; (8008104 <UART_SetConfig+0x2e4>)
 8007f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fa0:	2b30      	cmp	r3, #48	; 0x30
 8007fa2:	d016      	beq.n	8007fd2 <UART_SetConfig+0x1b2>
 8007fa4:	2b30      	cmp	r3, #48	; 0x30
 8007fa6:	d818      	bhi.n	8007fda <UART_SetConfig+0x1ba>
 8007fa8:	2b20      	cmp	r3, #32
 8007faa:	d00a      	beq.n	8007fc2 <UART_SetConfig+0x1a2>
 8007fac:	2b20      	cmp	r3, #32
 8007fae:	d814      	bhi.n	8007fda <UART_SetConfig+0x1ba>
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <UART_SetConfig+0x19a>
 8007fb4:	2b10      	cmp	r3, #16
 8007fb6:	d008      	beq.n	8007fca <UART_SetConfig+0x1aa>
 8007fb8:	e00f      	b.n	8007fda <UART_SetConfig+0x1ba>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc0:	e0ad      	b.n	800811e <UART_SetConfig+0x2fe>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc8:	e0a9      	b.n	800811e <UART_SetConfig+0x2fe>
 8007fca:	2304      	movs	r3, #4
 8007fcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fd0:	e0a5      	b.n	800811e <UART_SetConfig+0x2fe>
 8007fd2:	2308      	movs	r3, #8
 8007fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fd8:	e0a1      	b.n	800811e <UART_SetConfig+0x2fe>
 8007fda:	2310      	movs	r3, #16
 8007fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fe0:	e09d      	b.n	800811e <UART_SetConfig+0x2fe>
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a4a      	ldr	r2, [pc, #296]	; (8008110 <UART_SetConfig+0x2f0>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d125      	bne.n	8008038 <UART_SetConfig+0x218>
 8007fec:	4b45      	ldr	r3, [pc, #276]	; (8008104 <UART_SetConfig+0x2e4>)
 8007fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ff6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ff8:	d016      	beq.n	8008028 <UART_SetConfig+0x208>
 8007ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8007ffc:	d818      	bhi.n	8008030 <UART_SetConfig+0x210>
 8007ffe:	2b80      	cmp	r3, #128	; 0x80
 8008000:	d00a      	beq.n	8008018 <UART_SetConfig+0x1f8>
 8008002:	2b80      	cmp	r3, #128	; 0x80
 8008004:	d814      	bhi.n	8008030 <UART_SetConfig+0x210>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <UART_SetConfig+0x1f0>
 800800a:	2b40      	cmp	r3, #64	; 0x40
 800800c:	d008      	beq.n	8008020 <UART_SetConfig+0x200>
 800800e:	e00f      	b.n	8008030 <UART_SetConfig+0x210>
 8008010:	2300      	movs	r3, #0
 8008012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008016:	e082      	b.n	800811e <UART_SetConfig+0x2fe>
 8008018:	2302      	movs	r3, #2
 800801a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800801e:	e07e      	b.n	800811e <UART_SetConfig+0x2fe>
 8008020:	2304      	movs	r3, #4
 8008022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008026:	e07a      	b.n	800811e <UART_SetConfig+0x2fe>
 8008028:	2308      	movs	r3, #8
 800802a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800802e:	e076      	b.n	800811e <UART_SetConfig+0x2fe>
 8008030:	2310      	movs	r3, #16
 8008032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008036:	e072      	b.n	800811e <UART_SetConfig+0x2fe>
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a35      	ldr	r2, [pc, #212]	; (8008114 <UART_SetConfig+0x2f4>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d12a      	bne.n	8008098 <UART_SetConfig+0x278>
 8008042:	4b30      	ldr	r3, [pc, #192]	; (8008104 <UART_SetConfig+0x2e4>)
 8008044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800804c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008050:	d01a      	beq.n	8008088 <UART_SetConfig+0x268>
 8008052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008056:	d81b      	bhi.n	8008090 <UART_SetConfig+0x270>
 8008058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800805c:	d00c      	beq.n	8008078 <UART_SetConfig+0x258>
 800805e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008062:	d815      	bhi.n	8008090 <UART_SetConfig+0x270>
 8008064:	2b00      	cmp	r3, #0
 8008066:	d003      	beq.n	8008070 <UART_SetConfig+0x250>
 8008068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800806c:	d008      	beq.n	8008080 <UART_SetConfig+0x260>
 800806e:	e00f      	b.n	8008090 <UART_SetConfig+0x270>
 8008070:	2300      	movs	r3, #0
 8008072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008076:	e052      	b.n	800811e <UART_SetConfig+0x2fe>
 8008078:	2302      	movs	r3, #2
 800807a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800807e:	e04e      	b.n	800811e <UART_SetConfig+0x2fe>
 8008080:	2304      	movs	r3, #4
 8008082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008086:	e04a      	b.n	800811e <UART_SetConfig+0x2fe>
 8008088:	2308      	movs	r3, #8
 800808a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800808e:	e046      	b.n	800811e <UART_SetConfig+0x2fe>
 8008090:	2310      	movs	r3, #16
 8008092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008096:	e042      	b.n	800811e <UART_SetConfig+0x2fe>
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a17      	ldr	r2, [pc, #92]	; (80080fc <UART_SetConfig+0x2dc>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d13a      	bne.n	8008118 <UART_SetConfig+0x2f8>
 80080a2:	4b18      	ldr	r3, [pc, #96]	; (8008104 <UART_SetConfig+0x2e4>)
 80080a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080b0:	d01a      	beq.n	80080e8 <UART_SetConfig+0x2c8>
 80080b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080b6:	d81b      	bhi.n	80080f0 <UART_SetConfig+0x2d0>
 80080b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080bc:	d00c      	beq.n	80080d8 <UART_SetConfig+0x2b8>
 80080be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080c2:	d815      	bhi.n	80080f0 <UART_SetConfig+0x2d0>
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <UART_SetConfig+0x2b0>
 80080c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080cc:	d008      	beq.n	80080e0 <UART_SetConfig+0x2c0>
 80080ce:	e00f      	b.n	80080f0 <UART_SetConfig+0x2d0>
 80080d0:	2300      	movs	r3, #0
 80080d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d6:	e022      	b.n	800811e <UART_SetConfig+0x2fe>
 80080d8:	2302      	movs	r3, #2
 80080da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080de:	e01e      	b.n	800811e <UART_SetConfig+0x2fe>
 80080e0:	2304      	movs	r3, #4
 80080e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080e6:	e01a      	b.n	800811e <UART_SetConfig+0x2fe>
 80080e8:	2308      	movs	r3, #8
 80080ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ee:	e016      	b.n	800811e <UART_SetConfig+0x2fe>
 80080f0:	2310      	movs	r3, #16
 80080f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080f6:	e012      	b.n	800811e <UART_SetConfig+0x2fe>
 80080f8:	cfff69f3 	.word	0xcfff69f3
 80080fc:	40008000 	.word	0x40008000
 8008100:	40013800 	.word	0x40013800
 8008104:	40021000 	.word	0x40021000
 8008108:	40004400 	.word	0x40004400
 800810c:	40004800 	.word	0x40004800
 8008110:	40004c00 	.word	0x40004c00
 8008114:	40005000 	.word	0x40005000
 8008118:	2310      	movs	r3, #16
 800811a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4aae      	ldr	r2, [pc, #696]	; (80083dc <UART_SetConfig+0x5bc>)
 8008124:	4293      	cmp	r3, r2
 8008126:	f040 8097 	bne.w	8008258 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800812a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800812e:	2b08      	cmp	r3, #8
 8008130:	d823      	bhi.n	800817a <UART_SetConfig+0x35a>
 8008132:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <UART_SetConfig+0x318>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	0800815d 	.word	0x0800815d
 800813c:	0800817b 	.word	0x0800817b
 8008140:	08008165 	.word	0x08008165
 8008144:	0800817b 	.word	0x0800817b
 8008148:	0800816b 	.word	0x0800816b
 800814c:	0800817b 	.word	0x0800817b
 8008150:	0800817b 	.word	0x0800817b
 8008154:	0800817b 	.word	0x0800817b
 8008158:	08008173 	.word	0x08008173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800815c:	f7fd f98e 	bl	800547c <HAL_RCC_GetPCLK1Freq>
 8008160:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008162:	e010      	b.n	8008186 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008164:	4b9e      	ldr	r3, [pc, #632]	; (80083e0 <UART_SetConfig+0x5c0>)
 8008166:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008168:	e00d      	b.n	8008186 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800816a:	f7fd f919 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 800816e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008170:	e009      	b.n	8008186 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008176:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008178:	e005      	b.n	8008186 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008184:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 8130 	beq.w	80083ee <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	4a94      	ldr	r2, [pc, #592]	; (80083e4 <UART_SetConfig+0x5c4>)
 8008194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008198:	461a      	mov	r2, r3
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819c:	fbb3 f3f2 	udiv	r3, r3, r2
 80081a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	4613      	mov	r3, r2
 80081a8:	005b      	lsls	r3, r3, #1
 80081aa:	4413      	add	r3, r2
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d305      	bcc.n	80081be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d903      	bls.n	80081c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80081c4:	e113      	b.n	80083ee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c8:	2200      	movs	r2, #0
 80081ca:	60bb      	str	r3, [r7, #8]
 80081cc:	60fa      	str	r2, [r7, #12]
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	4a84      	ldr	r2, [pc, #528]	; (80083e4 <UART_SetConfig+0x5c4>)
 80081d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	2200      	movs	r2, #0
 80081dc:	603b      	str	r3, [r7, #0]
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081e8:	f7f8 fcdc 	bl	8000ba4 <__aeabi_uldivmod>
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	4610      	mov	r0, r2
 80081f2:	4619      	mov	r1, r3
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	020b      	lsls	r3, r1, #8
 80081fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008202:	0202      	lsls	r2, r0, #8
 8008204:	6979      	ldr	r1, [r7, #20]
 8008206:	6849      	ldr	r1, [r1, #4]
 8008208:	0849      	lsrs	r1, r1, #1
 800820a:	2000      	movs	r0, #0
 800820c:	460c      	mov	r4, r1
 800820e:	4605      	mov	r5, r0
 8008210:	eb12 0804 	adds.w	r8, r2, r4
 8008214:	eb43 0905 	adc.w	r9, r3, r5
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	469a      	mov	sl, r3
 8008220:	4693      	mov	fp, r2
 8008222:	4652      	mov	r2, sl
 8008224:	465b      	mov	r3, fp
 8008226:	4640      	mov	r0, r8
 8008228:	4649      	mov	r1, r9
 800822a:	f7f8 fcbb 	bl	8000ba4 <__aeabi_uldivmod>
 800822e:	4602      	mov	r2, r0
 8008230:	460b      	mov	r3, r1
 8008232:	4613      	mov	r3, r2
 8008234:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800823c:	d308      	bcc.n	8008250 <UART_SetConfig+0x430>
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008244:	d204      	bcs.n	8008250 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6a3a      	ldr	r2, [r7, #32]
 800824c:	60da      	str	r2, [r3, #12]
 800824e:	e0ce      	b.n	80083ee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008256:	e0ca      	b.n	80083ee <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008260:	d166      	bne.n	8008330 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008262:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008266:	2b08      	cmp	r3, #8
 8008268:	d827      	bhi.n	80082ba <UART_SetConfig+0x49a>
 800826a:	a201      	add	r2, pc, #4	; (adr r2, 8008270 <UART_SetConfig+0x450>)
 800826c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008270:	08008295 	.word	0x08008295
 8008274:	0800829d 	.word	0x0800829d
 8008278:	080082a5 	.word	0x080082a5
 800827c:	080082bb 	.word	0x080082bb
 8008280:	080082ab 	.word	0x080082ab
 8008284:	080082bb 	.word	0x080082bb
 8008288:	080082bb 	.word	0x080082bb
 800828c:	080082bb 	.word	0x080082bb
 8008290:	080082b3 	.word	0x080082b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008294:	f7fd f8f2 	bl	800547c <HAL_RCC_GetPCLK1Freq>
 8008298:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800829a:	e014      	b.n	80082c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800829c:	f7fd f904 	bl	80054a8 <HAL_RCC_GetPCLK2Freq>
 80082a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082a2:	e010      	b.n	80082c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082a4:	4b4e      	ldr	r3, [pc, #312]	; (80083e0 <UART_SetConfig+0x5c0>)
 80082a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082a8:	e00d      	b.n	80082c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082aa:	f7fd f879 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 80082ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082b0:	e009      	b.n	80082c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082b8:	e005      	b.n	80082c6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 8090 	beq.w	80083ee <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	4a44      	ldr	r2, [pc, #272]	; (80083e4 <UART_SetConfig+0x5c4>)
 80082d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082d8:	461a      	mov	r2, r3
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80082e0:	005a      	lsls	r2, r3, #1
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	085b      	lsrs	r3, r3, #1
 80082e8:	441a      	add	r2, r3
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	2b0f      	cmp	r3, #15
 80082f8:	d916      	bls.n	8008328 <UART_SetConfig+0x508>
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008300:	d212      	bcs.n	8008328 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	b29b      	uxth	r3, r3
 8008306:	f023 030f 	bic.w	r3, r3, #15
 800830a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	085b      	lsrs	r3, r3, #1
 8008310:	b29b      	uxth	r3, r3
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	b29a      	uxth	r2, r3
 8008318:	8bfb      	ldrh	r3, [r7, #30]
 800831a:	4313      	orrs	r3, r2
 800831c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	8bfa      	ldrh	r2, [r7, #30]
 8008324:	60da      	str	r2, [r3, #12]
 8008326:	e062      	b.n	80083ee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800832e:	e05e      	b.n	80083ee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008330:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008334:	2b08      	cmp	r3, #8
 8008336:	d828      	bhi.n	800838a <UART_SetConfig+0x56a>
 8008338:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <UART_SetConfig+0x520>)
 800833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833e:	bf00      	nop
 8008340:	08008365 	.word	0x08008365
 8008344:	0800836d 	.word	0x0800836d
 8008348:	08008375 	.word	0x08008375
 800834c:	0800838b 	.word	0x0800838b
 8008350:	0800837b 	.word	0x0800837b
 8008354:	0800838b 	.word	0x0800838b
 8008358:	0800838b 	.word	0x0800838b
 800835c:	0800838b 	.word	0x0800838b
 8008360:	08008383 	.word	0x08008383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008364:	f7fd f88a 	bl	800547c <HAL_RCC_GetPCLK1Freq>
 8008368:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800836a:	e014      	b.n	8008396 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800836c:	f7fd f89c 	bl	80054a8 <HAL_RCC_GetPCLK2Freq>
 8008370:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008372:	e010      	b.n	8008396 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008374:	4b1a      	ldr	r3, [pc, #104]	; (80083e0 <UART_SetConfig+0x5c0>)
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008378:	e00d      	b.n	8008396 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800837a:	f7fd f811 	bl	80053a0 <HAL_RCC_GetSysClockFreq>
 800837e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008380:	e009      	b.n	8008396 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008386:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008388:	e005      	b.n	8008396 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800838a:	2300      	movs	r3, #0
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008394:	bf00      	nop
    }

    if (pclk != 0U)
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	2b00      	cmp	r3, #0
 800839a:	d028      	beq.n	80083ee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	4a10      	ldr	r2, [pc, #64]	; (80083e4 <UART_SetConfig+0x5c4>)
 80083a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083a6:	461a      	mov	r2, r3
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	085b      	lsrs	r3, r3, #1
 80083b4:	441a      	add	r2, r3
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80083be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	2b0f      	cmp	r3, #15
 80083c4:	d910      	bls.n	80083e8 <UART_SetConfig+0x5c8>
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083cc:	d20c      	bcs.n	80083e8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	60da      	str	r2, [r3, #12]
 80083d8:	e009      	b.n	80083ee <UART_SetConfig+0x5ce>
 80083da:	bf00      	nop
 80083dc:	40008000 	.word	0x40008000
 80083e0:	00f42400 	.word	0x00f42400
 80083e4:	08008fc8 	.word	0x08008fc8
      }
      else
      {
        ret = HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2200      	movs	r2, #0
 8008402:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2200      	movs	r2, #0
 8008408:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800840a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800840e:	4618      	mov	r0, r3
 8008410:	3730      	adds	r7, #48	; 0x30
 8008412:	46bd      	mov	sp, r7
 8008414:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008418 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	f003 0308 	and.w	r3, r3, #8
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00a      	beq.n	8008442 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008468:	f003 0302 	and.w	r3, r3, #2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848a:	f003 0304 	and.w	r3, r3, #4
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ac:	f003 0310 	and.w	r3, r3, #16
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00a      	beq.n	80084ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d01a      	beq.n	800852e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008516:	d10a      	bne.n	800852e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	605a      	str	r2, [r3, #4]
  }
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b098      	sub	sp, #96	; 0x60
 8008560:	af02      	add	r7, sp, #8
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800856c:	f7fa f898 	bl	80026a0 <HAL_GetTick>
 8008570:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0308 	and.w	r3, r3, #8
 800857c:	2b08      	cmp	r3, #8
 800857e:	d12f      	bne.n	80085e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008588:	2200      	movs	r2, #0
 800858a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f88e 	bl	80086b0 <UART_WaitOnFlagUntilTimeout>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d022      	beq.n	80085e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	e853 3f00 	ldrex	r3, [r3]
 80085a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085ae:	653b      	str	r3, [r7, #80]	; 0x50
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	461a      	mov	r2, r3
 80085b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085b8:	647b      	str	r3, [r7, #68]	; 0x44
 80085ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085c0:	e841 2300 	strex	r3, r2, [r1]
 80085c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1e6      	bne.n	800859a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2220      	movs	r2, #32
 80085d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e063      	b.n	80086a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0304 	and.w	r3, r3, #4
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	d149      	bne.n	8008682 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085f6:	2200      	movs	r2, #0
 80085f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f857 	bl	80086b0 <UART_WaitOnFlagUntilTimeout>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d03c      	beq.n	8008682 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	e853 3f00 	ldrex	r3, [r3]
 8008614:	623b      	str	r3, [r7, #32]
   return(result);
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800861c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008626:	633b      	str	r3, [r7, #48]	; 0x30
 8008628:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800862c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800862e:	e841 2300 	strex	r3, r2, [r1]
 8008632:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1e6      	bne.n	8008608 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3308      	adds	r3, #8
 8008640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	e853 3f00 	ldrex	r3, [r3]
 8008648:	60fb      	str	r3, [r7, #12]
   return(result);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f023 0301 	bic.w	r3, r3, #1
 8008650:	64bb      	str	r3, [r7, #72]	; 0x48
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3308      	adds	r3, #8
 8008658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800865a:	61fa      	str	r2, [r7, #28]
 800865c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865e:	69b9      	ldr	r1, [r7, #24]
 8008660:	69fa      	ldr	r2, [r7, #28]
 8008662:	e841 2300 	strex	r3, r2, [r1]
 8008666:	617b      	str	r3, [r7, #20]
   return(result);
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e5      	bne.n	800863a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2220      	movs	r2, #32
 8008672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e012      	b.n	80086a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2220      	movs	r2, #32
 8008686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2220      	movs	r2, #32
 800868e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3758      	adds	r7, #88	; 0x58
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	4613      	mov	r3, r2
 80086be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086c0:	e04f      	b.n	8008762 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086c8:	d04b      	beq.n	8008762 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ca:	f7f9 ffe9 	bl	80026a0 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d302      	bcc.n	80086e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e04e      	b.n	8008782 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0304 	and.w	r3, r3, #4
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d037      	beq.n	8008762 <UART_WaitOnFlagUntilTimeout+0xb2>
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2b80      	cmp	r3, #128	; 0x80
 80086f6:	d034      	beq.n	8008762 <UART_WaitOnFlagUntilTimeout+0xb2>
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2b40      	cmp	r3, #64	; 0x40
 80086fc:	d031      	beq.n	8008762 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	69db      	ldr	r3, [r3, #28]
 8008704:	f003 0308 	and.w	r3, r3, #8
 8008708:	2b08      	cmp	r3, #8
 800870a:	d110      	bne.n	800872e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2208      	movs	r2, #8
 8008712:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 f920 	bl	800895a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2208      	movs	r2, #8
 800871e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e029      	b.n	8008782 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800873c:	d111      	bne.n	8008762 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008746:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 f906 	bl	800895a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2220      	movs	r2, #32
 8008752:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e00f      	b.n	8008782 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	69da      	ldr	r2, [r3, #28]
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	4013      	ands	r3, r2
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	429a      	cmp	r2, r3
 8008770:	bf0c      	ite	eq
 8008772:	2301      	moveq	r3, #1
 8008774:	2300      	movne	r3, #0
 8008776:	b2db      	uxtb	r3, r3
 8008778:	461a      	mov	r2, r3
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	429a      	cmp	r2, r3
 800877e:	d0a0      	beq.n	80086c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
	...

0800878c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b096      	sub	sp, #88	; 0x58
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	4613      	mov	r3, r2
 8008798:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	88fa      	ldrh	r2, [r7, #6]
 80087a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2222      	movs	r2, #34	; 0x22
 80087b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d02d      	beq.n	800881e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087c8:	4a40      	ldr	r2, [pc, #256]	; (80088cc <UART_Start_Receive_DMA+0x140>)
 80087ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087d2:	4a3f      	ldr	r2, [pc, #252]	; (80088d0 <UART_Start_Receive_DMA+0x144>)
 80087d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087dc:	4a3d      	ldr	r2, [pc, #244]	; (80088d4 <UART_Start_Receive_DMA+0x148>)
 80087de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087e6:	2200      	movs	r2, #0
 80087e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3324      	adds	r3, #36	; 0x24
 80087f6:	4619      	mov	r1, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087fc:	461a      	mov	r2, r3
 80087fe:	88fb      	ldrh	r3, [r7, #6]
 8008800:	f7fb fc76 	bl	80040f0 <HAL_DMA_Start_IT>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d009      	beq.n	800881e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2210      	movs	r2, #16
 800880e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2220      	movs	r2, #32
 8008816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e051      	b.n	80088c2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d018      	beq.n	8008858 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800882e:	e853 3f00 	ldrex	r3, [r3]
 8008832:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800883a:	657b      	str	r3, [r7, #84]	; 0x54
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	461a      	mov	r2, r3
 8008842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008844:	64bb      	str	r3, [r7, #72]	; 0x48
 8008846:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008848:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800884a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800884c:	e841 2300 	strex	r3, r2, [r1]
 8008850:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1e6      	bne.n	8008826 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3308      	adds	r3, #8
 800885e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008862:	e853 3f00 	ldrex	r3, [r3]
 8008866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	f043 0301 	orr.w	r3, r3, #1
 800886e:	653b      	str	r3, [r7, #80]	; 0x50
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3308      	adds	r3, #8
 8008876:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008878:	637a      	str	r2, [r7, #52]	; 0x34
 800887a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800887e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008880:	e841 2300 	strex	r3, r2, [r1]
 8008884:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1e5      	bne.n	8008858 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3308      	adds	r3, #8
 8008892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	e853 3f00 	ldrex	r3, [r3]
 800889a:	613b      	str	r3, [r7, #16]
   return(result);
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3308      	adds	r3, #8
 80088aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088ac:	623a      	str	r2, [r7, #32]
 80088ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b0:	69f9      	ldr	r1, [r7, #28]
 80088b2:	6a3a      	ldr	r2, [r7, #32]
 80088b4:	e841 2300 	strex	r3, r2, [r1]
 80088b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1e5      	bne.n	800888c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3758      	adds	r7, #88	; 0x58
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	08008a27 	.word	0x08008a27
 80088d0:	08008b53 	.word	0x08008b53
 80088d4:	08008b91 	.word	0x08008b91

080088d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80088d8:	b480      	push	{r7}
 80088da:	b08f      	sub	sp, #60	; 0x3c
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	e853 3f00 	ldrex	r3, [r3]
 80088ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008900:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008906:	e841 2300 	strex	r3, r2, [r1]
 800890a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1e6      	bne.n	80088e0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3308      	adds	r3, #8
 8008918:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	e853 3f00 	ldrex	r3, [r3]
 8008920:	60bb      	str	r3, [r7, #8]
   return(result);
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008928:	633b      	str	r3, [r7, #48]	; 0x30
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	3308      	adds	r3, #8
 8008930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008932:	61ba      	str	r2, [r7, #24]
 8008934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008936:	6979      	ldr	r1, [r7, #20]
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	e841 2300 	strex	r3, r2, [r1]
 800893e:	613b      	str	r3, [r7, #16]
   return(result);
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1e5      	bne.n	8008912 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2220      	movs	r2, #32
 800894a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800894e:	bf00      	nop
 8008950:	373c      	adds	r7, #60	; 0x3c
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800895a:	b480      	push	{r7}
 800895c:	b095      	sub	sp, #84	; 0x54
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896a:	e853 3f00 	ldrex	r3, [r3]
 800896e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	461a      	mov	r2, r3
 800897e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008980:	643b      	str	r3, [r7, #64]	; 0x40
 8008982:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008984:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008986:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008988:	e841 2300 	strex	r3, r2, [r1]
 800898c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800898e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1e6      	bne.n	8008962 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3308      	adds	r3, #8
 800899a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089aa:	f023 0301 	bic.w	r3, r3, #1
 80089ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3308      	adds	r3, #8
 80089b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089c0:	e841 2300 	strex	r3, r2, [r1]
 80089c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1e3      	bne.n	8008994 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d118      	bne.n	8008a06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	e853 3f00 	ldrex	r3, [r3]
 80089e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	f023 0310 	bic.w	r3, r3, #16
 80089e8:	647b      	str	r3, [r7, #68]	; 0x44
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f2:	61bb      	str	r3, [r7, #24]
 80089f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f6:	6979      	ldr	r1, [r7, #20]
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	e841 2300 	strex	r3, r2, [r1]
 80089fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1e6      	bne.n	80089d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008a1a:	bf00      	nop
 8008a1c:	3754      	adds	r7, #84	; 0x54
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b09c      	sub	sp, #112	; 0x70
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a32:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0320 	and.w	r3, r3, #32
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d171      	bne.n	8008b26 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a44:	2200      	movs	r2, #0
 8008a46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a52:	e853 3f00 	ldrex	r3, [r3]
 8008a56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	461a      	mov	r2, r3
 8008a66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a68:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a70:	e841 2300 	strex	r3, r2, [r1]
 8008a74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1e6      	bne.n	8008a4a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3308      	adds	r3, #8
 8008a82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	e853 3f00 	ldrex	r3, [r3]
 8008a8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8e:	f023 0301 	bic.w	r3, r3, #1
 8008a92:	667b      	str	r3, [r7, #100]	; 0x64
 8008a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3308      	adds	r3, #8
 8008a9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008a9c:	647a      	str	r2, [r7, #68]	; 0x44
 8008a9e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008aa4:	e841 2300 	strex	r3, r2, [r1]
 8008aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1e5      	bne.n	8008a7c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	e853 3f00 	ldrex	r3, [r3]
 8008abe:	623b      	str	r3, [r7, #32]
   return(result);
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ac6:	663b      	str	r3, [r7, #96]	; 0x60
 8008ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3308      	adds	r3, #8
 8008ace:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ad0:	633a      	str	r2, [r7, #48]	; 0x30
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ad8:	e841 2300 	strex	r3, r2, [r1]
 8008adc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1e5      	bne.n	8008ab0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d118      	bne.n	8008b26 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f023 0310 	bic.w	r3, r3, #16
 8008b08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b12:	61fb      	str	r3, [r7, #28]
 8008b14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	69b9      	ldr	r1, [r7, #24]
 8008b18:	69fa      	ldr	r2, [r7, #28]
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e6      	bne.n	8008af4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b28:	2200      	movs	r2, #0
 8008b2a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d107      	bne.n	8008b44 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008b3e:	f7ff f963 	bl	8007e08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b42:	e002      	b.n	8008b4a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008b44:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008b46:	f7f9 f9dd 	bl	8001f04 <HAL_UART_RxCpltCallback>
}
 8008b4a:	bf00      	nop
 8008b4c:	3770      	adds	r7, #112	; 0x70
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b084      	sub	sp, #16
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2201      	movs	r2, #1
 8008b64:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d109      	bne.n	8008b82 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b74:	085b      	lsrs	r3, r3, #1
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	4619      	mov	r1, r3
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f7ff f944 	bl	8007e08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b80:	e002      	b.n	8008b88 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f7ff f92c 	bl	8007de0 <HAL_UART_RxHalfCpltCallback>
}
 8008b88:	bf00      	nop
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ba4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb8:	2b80      	cmp	r3, #128	; 0x80
 8008bba:	d109      	bne.n	8008bd0 <UART_DMAError+0x40>
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	2b21      	cmp	r3, #33	; 0x21
 8008bc0:	d106      	bne.n	8008bd0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008bca:	6978      	ldr	r0, [r7, #20]
 8008bcc:	f7ff fe84 	bl	80088d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bda:	2b40      	cmp	r3, #64	; 0x40
 8008bdc:	d109      	bne.n	8008bf2 <UART_DMAError+0x62>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2b22      	cmp	r3, #34	; 0x22
 8008be2:	d106      	bne.n	8008bf2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008bec:	6978      	ldr	r0, [r7, #20]
 8008bee:	f7ff feb4 	bl	800895a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bf8:	f043 0210 	orr.w	r2, r3, #16
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c02:	6978      	ldr	r0, [r7, #20]
 8008c04:	f7ff f8f6 	bl	8007df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c08:	bf00      	nop
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f7ff f8e0 	bl	8007df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c34:	bf00      	nop
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c58:	61fb      	str	r3, [r7, #28]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	61bb      	str	r3, [r7, #24]
 8008c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c66:	6979      	ldr	r1, [r7, #20]
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1e6      	bne.n	8008c44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f7ff f8a1 	bl	8007dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c8a:	bf00      	nop
 8008c8c:	3720      	adds	r7, #32
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b083      	sub	sp, #12
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c9a:	bf00      	nop
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008cae:	bf00      	nop
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b083      	sub	sp, #12
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008cc2:	bf00      	nop
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b085      	sub	sp, #20
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d101      	bne.n	8008ce4 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	e027      	b.n	8008d34 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2224      	movs	r2, #36	; 0x24
 8008cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f022 0201 	bic.w	r2, r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2220      	movs	r2, #32
 8008d26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d101      	bne.n	8008d58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d54:	2302      	movs	r3, #2
 8008d56:	e02d      	b.n	8008db4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2224      	movs	r2, #36	; 0x24
 8008d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 0201 	bic.w	r2, r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	430a      	orrs	r2, r1
 8008d92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f84f 	bl	8008e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d101      	bne.n	8008dd4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	e02d      	b.n	8008e30 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2224      	movs	r2, #36	; 0x24
 8008de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f022 0201 	bic.w	r2, r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	430a      	orrs	r2, r1
 8008e0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f811 	bl	8008e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2220      	movs	r2, #32
 8008e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d108      	bne.n	8008e5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e58:	e031      	b.n	8008ebe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e5a:	2308      	movs	r3, #8
 8008e5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e5e:	2308      	movs	r3, #8
 8008e60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	0e5b      	lsrs	r3, r3, #25
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	f003 0307 	and.w	r3, r3, #7
 8008e70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	0f5b      	lsrs	r3, r3, #29
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	f003 0307 	and.w	r3, r3, #7
 8008e80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	7b3a      	ldrb	r2, [r7, #12]
 8008e86:	4911      	ldr	r1, [pc, #68]	; (8008ecc <UARTEx_SetNbDataToProcess+0x94>)
 8008e88:	5c8a      	ldrb	r2, [r1, r2]
 8008e8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e8e:	7b3a      	ldrb	r2, [r7, #12]
 8008e90:	490f      	ldr	r1, [pc, #60]	; (8008ed0 <UARTEx_SetNbDataToProcess+0x98>)
 8008e92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e94:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
 8008ea2:	7b7a      	ldrb	r2, [r7, #13]
 8008ea4:	4909      	ldr	r1, [pc, #36]	; (8008ecc <UARTEx_SetNbDataToProcess+0x94>)
 8008ea6:	5c8a      	ldrb	r2, [r1, r2]
 8008ea8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008eac:	7b7a      	ldrb	r2, [r7, #13]
 8008eae:	4908      	ldr	r1, [pc, #32]	; (8008ed0 <UARTEx_SetNbDataToProcess+0x98>)
 8008eb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008ebe:	bf00      	nop
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	08008fe0 	.word	0x08008fe0
 8008ed0:	08008fe8 	.word	0x08008fe8

08008ed4 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	ed93 7a06 	vldr	s14, [r3, #24]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	edd3 7a07 	vldr	s15, [r3, #28]
 8008eea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	edd3 7a08 	vldr	s15, [r3, #32]
 8008ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	edd3 7a06 	vldr	s15, [r3, #24]
 8008f04:	eeb1 7a67 	vneg.f32	s14, s15
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8008f0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a1a      	ldr	r2, [r3, #32]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d006      	beq.n	8008f38 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	330c      	adds	r3, #12
 8008f2e:	220c      	movs	r2, #12
 8008f30:	2100      	movs	r1, #0
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 f804 	bl	8008f40 <memset>
  }

}
 8008f38:	bf00      	nop
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <memset>:
 8008f40:	4402      	add	r2, r0
 8008f42:	4603      	mov	r3, r0
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d100      	bne.n	8008f4a <memset+0xa>
 8008f48:	4770      	bx	lr
 8008f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f4e:	e7f9      	b.n	8008f44 <memset+0x4>

08008f50 <__libc_init_array>:
 8008f50:	b570      	push	{r4, r5, r6, lr}
 8008f52:	4d0d      	ldr	r5, [pc, #52]	; (8008f88 <__libc_init_array+0x38>)
 8008f54:	4c0d      	ldr	r4, [pc, #52]	; (8008f8c <__libc_init_array+0x3c>)
 8008f56:	1b64      	subs	r4, r4, r5
 8008f58:	10a4      	asrs	r4, r4, #2
 8008f5a:	2600      	movs	r6, #0
 8008f5c:	42a6      	cmp	r6, r4
 8008f5e:	d109      	bne.n	8008f74 <__libc_init_array+0x24>
 8008f60:	4d0b      	ldr	r5, [pc, #44]	; (8008f90 <__libc_init_array+0x40>)
 8008f62:	4c0c      	ldr	r4, [pc, #48]	; (8008f94 <__libc_init_array+0x44>)
 8008f64:	f000 f818 	bl	8008f98 <_init>
 8008f68:	1b64      	subs	r4, r4, r5
 8008f6a:	10a4      	asrs	r4, r4, #2
 8008f6c:	2600      	movs	r6, #0
 8008f6e:	42a6      	cmp	r6, r4
 8008f70:	d105      	bne.n	8008f7e <__libc_init_array+0x2e>
 8008f72:	bd70      	pop	{r4, r5, r6, pc}
 8008f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f78:	4798      	blx	r3
 8008f7a:	3601      	adds	r6, #1
 8008f7c:	e7ee      	b.n	8008f5c <__libc_init_array+0xc>
 8008f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f82:	4798      	blx	r3
 8008f84:	3601      	adds	r6, #1
 8008f86:	e7f2      	b.n	8008f6e <__libc_init_array+0x1e>
 8008f88:	08008ff8 	.word	0x08008ff8
 8008f8c:	08008ff8 	.word	0x08008ff8
 8008f90:	08008ff8 	.word	0x08008ff8
 8008f94:	08008ffc 	.word	0x08008ffc

08008f98 <_init>:
 8008f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9a:	bf00      	nop
 8008f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f9e:	bc08      	pop	{r3}
 8008fa0:	469e      	mov	lr, r3
 8008fa2:	4770      	bx	lr

08008fa4 <_fini>:
 8008fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa6:	bf00      	nop
 8008fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008faa:	bc08      	pop	{r3}
 8008fac:	469e      	mov	lr, r3
 8008fae:	4770      	bx	lr
